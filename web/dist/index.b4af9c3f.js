// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"2rAXy":[function(require,module,exports) {
var Refresh = require('react-refresh/runtime');
Refresh.injectIntoGlobalHook(window);
window.$RefreshReg$ = function() {
};
window.$RefreshSig$ = function() {
    return function(type) {
        return type;
    };
};

},{"react-refresh/runtime":"fNmB3"}],"fNmB3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-refresh-runtime.development.js');

},{"./cjs/react-refresh-runtime.development.js":"1CJiQ"}],"1CJiQ":[function(require,module,exports) {
/** @license React v0.9.0
 * react-refresh-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.
    // It's OK to reference families, but use WeakMap/Set for types.
    var allFamiliesByID = new Map();
    var allFamiliesByType = new PossiblyWeakMap();
    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families
    // that have actually been edited here. This keeps checks fast.
    // $FlowIssue
    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.
    // It is an array of [Family, NextType] tuples.
    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.
    var helpersByRendererID = new Map();
    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.
    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.
    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.
    // It needs to be weak because we do this even for roots that failed to mount.
    // If there is no WeakMap, we won't attempt to do retrying.
    // $FlowIssue
    var rootElements = typeof WeakMap === 'function' ? new WeakMap() : null;
    var isPerformingRefresh = false;
    function computeFullKey(signature) {
        if (signature.fullKey !== null) return signature.fullKey;
        var fullKey = signature.ownKey;
        var hooks;
        try {
            hooks = signature.getCustomHooks();
        } catch (err) {
            // This can happen in an edge case, e.g. if expression like Foo.useSomething
            // depends on Foo which is lazily initialized during rendering.
            // In that case just assume we'll have to remount.
            signature.forceReset = true;
            signature.fullKey = fullKey;
            return fullKey;
        }
        for(var i = 0; i < hooks.length; i++){
            var hook = hooks[i];
            if (typeof hook !== 'function') {
                // Something's wrong. Assume we need to remount.
                signature.forceReset = true;
                signature.fullKey = fullKey;
                return fullKey;
            }
            var nestedHookSignature = allSignaturesByType.get(hook);
            if (nestedHookSignature === undefined) continue;
            var nestedHookKey = computeFullKey(nestedHookSignature);
            if (nestedHookSignature.forceReset) signature.forceReset = true;
            fullKey += '\n---\n' + nestedHookKey;
        }
        signature.fullKey = fullKey;
        return fullKey;
    }
    function haveEqualSignatures(prevType, nextType) {
        var prevSignature = allSignaturesByType.get(prevType);
        var nextSignature = allSignaturesByType.get(nextType);
        if (prevSignature === undefined && nextSignature === undefined) return true;
        if (prevSignature === undefined || nextSignature === undefined) return false;
        if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) return false;
        if (nextSignature.forceReset) return false;
        return true;
    }
    function isReactClass(type) {
        return type.prototype && type.prototype.isReactComponent;
    }
    function canPreserveStateBetween(prevType, nextType) {
        if (isReactClass(prevType) || isReactClass(nextType)) return false;
        if (haveEqualSignatures(prevType, nextType)) return true;
        return false;
    }
    function resolveFamily(type) {
        // Only check updated types to keep lookups fast.
        return updatedFamiliesByType.get(type);
    } // If we didn't care about IE11, we could use new Map/Set(iterable).
    function cloneMap(map) {
        var clone = new Map();
        map.forEach(function(value, key) {
            clone.set(key, value);
        });
        return clone;
    }
    function cloneSet(set) {
        var clone = new Set();
        set.forEach(function(value) {
            clone.add(value);
        });
        return clone;
    }
    function performReactRefresh() {
        if (pendingUpdates.length === 0) return null;
        if (isPerformingRefresh) return null;
        isPerformingRefresh = true;
        try {
            var staleFamilies = new Set();
            var updatedFamilies = new Set();
            var updates = pendingUpdates;
            pendingUpdates = [];
            updates.forEach(function(_ref) {
                var family = _ref[0], nextType = _ref[1];
                // Now that we got a real edit, we can create associations
                // that will be read by the React reconciler.
                var prevType = family.current;
                updatedFamiliesByType.set(prevType, family);
                updatedFamiliesByType.set(nextType, family);
                family.current = nextType; // Determine whether this should be a re-render or a re-mount.
                if (canPreserveStateBetween(prevType, nextType)) updatedFamilies.add(family);
                else staleFamilies.add(family);
            }); // TODO: rename these fields to something more meaningful.
            var update = {
                updatedFamilies: updatedFamilies,
                // Families that will re-render preserving state
                staleFamilies: staleFamilies // Families that will be remounted
            };
            helpersByRendererID.forEach(function(helpers) {
                // Even if there are no roots, set the handler on first update.
                // This ensures that if *new* roots are mounted, they'll use the resolve handler.
                helpers.setRefreshHandler(resolveFamily);
            });
            var didError = false;
            var firstError = null; // We snapshot maps and sets that are mutated during commits.
            // If we don't do this, there is a risk they will be mutated while
            // we iterate over them. For example, trying to recover a failed root
            // may cause another root to be added to the failed list -- an infinite loop.
            var failedRootsSnapshot = cloneSet(failedRoots);
            var mountedRootsSnapshot = cloneSet(mountedRoots);
            var helpersByRootSnapshot = cloneMap(helpersByRoot);
            failedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                failedRoots.has(root);
                if (rootElements === null) return;
                if (!rootElements.has(root)) return;
                var element = rootElements.get(root);
                try {
                    helpers.scheduleRoot(root, element);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            mountedRootsSnapshot.forEach(function(root) {
                var helpers = helpersByRootSnapshot.get(root);
                if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
                mountedRoots.has(root);
                try {
                    helpers.scheduleRefresh(root, update);
                } catch (err) {
                    if (!didError) {
                        didError = true;
                        firstError = err;
                    } // Keep trying other roots.
                }
            });
            if (didError) throw firstError;
            return update;
        } finally{
            isPerformingRefresh = false;
        }
    }
    function register(type, id) {
        if (type === null) return;
        if (typeof type !== 'function' && typeof type !== 'object') return;
         // This can happen in an edge case, e.g. if we register
        // return value of a HOC but it returns a cached component.
        // Ignore anything but the first registration for each type.
        if (allFamiliesByType.has(type)) return;
         // Create family or remember to update it.
        // None of this bookkeeping affects reconciliation
        // until the first performReactRefresh() call above.
        var family = allFamiliesByID.get(id);
        if (family === undefined) {
            family = {
                current: type
            };
            allFamiliesByID.set(id, family);
        } else pendingUpdates.push([
            family,
            type
        ]);
        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.
        if (typeof type === 'object' && type !== null) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                register(type.render, id + '$render');
                break;
            case REACT_MEMO_TYPE:
                register(type.type, id + '$type');
                break;
        }
    }
    function setSignature(type, key) {
        var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;
        allSignaturesByType.set(type, {
            forceReset: forceReset,
            ownKey: key,
            fullKey: null,
            getCustomHooks: getCustomHooks || function() {
                return [];
            }
        });
    } // This is lazily called during first render for a type.
    // It captures Hook list at that time so inline requires don't break comparisons.
    function collectCustomHooksForSignature(type) {
        var signature = allSignaturesByType.get(type);
        if (signature !== undefined) computeFullKey(signature);
    }
    function getFamilyByID(id) {
        return allFamiliesByID.get(id);
    }
    function getFamilyByType(type) {
        return allFamiliesByType.get(type);
    }
    function findAffectedHostInstances(families) {
        var affectedInstances = new Set();
        mountedRoots.forEach(function(root) {
            var helpers = helpersByRoot.get(root);
            if (helpers === undefined) throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');
            var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);
            instancesForRoot.forEach(function(inst) {
                affectedInstances.add(inst);
            });
        });
        return affectedInstances;
    }
    function injectIntoGlobalHook(globalObject) {
        // For React Native, the global hook will be set up by require('react-devtools-core').
        // That code will run before us. So we need to monkeypatch functions on existing hook.
        // For React Web, the global hook will be set up by the extension.
        // This will also run before us.
        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook === undefined) {
            // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.
            // Note that in this case it's important that renderer code runs *after* this method call.
            // Otherwise, the renderer will think that there is no global hook, and won't do the injection.
            var nextID = 0;
            globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {
                renderers: new Map(),
                supportsFiber: true,
                inject: function(injected) {
                    return nextID++;
                },
                onScheduleFiberRoot: function(id, root, children) {
                },
                onCommitFiberRoot: function(id, root, maybePriorityLevel, didError) {
                },
                onCommitFiberUnmount: function() {
                }
            };
        } // Here, we just want to get a reference to scheduleRefresh.
        var oldInject = hook.inject;
        hook.inject = function(injected) {
            var id = oldInject.apply(this, arguments);
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
            return id;
        }; // Do the same for any already injected roots.
        // This is useful if ReactDOM has already been initialized.
        // https://github.com/facebook/react/issues/17626
        hook.renderers.forEach(function(injected, id) {
            if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') // This version supports React Refresh.
            helpersByRendererID.set(id, injected);
        }); // We also want to track currently mounted roots.
        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;
        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function() {
        };
        hook.onScheduleFiberRoot = function(id, root, children) {
            if (!isPerformingRefresh) {
                // If it was intentionally scheduled, don't attempt to restore.
                // This includes intentionally scheduled unmounts.
                failedRoots.delete(root);
                if (rootElements !== null) rootElements.set(root, children);
            }
            return oldOnScheduleFiberRoot.apply(this, arguments);
        };
        hook.onCommitFiberRoot = function(id, root, maybePriorityLevel, didError) {
            var helpers = helpersByRendererID.get(id);
            if (helpers === undefined) return;
            helpersByRoot.set(root, helpers);
            var current = root.current;
            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.
            // This logic is copy-pasted from similar logic in the DevTools backend.
            // If this breaks with some refactoring, you'll want to update DevTools too.
            if (alternate !== null) {
                var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null;
                var isMounted = current.memoizedState != null && current.memoizedState.element != null;
                if (!wasMounted && isMounted) {
                    // Mount a new root.
                    mountedRoots.add(root);
                    failedRoots.delete(root);
                } else if (wasMounted && isMounted) ;
                else if (wasMounted && !isMounted) {
                    // Unmount an existing root.
                    mountedRoots.delete(root);
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                    else helpersByRoot.delete(root);
                } else if (!wasMounted && !isMounted) {
                    if (didError) // We'll remount it on future edits.
                    failedRoots.add(root);
                }
            } else // Mount a new root.
            mountedRoots.add(root);
            return oldOnCommitFiberRoot.apply(this, arguments);
        };
    }
    function hasUnrecoverableErrors() {
        // TODO: delete this after removing dependency in RN.
        return false;
    } // Exposed for testing.
    function _getMountedRootCount() {
        return mountedRoots.size;
    } // This is a wrapper over more primitive functions for setting signature.
    // Signatures let us decide whether the Hook order has changed on refresh.
    //
    // This function is intended to be used as a transform target, e.g.:
    // var _s = createSignatureFunctionForTransform()
    //
    // function Hello() {
    //   const [foo, setFoo] = useState(0);
    //   const value = useCustomHook();
    //   _s(); /* Second call triggers collecting the custom Hook list.
    //          * This doesn't happen during the module evaluation because we
    //          * don't want to change the module order with inline requires.
    //          * Next calls are noops. */
    //   return <h1>Hi</h1>;
    // }
    //
    // /* First call specifies the signature: */
    // _s(
    //   Hello,
    //   'useState{[foo, setFoo]}(0)',
    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */
    // );
    function createSignatureFunctionForTransform() {
        // We'll fill in the signature in two steps.
        // First, we'll know the signature itself. This happens outside the component.
        // Then, we'll know the references to custom Hooks. This happens inside the component.
        // After that, the returned function will be a fast path no-op.
        var status = 'needsSignature';
        var savedType;
        var hasCustomHooks;
        return function(type, key, forceReset, getCustomHooks) {
            switch(status){
                case 'needsSignature':
                    if (type !== undefined) {
                        // If we received an argument, this is the initial registration call.
                        savedType = type;
                        hasCustomHooks = typeof getCustomHooks === 'function';
                        setSignature(type, key, forceReset, getCustomHooks); // The next call we expect is from inside a function, to fill in the custom Hooks.
                        status = 'needsCustomHooks';
                    }
                    break;
                case 'needsCustomHooks':
                    if (hasCustomHooks) collectCustomHooksForSignature(savedType);
                    status = 'resolved';
                    break;
            }
            return type;
        };
    }
    function isLikelyComponentType(type) {
        switch(typeof type){
            case 'function':
                // First, deal with classes.
                if (type.prototype != null) {
                    if (type.prototype.isReactComponent) // React class.
                    return true;
                    var ownNames = Object.getOwnPropertyNames(type.prototype);
                    if (ownNames.length > 1 || ownNames[0] !== 'constructor') // This looks like a class.
                    return false;
                     // eslint-disable-next-line no-proto
                    if (type.prototype.__proto__ !== Object.prototype) // It has a superclass.
                    return false;
                     // Pass through.
                // This looks like a regular function with empty prototype.
                } // For plain functions and arrows, use name as a heuristic.
                var name = type.name || type.displayName;
                return typeof name === 'string' && /^[A-Z]/.test(name);
            case 'object':
                if (type != null) switch(type.$$typeof){
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_MEMO_TYPE:
                        // Definitely React components.
                        return true;
                    default:
                        return false;
                }
                return false;
            default:
                return false;
        }
    }
    exports._getMountedRootCount = _getMountedRootCount;
    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;
    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;
    exports.findAffectedHostInstances = findAffectedHostInstances;
    exports.getFamilyByID = getFamilyByID;
    exports.getFamilyByType = getFamilyByType;
    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;
    exports.injectIntoGlobalHook = injectIntoGlobalHook;
    exports.isLikelyComponentType = isLikelyComponentType;
    exports.performReactRefresh = performReactRefresh;
    exports.register = register;
    exports.setSignature = setSignature;
})();

},{}],"czkC5":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "69f74e7f31319ffd";
module.bundle.HMR_BUNDLE_ID = "c97b322fb4af9c3f";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F1() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                } // Render the fancy html overlay
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>\n          ").concat(stack, "\n        </pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>' + hint + '</div>';
            }).join(''), "\n        </div>\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"iqQLF":[function(require,module,exports) {
var $parcel$ReactRefreshHelpers$6892 = require("@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
$parcel$ReactRefreshHelpers$6892.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Main", ()=>Main
);
var _jsxRuntime = require("react/jsx-runtime");
var _react = require("react");
var _reactDom = require("react-dom");
var _reactHlsPlayer = require("react-hls-player");
var _reactHlsPlayerDefault = parcelHelpers.interopDefault(_reactHlsPlayer);
var _jss = require("jss");
var _jssDefault = parcelHelpers.interopDefault(_jss);
var _jssPresetDefault = require("jss-preset-default");
var _jssPresetDefaultDefault = parcelHelpers.interopDefault(_jssPresetDefault);
_jssDefault.default.setup(_jssPresetDefaultDefault.default());
const { classes  } = _jssDefault.default.createStyleSheet({
    preview: {
        width: "200px",
        height: "112.5px",
        cursor: "pointer",
        margin: 4
    },
    stream: {
        width: "100%",
        maxWidth: "1920px",
        margin: "auto",
        display: "block"
    },
    captures: {
        overflowX: "scroll",
        overflowY: "hidden",
        marginTop: "4px",
        whiteSpace: "nowrap",
        "& > div": {
            margin: "4px",
            display: "inline-block"
        },
        "& video": {
            width: "200px",
            height: "112.5px",
            display: "block"
        },
        "& label": {
            textAlign: "center",
            display: "block"
        }
    }
}).attach();
const cameras = [
    {
        name: "doorbell",
        feed: "/streams/cam1-.m3u8",
        captures: "camera1/"
    },
    {
        name: "garage",
        feed: "/streams/cam2-.m3u8",
        captures: "camera2/"
    },
    {
        name: "stairs",
        feed: "/streams/cam3-.m3u8",
        captures: "camera3/"
    }
];
class Main extends _react.Component {
    constructor(props){
        super(props);
        this.state = {
            currentCamera: 1,
            clips: []
        };
    }
    onClick(i) {
        this.setState({
            currentCamera: i
        }, ()=>{
        // this.retrieveClips();
        });
    }
    render() {
        const { currentCamera  } = this.state;
        const camera = cameras[currentCamera];
        return(/*#__PURE__*/ _jsxRuntime.jsxs(_react.Fragment, {
            __source: {
                fileName: "src/index.tsx",
                lineNumber: 88
            },
            __self: this,
            children: [
                /*#__PURE__*/ _jsxRuntime.jsx("div", {
                    __source: {
                        fileName: "src/index.tsx",
                        lineNumber: 89
                    },
                    __self: this,
                    children: cameras.map((c, i)=>/*#__PURE__*/ _jsxRuntime.jsx("img", {
                            title: c.name,
                            className: classes.preview,
                            onClick: ()=>this.onClick(i)
                            ,
                            src: c.feed,
                            __source: {
                                fileName: "src/index.tsx",
                                lineNumber: 91
                            },
                            __self: this
                        }, c.name)
                    )
                }),
                /*#__PURE__*/ _jsxRuntime.jsx(_reactHlsPlayerDefault.default, {
                    src: camera.feed,
                    autoPlay: true,
                    controls: true,
                    width: "100%",
                    height: "auto",
                    __source: {
                        fileName: "src/index.tsx",
                        lineNumber: 96
                    },
                    __self: this
                })
            ]
        }));
    }
}
_reactDom.render(/*#__PURE__*/ _jsxRuntime.jsx(Main, {
    __source: {
        fileName: "src/index.tsx",
        lineNumber: 107
    },
    __self: undefined
}), document.getElementById("app"));

  $parcel$ReactRefreshHelpers$6892.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
},{"jss":"aE4g0","jss-preset-default":"a64iV","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc","react-hls-player":"8VJxh","react":"6TuXu","@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js":"5V79J","react/jsx-runtime":"8xIwr","react-dom":"gkWJK"}],"aE4g0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasCSSTOMSupport", ()=>hasCSSTOMSupport
);
parcelHelpers.export(exports, "create", ()=>create
);
parcelHelpers.export(exports, "getDynamicStyles", ()=>getDynamicStyles
);
parcelHelpers.export(exports, "toCssValue", ()=>toCssValue
);
parcelHelpers.export(exports, "createRule", ()=>createRule
);
parcelHelpers.export(exports, "SheetsRegistry", ()=>SheetsRegistry
);
parcelHelpers.export(exports, "SheetsManager", ()=>SheetsManager
);
parcelHelpers.export(exports, "RuleList", ()=>RuleList
);
parcelHelpers.export(exports, "sheets", ()=>sheets
);
parcelHelpers.export(exports, "createGenerateId", ()=>createGenerateId
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _isInBrowser = require("is-in-browser");
var _isInBrowserDefault = parcelHelpers.interopDefault(_isInBrowser);
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
var _createClass = require("@babel/runtime/helpers/esm/createClass");
var _createClassDefault = parcelHelpers.interopDefault(_createClass);
var _inheritsLoose = require("@babel/runtime/helpers/esm/inheritsLoose");
var _inheritsLooseDefault = parcelHelpers.interopDefault(_inheritsLoose);
var _assertThisInitialized = require("@babel/runtime/helpers/esm/assertThisInitialized");
var _assertThisInitializedDefault = parcelHelpers.interopDefault(_assertThisInitialized);
var _objectWithoutPropertiesLoose = require("@babel/runtime/helpers/esm/objectWithoutPropertiesLoose");
var _objectWithoutPropertiesLooseDefault = parcelHelpers.interopDefault(_objectWithoutPropertiesLoose);
var plainObjectConstrurctor = {
}.constructor;
function cloneStyle(style) {
    if (style == null || typeof style !== 'object') return style;
    if (Array.isArray(style)) return style.map(cloneStyle);
    if (style.constructor !== plainObjectConstrurctor) return style;
    var newStyle = {
    };
    for(var name in style)newStyle[name] = cloneStyle(style[name]);
    return newStyle;
}
/**
 * Create a rule instance.
 */ function createRule(name, decl, options) {
    if (name === void 0) name = 'unnamed';
    var jss = options.jss;
    var declCopy = cloneStyle(decl);
    var rule = jss.plugins.onCreateRule(name, declCopy, options);
    if (rule) return rule; // It is an at-rule and it has no instance.
    if (name[0] === '@') _tinyWarningDefault.default(false, "[JSS] Unknown rule " + name);
    return null;
}
var join = function join1(value, by) {
    var result = '';
    for(var i = 0; i < value.length; i++){
        // Remove !important from the value, it will be readded later.
        if (value[i] === '!important') break;
        if (result) result += by;
        result += value[i];
    }
    return result;
};
/**
 * Converts array values to string.
 *
 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
 * `border: ['1px', '2px']` > `border: 1px, 2px;`
 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
 * `color: ['red', !important]` > `color: red !important;`
 */ function toCssValue(value, ignoreImportant) {
    if (ignoreImportant === void 0) ignoreImportant = false;
    if (!Array.isArray(value)) return value;
    var cssValue = ''; // Support space separated values via `[['5px', '10px']]`.
    if (Array.isArray(value[0])) for(var i = 0; i < value.length; i++){
        if (value[i] === '!important') break;
        if (cssValue) cssValue += ', ';
        cssValue += join(value[i], ' ');
    }
    else cssValue = join(value, ', '); // Add !important, because it was ignored.
    if (!ignoreImportant && value[value.length - 1] === '!important') cssValue += ' !important';
    return cssValue;
}
/**
 * Indent a string.
 * http://jsperf.com/array-join-vs-for
 */ function indentStr(str, indent) {
    var result = '';
    for(var index = 0; index < indent; index++)result += '  ';
    return result + str;
}
/**
 * Converts a Rule to CSS string.
 */ function toCss(selector, style, options) {
    if (options === void 0) options = {
    };
    var result = '';
    if (!style) return result;
    var _options = options, _options$indent = _options.indent, indent = _options$indent === void 0 ? 0 : _options$indent;
    var fallbacks = style.fallbacks;
    if (selector) indent++; // Apply fallbacks first.
    if (fallbacks) {
        // Array syntax {fallbacks: [{prop: value}]}
        if (Array.isArray(fallbacks)) for(var index = 0; index < fallbacks.length; index++){
            var fallback = fallbacks[index];
            for(var prop in fallback){
                var value = fallback[prop];
                if (value != null) {
                    if (result) result += '\n';
                    result += "" + indentStr(prop + ": " + toCssValue(value) + ";", indent);
                }
            }
        }
        else // Object syntax {fallbacks: {prop: value}}
        for(var _prop in fallbacks){
            var _value = fallbacks[_prop];
            if (_value != null) {
                if (result) result += '\n';
                result += "" + indentStr(_prop + ": " + toCssValue(_value) + ";", indent);
            }
        }
    }
    for(var _prop2 in style){
        var _value2 = style[_prop2];
        if (_value2 != null && _prop2 !== 'fallbacks') {
            if (result) result += '\n';
            result += "" + indentStr(_prop2 + ": " + toCssValue(_value2) + ";", indent);
        }
    } // Allow empty style in this case, because properties will be added dynamically.
    if (!result && !options.allowEmpty) return result; // When rule is being stringified before selector was defined.
    if (!selector) return result;
    indent--;
    if (result) result = "\n" + result + "\n";
    return indentStr(selector + " {" + result, indent) + indentStr('}', indent);
}
var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
var nativeEscape = typeof CSS !== 'undefined' && CSS.escape;
var escape = function(str) {
    return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, '\\$1');
};
var BaseStyleRule = /*#__PURE__*/ function() {
    function BaseStyleRule1(key, style, options) {
        this.type = 'style';
        this.key = void 0;
        this.isProcessed = false;
        this.style = void 0;
        this.renderer = void 0;
        this.renderable = void 0;
        this.options = void 0;
        var sheet = options.sheet, Renderer = options.Renderer;
        this.key = key;
        this.options = options;
        this.style = style;
        if (sheet) this.renderer = sheet.renderer;
        else if (Renderer) this.renderer = new Renderer();
    }
    /**
   * Get or set a style property.
   */ var _proto = BaseStyleRule1.prototype;
    _proto.prop = function prop(name, value, options) {
        // It's a getter.
        if (value === undefined) return this.style[name]; // Don't do anything if the value has not changed.
        var force = options ? options.force : false;
        if (!force && this.style[name] === value) return this;
        var newValue = value;
        if (!options || options.process !== false) newValue = this.options.jss.plugins.onChangeValue(value, name, this);
        var isEmpty = newValue == null || newValue === false;
        var isDefined = name in this.style; // Value is empty and wasn't defined before.
        if (isEmpty && !isDefined && !force) return this; // We are going to remove this value.
        var remove = isEmpty && isDefined;
        if (remove) delete this.style[name];
        else this.style[name] = newValue; // Renderable is defined if StyleSheet option `link` is true.
        if (this.renderable && this.renderer) {
            if (remove) this.renderer.removeProperty(this.renderable, name);
            else this.renderer.setProperty(this.renderable, name, newValue);
            return this;
        }
        var sheet = this.options.sheet;
        if (sheet && sheet.attached) _tinyWarningDefault.default(false, '[JSS] Rule is not linked. Missing sheet option "link: true".');
        return this;
    };
    return BaseStyleRule1;
}();
var StyleRule1 = /*#__PURE__*/ function(_BaseStyleRule) {
    _inheritsLooseDefault.default(StyleRule2, _BaseStyleRule);
    function StyleRule2(key, style, options) {
        var _this;
        _this = _BaseStyleRule.call(this, key, style, options) || this;
        _this.selectorText = void 0;
        _this.id = void 0;
        _this.renderable = void 0;
        var selector = options.selector, scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
        if (selector) _this.selectorText = selector;
        else if (scoped !== false) {
            _this.id = generateId(_assertThisInitializedDefault.default(_assertThisInitializedDefault.default(_this)), sheet);
            _this.selectorText = "." + escape(_this.id);
        }
        return _this;
    }
    /**
   * Set selector string.
   * Attention: use this with caution. Most browsers didn't implement
   * selectorText setter, so this may result in rerendering of entire Style Sheet.
   */ var _proto2 = StyleRule2.prototype;
    /**
   * Apply rule to an element inline.
   */ _proto2.applyTo = function applyTo(renderable) {
        var renderer = this.renderer;
        if (renderer) {
            var json = this.toJSON();
            for(var prop in json)renderer.setProperty(renderable, prop, json[prop]);
        }
        return this;
    };
    _proto2.toJSON = function toJSON() {
        var json = {
        };
        for(var prop in this.style){
            var value = this.style[prop];
            if (typeof value !== 'object') json[prop] = value;
            else if (Array.isArray(value)) json[prop] = toCssValue(value);
        }
        return json;
    };
    _proto2.toString = function toString(options) {
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var opts = link ? _extendsDefault.default({
        }, options, {
            allowEmpty: true
        }) : options;
        return toCss(this.selectorText, this.style, opts);
    };
    _createClassDefault.default(StyleRule2, [
        {
            key: "selector",
            set: function set(selector) {
                if (selector === this.selectorText) return;
                this.selectorText = selector;
                var renderer = this.renderer, renderable = this.renderable;
                if (!renderable || !renderer) return;
                var hasChanged = renderer.setSelector(renderable, selector); // If selector setter is not implemented, rerender the rule.
                if (!hasChanged) renderer.replaceRule(renderable, this);
            },
            get: function get() {
                return this.selectorText;
            }
        }
    ]);
    return StyleRule2;
}(BaseStyleRule);
var pluginStyleRule = {
    onCreateRule: function onCreateRule(name, style, options) {
        if (name[0] === '@' || options.parent && options.parent.type === 'keyframes') return null;
        return new StyleRule1(name, style, options);
    }
};
var defaultToStringOptions = {
    indent: 1,
    children: true
};
var atRegExp = /@([\w-]+)/;
/**
 * Conditional rule for @media, @supports
 */ var ConditionalRule = /*#__PURE__*/ function() {
    function ConditionalRule1(key, styles, options) {
        this.type = 'conditional';
        this.at = void 0;
        this.key = void 0;
        this.query = void 0;
        this.rules = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key; // Key might contain a unique suffix in case the `name` passed by user was duplicate.
        this.query = options.name;
        var atMatch = key.match(atRegExp);
        this.at = atMatch ? atMatch[1] : 'unknown';
        this.options = options;
        this.rules = new RuleList(_extendsDefault.default({
        }, options, {
            parent: this
        }));
        for(var name in styles)this.rules.add(name, styles[name]);
        this.rules.process();
    }
    /**
   * Get a rule.
   */ var _proto = ConditionalRule1.prototype;
    _proto.getRule = function getRule(name) {
        return this.rules.get(name);
    };
    _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
    };
    _proto.addRule = function addRule(name, style, options) {
        var rule = this.rules.add(name, style, options);
        if (!rule) return null;
        this.options.jss.plugins.onProcessRule(rule);
        return rule;
    };
    _proto.toString = function toString(options) {
        if (options === void 0) options = defaultToStringOptions;
        if (options.indent == null) options.indent = defaultToStringOptions.indent;
        if (options.children == null) options.children = defaultToStringOptions.children;
        if (options.children === false) return this.query + " {}";
        var children = this.rules.toString(options);
        return children ? this.query + " {\n" + children + "\n}" : '';
    };
    return ConditionalRule1;
}();
var keyRegExp = /@media|@supports\s+/;
var pluginConditionalRule = {
    onCreateRule: function onCreateRule(key, styles, options) {
        return keyRegExp.test(key) ? new ConditionalRule(key, styles, options) : null;
    }
};
var defaultToStringOptions$1 = {
    indent: 1,
    children: true
};
var nameRegExp = /@keyframes\s+([\w-]+)/;
/**
 * Rule for @keyframes
 */ var KeyframesRule = /*#__PURE__*/ function() {
    function KeyframesRule1(key, frames, options) {
        this.type = 'keyframes';
        this.at = '@keyframes';
        this.key = void 0;
        this.name = void 0;
        this.id = void 0;
        this.rules = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        var nameMatch = key.match(nameRegExp);
        if (nameMatch && nameMatch[1]) this.name = nameMatch[1];
        else {
            this.name = 'noname';
            _tinyWarningDefault.default(false, "[JSS] Bad keyframes name " + key);
        }
        this.key = this.type + "-" + this.name;
        this.options = options;
        var scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
        this.id = scoped === false ? this.name : escape(generateId(this, sheet));
        this.rules = new RuleList(_extendsDefault.default({
        }, options, {
            parent: this
        }));
        for(var name in frames)this.rules.add(name, frames[name], _extendsDefault.default({
        }, options, {
            parent: this
        }));
        this.rules.process();
    }
    /**
   * Generates a CSS string.
   */ var _proto = KeyframesRule1.prototype;
    _proto.toString = function toString(options) {
        if (options === void 0) options = defaultToStringOptions$1;
        if (options.indent == null) options.indent = defaultToStringOptions$1.indent;
        if (options.children == null) options.children = defaultToStringOptions$1.children;
        if (options.children === false) return this.at + " " + this.id + " {}";
        var children = this.rules.toString(options);
        if (children) children = "\n" + children + "\n";
        return this.at + " " + this.id + " {" + children + "}";
    };
    return KeyframesRule1;
}();
var keyRegExp$1 = /@keyframes\s+/;
var refRegExp = /\$([\w-]+)/g;
var findReferencedKeyframe = function findReferencedKeyframe1(val, keyframes) {
    if (typeof val === 'string') return val.replace(refRegExp, function(match, name) {
        if (name in keyframes) return keyframes[name];
        _tinyWarningDefault.default(false, "[JSS] Referenced keyframes rule \"" + name + "\" is not defined.");
        return match;
    });
    return val;
};
/**
 * Replace the reference for a animation name.
 */ var replaceRef = function replaceRef1(style, prop, keyframes) {
    var value = style[prop];
    var refKeyframe = findReferencedKeyframe(value, keyframes);
    if (refKeyframe !== value) style[prop] = refKeyframe;
};
var plugin = {
    onCreateRule: function onCreateRule(key, frames, options) {
        return typeof key === 'string' && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;
    },
    // Animation name ref replacer.
    onProcessStyle: function onProcessStyle(style, rule, sheet) {
        if (rule.type !== 'style' || !sheet) return style;
        if ('animation-name' in style) replaceRef(style, 'animation-name', sheet.keyframes);
        if ('animation' in style) replaceRef(style, 'animation', sheet.keyframes);
        return style;
    },
    onChangeValue: function onChangeValue(val, prop, rule) {
        var sheet = rule.options.sheet;
        if (!sheet) return val;
        switch(prop){
            case 'animation':
                return findReferencedKeyframe(val, sheet.keyframes);
            case 'animation-name':
                return findReferencedKeyframe(val, sheet.keyframes);
            default:
                return val;
        }
    }
};
var KeyframeRule1 = /*#__PURE__*/ function(_BaseStyleRule) {
    _inheritsLooseDefault.default(KeyframeRule2, _BaseStyleRule);
    function KeyframeRule2() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _BaseStyleRule.call.apply(_BaseStyleRule, [
            this
        ].concat(args)) || this;
        _this.renderable = void 0;
        return _this;
    }
    var _proto = KeyframeRule2.prototype;
    /**
   * Generates a CSS string.
   */ _proto.toString = function toString(options) {
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        var opts = link ? _extendsDefault.default({
        }, options, {
            allowEmpty: true
        }) : options;
        return toCss(this.key, this.style, opts);
    };
    return KeyframeRule2;
}(BaseStyleRule);
var pluginKeyframeRule = {
    onCreateRule: function onCreateRule(key, style, options) {
        if (options.parent && options.parent.type === 'keyframes') return new KeyframeRule1(key, style, options);
        return null;
    }
};
var FontFaceRule = /*#__PURE__*/ function() {
    function FontFaceRule1(key, style, options) {
        this.type = 'font-face';
        this.at = '@font-face';
        this.key = void 0;
        this.style = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        this.style = style;
        this.options = options;
    }
    /**
   * Generates a CSS string.
   */ var _proto = FontFaceRule1.prototype;
    _proto.toString = function toString(options) {
        if (Array.isArray(this.style)) {
            var str = '';
            for(var index = 0; index < this.style.length; index++){
                str += toCss(this.at, this.style[index]);
                if (this.style[index + 1]) str += '\n';
            }
            return str;
        }
        return toCss(this.at, this.style, options);
    };
    return FontFaceRule1;
}();
var keyRegExp$2 = /@font-face/;
var pluginFontFaceRule = {
    onCreateRule: function onCreateRule(key, style, options) {
        return keyRegExp$2.test(key) ? new FontFaceRule(key, style, options) : null;
    }
};
var ViewportRule = /*#__PURE__*/ function() {
    function ViewportRule1(key, style, options) {
        this.type = 'viewport';
        this.at = '@viewport';
        this.key = void 0;
        this.style = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        this.style = style;
        this.options = options;
    }
    /**
   * Generates a CSS string.
   */ var _proto = ViewportRule1.prototype;
    _proto.toString = function toString(options) {
        return toCss(this.key, this.style, options);
    };
    return ViewportRule1;
}();
var pluginViewportRule = {
    onCreateRule: function onCreateRule(key, style, options) {
        return key === '@viewport' || key === '@-ms-viewport' ? new ViewportRule(key, style, options) : null;
    }
};
var SimpleRule = /*#__PURE__*/ function() {
    function SimpleRule1(key, value, options) {
        this.type = 'simple';
        this.key = void 0;
        this.value = void 0;
        this.options = void 0;
        this.isProcessed = false;
        this.renderable = void 0;
        this.key = key;
        this.value = value;
        this.options = options;
    }
    /**
   * Generates a CSS string.
   */ // eslint-disable-next-line no-unused-vars
    var _proto = SimpleRule1.prototype;
    _proto.toString = function toString(options) {
        if (Array.isArray(this.value)) {
            var str = '';
            for(var index = 0; index < this.value.length; index++){
                str += this.key + " " + this.value[index] + ";";
                if (this.value[index + 1]) str += '\n';
            }
            return str;
        }
        return this.key + " " + this.value + ";";
    };
    return SimpleRule1;
}();
var keysMap = {
    '@charset': true,
    '@import': true,
    '@namespace': true
};
var pluginSimpleRule = {
    onCreateRule: function onCreateRule(key, value, options) {
        return key in keysMap ? new SimpleRule(key, value, options) : null;
    }
};
var plugins = [
    pluginStyleRule,
    pluginConditionalRule,
    plugin,
    pluginKeyframeRule,
    pluginFontFaceRule,
    pluginViewportRule,
    pluginSimpleRule
];
var defaultUpdateOptions = {
    process: true
};
var forceUpdateOptions = {
    force: true,
    process: true
};
var RuleList = /*#__PURE__*/ function() {
    // Rules registry for access by .get() method.
    // It contains the same rule registered by name and by selector.
    // Original styles object.
    // Used to ensure correct rules order.
    function RuleList1(options) {
        this.map = {
        };
        this.raw = {
        };
        this.index = [];
        this.counter = 0;
        this.options = void 0;
        this.classes = void 0;
        this.keyframes = void 0;
        this.options = options;
        this.classes = options.classes;
        this.keyframes = options.keyframes;
    }
    /**
   * Create and register rule.
   *
   * Will not render after Style Sheet was rendered the first time.
   */ var _proto = RuleList1.prototype;
    _proto.add = function add(name, decl, ruleOptions) {
        var _this$options = this.options, parent = _this$options.parent, sheet = _this$options.sheet, jss = _this$options.jss, Renderer = _this$options.Renderer, generateId = _this$options.generateId, scoped = _this$options.scoped;
        var options = _extendsDefault.default({
            classes: this.classes,
            parent: parent,
            sheet: sheet,
            jss: jss,
            Renderer: Renderer,
            generateId: generateId,
            scoped: scoped,
            name: name
        }, ruleOptions); // When user uses .createStyleSheet(), duplicate names are not possible, but
        // `sheet.addRule()` opens the door for any duplicate rule name. When this happens
        // we need to make the key unique within this RuleList instance scope.
        var key = name;
        if (name in this.raw) key = name + "-d" + this.counter++;
         // We need to save the original decl before creating the rule
        // because cache plugin needs to use it as a key to return a cached rule.
        this.raw[key] = decl;
        if (key in this.classes) // E.g. rules inside of @media container
        options.selector = "." + escape(this.classes[key]);
        var rule = createRule(key, decl, options);
        if (!rule) return null;
        this.register(rule);
        var index = options.index === undefined ? this.index.length : options.index;
        this.index.splice(index, 0, rule);
        return rule;
    };
    _proto.get = function get(name) {
        return this.map[name];
    };
    _proto.remove = function remove(rule) {
        this.unregister(rule);
        delete this.raw[rule.key];
        this.index.splice(this.index.indexOf(rule), 1);
    };
    _proto.indexOf = function indexOf(rule) {
        return this.index.indexOf(rule);
    };
    _proto.process = function process() {
        var plugins$$1 = this.options.jss.plugins; // We need to clone array because if we modify the index somewhere else during a loop
        // we end up with very hard-to-track-down side effects.
        this.index.slice(0).forEach(plugins$$1.onProcessRule, plugins$$1);
    };
    _proto.register = function register(rule) {
        this.map[rule.key] = rule;
        if (rule instanceof StyleRule1) {
            this.map[rule.selector] = rule;
            if (rule.id) this.classes[rule.key] = rule.id;
        } else if (rule instanceof KeyframesRule && this.keyframes) this.keyframes[rule.name] = rule.id;
    };
    _proto.unregister = function unregister(rule) {
        delete this.map[rule.key];
        if (rule instanceof StyleRule1) {
            delete this.map[rule.selector];
            delete this.classes[rule.key];
        } else if (rule instanceof KeyframesRule) delete this.keyframes[rule.name];
    };
    _proto.update = function update() {
        var name;
        var data;
        var options;
        if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {
            name = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe
            data = arguments.length <= 1 ? undefined : arguments[1]; // $FlowFixMe
            options = arguments.length <= 2 ? undefined : arguments[2];
        } else {
            data = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe
            options = arguments.length <= 1 ? undefined : arguments[1];
            name = null;
        }
        if (name) this.updateOne(this.map[name], data, options);
        else for(var index = 0; index < this.index.length; index++)this.updateOne(this.index[index], data, options);
    };
    _proto.updateOne = function updateOne(rule, data, options) {
        if (options === void 0) options = defaultUpdateOptions;
        var _this$options2 = this.options, plugins$$1 = _this$options2.jss.plugins, sheet = _this$options2.sheet; // It is a rules container like for e.g. ConditionalRule.
        if (rule.rules instanceof RuleList1) {
            rule.rules.update(data, options);
            return;
        }
        var styleRule = rule;
        var style = styleRule.style;
        plugins$$1.onUpdate(data, rule, sheet, options); // We rely on a new `style` ref in case it was mutated during onUpdate hook.
        if (options.process && style && style !== styleRule.style) {
            // We need to run the plugins in case new `style` relies on syntax plugins.
            plugins$$1.onProcessStyle(styleRule.style, styleRule, sheet); // Update and add props.
            for(var prop in styleRule.style){
                var nextValue = styleRule.style[prop];
                var prevValue = style[prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
                // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.
                if (nextValue !== prevValue) styleRule.prop(prop, nextValue, forceUpdateOptions);
            } // Remove props.
            for(var _prop in style){
                var _nextValue = styleRule.style[_prop];
                var _prevValue = style[_prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
                // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.
                if (_nextValue == null && _nextValue !== _prevValue) styleRule.prop(_prop, null, forceUpdateOptions);
            }
        }
    };
    _proto.toString = function toString(options) {
        var str = '';
        var sheet = this.options.sheet;
        var link = sheet ? sheet.options.link : false;
        for(var index = 0; index < this.index.length; index++){
            var rule = this.index[index];
            var css = rule.toString(options); // No need to render an empty rule.
            if (!css && !link) continue;
            if (str) str += '\n';
            str += css;
        }
        return str;
    };
    return RuleList1;
}();
var StyleSheet1 = /*#__PURE__*/ function() {
    function StyleSheet2(styles, options) {
        this.options = void 0;
        this.deployed = void 0;
        this.attached = void 0;
        this.rules = void 0;
        this.renderer = void 0;
        this.classes = void 0;
        this.keyframes = void 0;
        this.queue = void 0;
        this.attached = false;
        this.deployed = false;
        this.classes = {
        };
        this.keyframes = {
        };
        this.options = _extendsDefault.default({
        }, options, {
            sheet: this,
            parent: this,
            classes: this.classes,
            keyframes: this.keyframes
        });
        if (options.Renderer) this.renderer = new options.Renderer(this);
        this.rules = new RuleList(this.options);
        for(var name in styles)this.rules.add(name, styles[name]);
        this.rules.process();
    }
    /**
   * Attach renderable to the render tree.
   */ var _proto = StyleSheet2.prototype;
    _proto.attach = function attach() {
        if (this.attached) return this;
        if (this.renderer) this.renderer.attach();
        this.attached = true; // Order is important, because we can't use insertRule API if style element is not attached.
        if (!this.deployed) this.deploy();
        return this;
    };
    _proto.detach = function detach() {
        if (!this.attached) return this;
        if (this.renderer) this.renderer.detach();
        this.attached = false;
        return this;
    };
    _proto.addRule = function addRule(name, decl, options) {
        var queue = this.queue; // Plugins can create rules.
        // In order to preserve the right order, we need to queue all `.addRule` calls,
        // which happen after the first `rules.add()` call.
        if (this.attached && !queue) this.queue = [];
        var rule = this.rules.add(name, decl, options);
        if (!rule) return null;
        this.options.jss.plugins.onProcessRule(rule);
        if (this.attached) {
            if (!this.deployed) return rule; // Don't insert rule directly if there is no stringified version yet.
            // It will be inserted all together when .attach is called.
            if (queue) queue.push(rule);
            else {
                this.insertRule(rule);
                if (this.queue) {
                    this.queue.forEach(this.insertRule, this);
                    this.queue = undefined;
                }
            }
            return rule;
        } // We can't add rules to a detached style node.
        // We will redeploy the sheet once user will attach it.
        this.deployed = false;
        return rule;
    };
    _proto.insertRule = function insertRule(rule) {
        if (this.renderer) this.renderer.insertRule(rule);
    };
    _proto.addRules = function addRules(styles, options) {
        var added = [];
        for(var name in styles){
            var rule = this.addRule(name, styles[name], options);
            if (rule) added.push(rule);
        }
        return added;
    };
    _proto.getRule = function getRule(name) {
        return this.rules.get(name);
    };
    _proto.deleteRule = function deleteRule(name) {
        var rule = typeof name === 'object' ? name : this.rules.get(name);
        if (!rule) return false;
        this.rules.remove(rule);
        if (this.attached && rule.renderable && this.renderer) return this.renderer.deleteRule(rule.renderable);
        return true;
    };
    _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
    };
    _proto.deploy = function deploy() {
        if (this.renderer) this.renderer.deploy();
        this.deployed = true;
        return this;
    };
    _proto.update = function update() {
        var _this$rules;
        (_this$rules = this.rules).update.apply(_this$rules, arguments);
        return this;
    };
    _proto.updateOne = function updateOne(rule, data, options) {
        this.rules.updateOne(rule, data, options);
        return this;
    };
    _proto.toString = function toString(options) {
        return this.rules.toString(options);
    };
    return StyleSheet2;
}();
var PluginsRegistry = /*#__PURE__*/ function() {
    function PluginsRegistry1() {
        this.plugins = {
            internal: [],
            external: []
        };
        this.registry = void 0;
    }
    var _proto = PluginsRegistry1.prototype;
    /**
   * Call `onCreateRule` hooks and return an object if returned by a hook.
   */ _proto.onCreateRule = function onCreateRule(name, decl, options) {
        for(var i = 0; i < this.registry.onCreateRule.length; i++){
            var rule = this.registry.onCreateRule[i](name, decl, options);
            if (rule) return rule;
        }
        return null;
    };
    _proto.onProcessRule = function onProcessRule(rule) {
        if (rule.isProcessed) return;
        var sheet = rule.options.sheet;
        for(var i = 0; i < this.registry.onProcessRule.length; i++)this.registry.onProcessRule[i](rule, sheet);
        if (rule.style) this.onProcessStyle(rule.style, rule, sheet);
        rule.isProcessed = true;
    };
    _proto.onProcessStyle = function onProcessStyle(style, rule, sheet) {
        for(var i = 0; i < this.registry.onProcessStyle.length; i++)// $FlowFixMe
        rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
    };
    _proto.onProcessSheet = function onProcessSheet(sheet) {
        for(var i = 0; i < this.registry.onProcessSheet.length; i++)this.registry.onProcessSheet[i](sheet);
    };
    _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
        for(var i = 0; i < this.registry.onUpdate.length; i++)this.registry.onUpdate[i](data, rule, sheet, options);
    };
    _proto.onChangeValue = function onChangeValue(value, prop, rule) {
        var processedValue = value;
        for(var i = 0; i < this.registry.onChangeValue.length; i++)processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
        return processedValue;
    };
    _proto.use = function use(newPlugin, options) {
        if (options === void 0) options = {
            queue: 'external'
        };
        var plugins1 = this.plugins[options.queue]; // Avoids applying same plugin twice, at least based on ref.
        if (plugins1.indexOf(newPlugin) !== -1) return;
        plugins1.push(newPlugin);
        this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function(registry, plugin1) {
            for(var name in plugin1)if (name in registry) registry[name].push(plugin1[name]);
            else _tinyWarningDefault.default(false, "[JSS] Unknown hook \"" + name + "\".");
            return registry;
        }, {
            onCreateRule: [],
            onProcessRule: [],
            onProcessStyle: [],
            onProcessSheet: [],
            onChangeValue: [],
            onUpdate: []
        });
    };
    return PluginsRegistry1;
}();
/**
 * Sheets registry to access them all at one place.
 */ var SheetsRegistry = /*#__PURE__*/ function() {
    function SheetsRegistry1() {
        this.registry = [];
    }
    var _proto = SheetsRegistry1.prototype;
    /**
   * Register a Style Sheet.
   */ _proto.add = function add(sheet) {
        var registry = this.registry;
        var index = sheet.options.index;
        if (registry.indexOf(sheet) !== -1) return;
        if (registry.length === 0 || index >= this.index) {
            registry.push(sheet);
            return;
        } // Find a position.
        for(var i = 0; i < registry.length; i++)if (registry[i].options.index > index) {
            registry.splice(i, 0, sheet);
            return;
        }
    };
    _proto.reset = function reset() {
        this.registry = [];
    };
    _proto.remove = function remove(sheet) {
        var index = this.registry.indexOf(sheet);
        this.registry.splice(index, 1);
    };
    _proto.toString = function toString(_temp) {
        var _ref = _temp === void 0 ? {
        } : _temp, attached = _ref.attached, options = _objectWithoutPropertiesLooseDefault.default(_ref, [
            "attached"
        ]);
        var css = '';
        for(var i = 0; i < this.registry.length; i++){
            var sheet = this.registry[i];
            if (attached != null && sheet.attached !== attached) continue;
            if (css) css += '\n';
            css += sheet.toString(options);
        }
        return css;
    };
    _createClassDefault.default(SheetsRegistry1, [
        {
            key: "index",
            /**
     * Current highest index number.
     */ get: function get() {
                return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
            }
        }
    ]);
    return SheetsRegistry1;
}();
/**
 * This is a global sheets registry. Only DomRenderer will add sheets to it.
 * On the server one should use an own SheetsRegistry instance and add the
 * sheets to it, because you need to make sure to create a new registry for
 * each request in order to not leak sheets across requests.
 */ var sheets = new SheetsRegistry();
/* eslint-disable */ // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var globalThis = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
var ns = '2f1acc6c3a606b082e5eef5e54414ffb';
if (globalThis[ns] == null) globalThis[ns] = 0; // Bundle may contain multiple JSS versions at the same time. In order to identify
// the current version with just one short number and use it for classes generation
// we use a counter. Also it is more accurate, because user can manually reevaluate
// the module.
var moduleId = globalThis[ns]++;
var maxRules = 10000000000;
/**
 * Returns a function which generates unique class names based on counters.
 * When new generator function is created, rule counter is reseted.
 * We need to reset the rule counter for SSR for each request.
 */ var createGenerateId = function createGenerateId1(options) {
    if (options === void 0) options = {
    };
    var ruleCounter = 0;
    return function(rule, sheet) {
        ruleCounter += 1;
        if (ruleCounter > maxRules) _tinyWarningDefault.default(false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".");
        var jssId = '';
        var prefix = '';
        if (sheet) {
            if (sheet.options.classNamePrefix) prefix = sheet.options.classNamePrefix;
            if (sheet.options.jss.id != null) jssId = String(sheet.options.jss.id);
        }
        if (options.minify) // Using "c" because a number can't be the first char in a class name.
        return "" + (prefix || 'c') + moduleId + jssId + ruleCounter;
        return prefix + rule.key + "-" + moduleId + (jssId ? "-" + jssId : '') + "-" + ruleCounter;
    };
};
/**
 * Cache the value from the first time a function is called.
 */ var memoize = function memoize1(fn) {
    var value;
    return function() {
        if (!value) value = fn();
        return value;
    };
};
/**
 * Get a style property value.
 */ function getPropertyValue(cssRule, prop) {
    try {
        // Support CSSTOM.
        if (cssRule.attributeStyleMap) return cssRule.attributeStyleMap.get(prop);
        return cssRule.style.getPropertyValue(prop);
    } catch (err) {
        // IE may throw if property is unknown.
        return '';
    }
}
/**
 * Set a style property.
 */ function setProperty(cssRule, prop, value) {
    try {
        var cssValue = value;
        if (Array.isArray(value)) {
            cssValue = toCssValue(value, true);
            if (value[value.length - 1] === '!important') {
                cssRule.style.setProperty(prop, cssValue, 'important');
                return true;
            }
        } // Support CSSTOM.
        if (cssRule.attributeStyleMap) cssRule.attributeStyleMap.set(prop, cssValue);
        else cssRule.style.setProperty(prop, cssValue);
    } catch (err) {
        // IE may throw if property is unknown.
        return false;
    }
    return true;
}
/**
 * Remove a style property.
 */ function removeProperty(cssRule, prop) {
    try {
        // Support CSSTOM.
        if (cssRule.attributeStyleMap) cssRule.attributeStyleMap.delete(prop);
        else cssRule.style.removeProperty(prop);
    } catch (err) {
        _tinyWarningDefault.default(false, "[JSS] DOMException \"" + err.message + "\" was thrown. Tried to remove property \"" + prop + "\".");
    }
}
/**
 * Set the selector.
 */ function setSelector(cssRule, selectorText) {
    cssRule.selectorText = selectorText; // Return false if setter was not successful.
    // Currently works in chrome only.
    return cssRule.selectorText === selectorText;
}
/**
 * Gets the `head` element upon the first call and caches it.
 * We assume it can't be null.
 */ var getHead = memoize(function() {
    return document.querySelector('head');
});
/**
 * Find attached sheet with an index higher than the passed one.
 */ function findHigherSheet(registry, options) {
    for(var i = 0; i < registry.length; i++){
        var sheet = registry[i];
        if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) return sheet;
    }
    return null;
}
/**
 * Find attached sheet with the highest index.
 */ function findHighestSheet(registry, options) {
    for(var i = registry.length - 1; i >= 0; i--){
        var sheet = registry[i];
        if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) return sheet;
    }
    return null;
}
/**
 * Find a comment with "jss" inside.
 */ function findCommentNode(text) {
    var head = getHead();
    for(var i = 0; i < head.childNodes.length; i++){
        var node = head.childNodes[i];
        if (node.nodeType === 8 && node.nodeValue.trim() === text) return node;
    }
    return null;
}
/**
 * Find a node before which we can insert the sheet.
 */ function findPrevNode(options) {
    var registry = sheets.registry;
    if (registry.length > 0) {
        // Try to insert before the next higher sheet.
        var sheet = findHigherSheet(registry, options);
        if (sheet && sheet.renderer) return {
            parent: sheet.renderer.element.parentNode,
            node: sheet.renderer.element
        };
         // Otherwise insert after the last attached.
        sheet = findHighestSheet(registry, options);
        if (sheet && sheet.renderer) return {
            parent: sheet.renderer.element.parentNode,
            node: sheet.renderer.element.nextSibling
        };
    } // Try to find a comment placeholder if registry is empty.
    var insertionPoint = options.insertionPoint;
    if (insertionPoint && typeof insertionPoint === 'string') {
        var comment = findCommentNode(insertionPoint);
        if (comment) return {
            parent: comment.parentNode,
            node: comment.nextSibling
        };
         // If user specifies an insertion point and it can't be found in the document -
        _tinyWarningDefault.default(false, "[JSS] Insertion point \"" + insertionPoint + "\" not found.");
    }
    return false;
}
/**
 * Insert style element into the DOM.
 */ function insertStyle(style, options) {
    var insertionPoint = options.insertionPoint;
    var nextNode = findPrevNode(options);
    if (nextNode !== false && nextNode.parent) {
        nextNode.parent.insertBefore(style, nextNode.node);
        return;
    } // Works with iframes and any node types.
    if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
        // https://stackoverflow.com/questions/41328728/force-casting-in-flow
        var insertionPointElement = insertionPoint;
        var parentNode = insertionPointElement.parentNode;
        if (parentNode) parentNode.insertBefore(style, insertionPointElement.nextSibling);
        else _tinyWarningDefault.default(false, '[JSS] Insertion point is not in the DOM.');
        return;
    }
    getHead().appendChild(style);
}
/**
 * Read jss nonce setting from the page if the user has set it.
 */ var getNonce = memoize(function() {
    var node = document.querySelector('meta[property="csp-nonce"]');
    return node ? node.getAttribute('content') : null;
});
var _insertRule = function insertRule(container, rule, index) {
    var maxIndex = container.cssRules.length; // In case previous insertion fails, passed index might be wrong
    if (index === undefined || index > maxIndex) // eslint-disable-next-line no-param-reassign
    index = maxIndex;
    try {
        if ('insertRule' in container) {
            var c = container;
            c.insertRule(rule, index);
        } else if ('appendRule' in container) {
            var _c = container;
            _c.appendRule(rule);
        }
    } catch (err) {
        _tinyWarningDefault.default(false, "[JSS] " + err.message);
        return false;
    }
    return container.cssRules[index];
};
var createStyle = function createStyle1() {
    var el = document.createElement('style'); // Without it, IE will have a broken source order specificity if we
    // insert rules after we insert the style tag.
    // It seems to kick-off the source order specificity algorithm.
    el.textContent = '\n';
    return el;
};
var DomRenderer = /*#__PURE__*/ function() {
    // HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696
    function DomRenderer1(sheet) {
        this.getPropertyValue = getPropertyValue;
        this.setProperty = setProperty;
        this.removeProperty = removeProperty;
        this.setSelector = setSelector;
        this.element = void 0;
        this.sheet = void 0;
        this.hasInsertedRules = false;
        // There is no sheet when the renderer is used from a standalone StyleRule.
        if (sheet) sheets.add(sheet);
        this.sheet = sheet;
        var _ref = this.sheet ? this.sheet.options : {
        }, media = _ref.media, meta = _ref.meta, element = _ref.element;
        this.element = element || createStyle();
        this.element.setAttribute('data-jss', '');
        if (media) this.element.setAttribute('media', media);
        if (meta) this.element.setAttribute('data-meta', meta);
        var nonce = getNonce();
        if (nonce) this.element.setAttribute('nonce', nonce);
    }
    /**
   * Insert style element into render tree.
   */ var _proto = DomRenderer1.prototype;
    _proto.attach = function attach() {
        // In the case the element node is external and it is already in the DOM.
        if (this.element.parentNode || !this.sheet) return;
        insertStyle(this.element, this.sheet.options); // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
        // most browsers create a new CSSStyleSheet, except of all IEs.
        var deployed = Boolean(this.sheet && this.sheet.deployed);
        if (this.hasInsertedRules && deployed) {
            this.hasInsertedRules = false;
            this.deploy();
        }
    };
    _proto.detach = function detach() {
        var parentNode = this.element.parentNode;
        if (parentNode) parentNode.removeChild(this.element);
    };
    _proto.deploy = function deploy() {
        var sheet = this.sheet;
        if (!sheet) return;
        if (sheet.options.link) {
            this.insertRules(sheet.rules);
            return;
        }
        this.element.textContent = "\n" + sheet.toString() + "\n";
    };
    _proto.insertRules = function insertRules(rules, nativeParent) {
        for(var i = 0; i < rules.index.length; i++)this.insertRule(rules.index[i], i, nativeParent);
    };
    _proto.insertRule = function insertRule1(rule, index, nativeParent) {
        if (nativeParent === void 0) nativeParent = this.element.sheet;
        if (rule.rules) {
            var parent = rule;
            var latestNativeParent = nativeParent;
            if (rule.type === 'conditional' || rule.type === 'keyframes') {
                // We need to render the container without children first.
                latestNativeParent = _insertRule(nativeParent, parent.toString({
                    children: false
                }), index);
                if (latestNativeParent === false) return false;
            }
            this.insertRules(parent.rules, latestNativeParent);
            return latestNativeParent;
        } // IE keeps the CSSStyleSheet after style node has been reattached,
        // so we need to check if the `renderable` reference the right style sheet and not
        // rerender those rules.
        if (rule.renderable && rule.renderable.parentStyleSheet === this.element.sheet) return rule.renderable;
        var ruleStr = rule.toString();
        if (!ruleStr) return false;
        var nativeRule = _insertRule(nativeParent, ruleStr, index);
        if (nativeRule === false) return false;
        this.hasInsertedRules = true;
        rule.renderable = nativeRule;
        return nativeRule;
    };
    _proto.deleteRule = function deleteRule(cssRule) {
        var sheet = this.element.sheet;
        var index = this.indexOf(cssRule);
        if (index === -1) return false;
        sheet.deleteRule(index);
        return true;
    };
    _proto.indexOf = function indexOf(cssRule) {
        var cssRules = this.element.sheet.cssRules;
        for(var index = 0; index < cssRules.length; index++){
            if (cssRule === cssRules[index]) return index;
        }
        return -1;
    };
    _proto.replaceRule = function replaceRule(cssRule, rule) {
        var index = this.indexOf(cssRule);
        if (index === -1) return false;
        this.element.sheet.deleteRule(index);
        return this.insertRule(rule, index);
    };
    _proto.getRules = function getRules() {
        return this.element.sheet.cssRules;
    };
    return DomRenderer1;
}();
var instanceCounter = 0;
var Jss = /*#__PURE__*/ function() {
    function Jss1(options) {
        this.id = instanceCounter++;
        this.version = "10.1.1";
        this.plugins = new PluginsRegistry();
        this.options = {
            id: {
                minify: false
            },
            createGenerateId: createGenerateId,
            Renderer: _isInBrowserDefault.default ? DomRenderer : null,
            plugins: []
        };
        this.generateId = createGenerateId({
            minify: false
        });
        for(var i = 0; i < plugins.length; i++)this.plugins.use(plugins[i], {
            queue: 'internal'
        });
        this.setup(options);
    }
    /**
   * Prepares various options, applies plugins.
   * Should not be used twice on the same instance, because there is no plugins
   * deduplication logic.
   */ var _proto = Jss1.prototype;
    _proto.setup = function setup(options) {
        if (options === void 0) options = {
        };
        if (options.createGenerateId) this.options.createGenerateId = options.createGenerateId;
        if (options.id) this.options.id = _extendsDefault.default({
        }, this.options.id, options.id);
        if (options.createGenerateId || options.id) this.generateId = this.options.createGenerateId(this.options.id);
        if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;
        if ('Renderer' in options) this.options.Renderer = options.Renderer;
         // eslint-disable-next-line prefer-spread
        if (options.plugins) this.use.apply(this, options.plugins);
        return this;
    };
    _proto.createStyleSheet = function createStyleSheet(styles, options) {
        if (options === void 0) options = {
        };
        var _options = options, index = _options.index;
        if (typeof index !== 'number') index = sheets.index === 0 ? 0 : sheets.index + 1;
        var sheet = new StyleSheet1(styles, _extendsDefault.default({
        }, options, {
            jss: this,
            generateId: options.generateId || this.generateId,
            insertionPoint: this.options.insertionPoint,
            Renderer: this.options.Renderer,
            index: index
        }));
        this.plugins.onProcessSheet(sheet);
        return sheet;
    };
    _proto.removeStyleSheet = function removeStyleSheet(sheet) {
        sheet.detach();
        sheets.remove(sheet);
        return this;
    };
    _proto.createRule = function createRule$$1(name, style, options) {
        if (style === void 0) style = {
        };
        if (options === void 0) options = {
        };
        // Enable rule without name for inline styles.
        if (typeof name === 'object') return this.createRule(undefined, name, style);
        var ruleOptions = _extendsDefault.default({
        }, options, {
            name: name,
            jss: this,
            Renderer: this.options.Renderer
        });
        if (!ruleOptions.generateId) ruleOptions.generateId = this.generateId;
        if (!ruleOptions.classes) ruleOptions.classes = {
        };
        if (!ruleOptions.keyframes) ruleOptions.keyframes = {
        };
        var rule = createRule(name, style, ruleOptions);
        if (rule) this.plugins.onProcessRule(rule);
        return rule;
    };
    _proto.use = function use() {
        var _this = this;
        for(var _len = arguments.length, plugins$$1 = new Array(_len), _key = 0; _key < _len; _key++)plugins$$1[_key] = arguments[_key];
        plugins$$1.forEach(function(plugin1) {
            _this.plugins.use(plugin1);
        });
        return this;
    };
    return Jss1;
}();
/**
 * Extracts a styles object with only props that contain function values.
 */ function getDynamicStyles(styles) {
    var to = null;
    for(var key in styles){
        var value = styles[key];
        var type = typeof value;
        if (type === 'function') {
            if (!to) to = {
            };
            to[key] = value;
        } else if (type === 'object' && value !== null && !Array.isArray(value)) {
            var extracted = getDynamicStyles(value);
            if (extracted) {
                if (!to) to = {
                };
                to[key] = extracted;
            }
        }
    }
    return to;
}
/**
 * SheetsManager is like a WeakMap which is designed to count StyleSheet
 * instances and attach/detach automatically.
 */ var SheetsManager = /*#__PURE__*/ function() {
    function SheetsManager1() {
        this.length = 0;
        this.sheets = new WeakMap();
    }
    var _proto = SheetsManager1.prototype;
    _proto.get = function get(key) {
        var entry = this.sheets.get(key);
        return entry && entry.sheet;
    };
    _proto.add = function add(key, sheet) {
        if (this.sheets.has(key)) return;
        this.length++;
        this.sheets.set(key, {
            sheet: sheet,
            refs: 0
        });
    };
    _proto.manage = function manage(key) {
        var entry = this.sheets.get(key);
        if (entry) {
            if (entry.refs === 0) entry.sheet.attach();
            entry.refs++;
            return entry.sheet;
        }
        _tinyWarningDefault.default(false, "[JSS] SheetsManager: can't find sheet to manage");
        return undefined;
    };
    _proto.unmanage = function unmanage(key) {
        var entry = this.sheets.get(key);
        if (entry) {
            if (entry.refs > 0) {
                entry.refs--;
                if (entry.refs === 0) entry.sheet.detach();
            }
        } else _tinyWarningDefault.default(false, "SheetsManager: can't find sheet to unmanage");
    };
    _createClassDefault.default(SheetsManager1, [
        {
            key: "size",
            get: function get1() {
                return this.length;
            }
        }
    ]);
    return SheetsManager1;
}();
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */ /**
 * Export a constant indicating if this browser has CSSTOM support.
 * https://developers.google.com/web/updates/2018/03/cssom
 */ var hasCSSTOMSupport = typeof CSS !== 'undefined' && CSS && 'number' in CSS;
/**
 * Creates a new instance of Jss.
 */ var create = function create1(options) {
    return new Jss(options);
};
/**
 * A global Jss instance.
 */ var index = create();
exports.default = index;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","is-in-browser":"jYbva","tiny-warning":"4xDJt","@babel/runtime/helpers/esm/createClass":"dZfJy","@babel/runtime/helpers/esm/inheritsLoose":"eO0be","@babel/runtime/helpers/esm/assertThisInitialized":"iOcza","@babel/runtime/helpers/esm/objectWithoutPropertiesLoose":"3Rubg","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"bKAu6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _extends() {
    _extends = Object.assign || function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
exports.default = _extends;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"JacNc":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"jYbva":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isBrowser", ()=>isBrowser
);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var isBrowser = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof(document)) === 'object' && document.nodeType === 9;
exports.default = isBrowser;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4xDJt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var isProduction = false;
function warning(condition, message) {
    if (!isProduction) {
        if (condition) return;
        var text = "Warning: " + message;
        if (typeof console !== 'undefined') console.warn(text);
        try {
            throw Error(text);
        } catch (x) {
        }
    }
}
exports.default = warning;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"dZfJy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
exports.default = _createClass;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eO0be":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
exports.default = _inheritsLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"iOcza":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
exports.default = _assertThisInitialized;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3Rubg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {
    };
    var target = {
    };
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
exports.default = _objectWithoutPropertiesLoose;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a64iV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jssPluginRuleValueFunction = require("jss-plugin-rule-value-function");
var _jssPluginRuleValueFunctionDefault = parcelHelpers.interopDefault(_jssPluginRuleValueFunction);
var _jssPluginRuleValueObservable = require("jss-plugin-rule-value-observable");
var _jssPluginRuleValueObservableDefault = parcelHelpers.interopDefault(_jssPluginRuleValueObservable);
var _jssPluginTemplate = require("jss-plugin-template");
var _jssPluginTemplateDefault = parcelHelpers.interopDefault(_jssPluginTemplate);
var _jssPluginGlobal = require("jss-plugin-global");
var _jssPluginGlobalDefault = parcelHelpers.interopDefault(_jssPluginGlobal);
var _jssPluginExtend = require("jss-plugin-extend");
var _jssPluginExtendDefault = parcelHelpers.interopDefault(_jssPluginExtend);
var _jssPluginNested = require("jss-plugin-nested");
var _jssPluginNestedDefault = parcelHelpers.interopDefault(_jssPluginNested);
var _jssPluginCompose = require("jss-plugin-compose");
var _jssPluginComposeDefault = parcelHelpers.interopDefault(_jssPluginCompose);
var _jssPluginCamelCase = require("jss-plugin-camel-case");
var _jssPluginCamelCaseDefault = parcelHelpers.interopDefault(_jssPluginCamelCase);
var _jssPluginDefaultUnit = require("jss-plugin-default-unit");
var _jssPluginDefaultUnitDefault = parcelHelpers.interopDefault(_jssPluginDefaultUnit);
var _jssPluginExpand = require("jss-plugin-expand");
var _jssPluginExpandDefault = parcelHelpers.interopDefault(_jssPluginExpand);
var _jssPluginVendorPrefixer = require("jss-plugin-vendor-prefixer");
var _jssPluginVendorPrefixerDefault = parcelHelpers.interopDefault(_jssPluginVendorPrefixer);
var _jssPluginPropsSort = require("jss-plugin-props-sort");
var _jssPluginPropsSortDefault = parcelHelpers.interopDefault(_jssPluginPropsSort);
var index = function(options) {
    if (options === void 0) options = {
    };
    return {
        plugins: [
            _jssPluginRuleValueFunctionDefault.default(),
            _jssPluginRuleValueObservableDefault.default(options.observable),
            _jssPluginTemplateDefault.default(),
            _jssPluginGlobalDefault.default(),
            _jssPluginExtendDefault.default(),
            _jssPluginNestedDefault.default(),
            _jssPluginComposeDefault.default(),
            _jssPluginCamelCaseDefault.default(),
            _jssPluginDefaultUnitDefault.default(options.defaultUnit),
            _jssPluginExpandDefault.default(),
            _jssPluginVendorPrefixerDefault.default(),
            _jssPluginPropsSortDefault.default()
        ]
    };
};
exports.default = index;

},{"jss-plugin-rule-value-function":"8w2Ab","jss-plugin-rule-value-observable":"cs4sc","jss-plugin-template":"8Ee7C","jss-plugin-global":"67Z5D","jss-plugin-extend":"6oSXp","jss-plugin-nested":"ifE2h","jss-plugin-compose":"lVUT6","jss-plugin-camel-case":"axusa","jss-plugin-default-unit":"1ru6s","jss-plugin-expand":"jQft2","jss-plugin-vendor-prefixer":"eA3I1","jss-plugin-props-sort":"kwgBp","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8w2Ab":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
var _jss = require("jss");
var now = Date.now();
var fnValuesNs = "fnValues" + now;
var fnRuleNs = "fnStyle" + ++now;
function functionPlugin() {
    return {
        onCreateRule: function onCreateRule(name, decl, options) {
            if (typeof decl !== 'function') return null;
            var rule = _jss.createRule(name, {
            }, options);
            rule[fnRuleNs] = decl;
            return rule;
        },
        onProcessStyle: function onProcessStyle(style, rule) {
            // We need to extract function values from the declaration, so that we can keep core unaware of them.
            // We need to do that only once.
            // We don't need to extract functions on each style update, since this can happen only once.
            // We don't support function values inside of function rules.
            if (fnValuesNs in rule || fnRuleNs in rule) return style;
            var fnValues = {
            };
            for(var prop in style){
                var value = style[prop];
                if (typeof value !== 'function') continue;
                delete style[prop];
                fnValues[prop] = value;
            } // $FlowFixMe
            rule[fnValuesNs] = fnValues;
            return style;
        },
        onUpdate: function onUpdate(data, rule, sheet, options) {
            var styleRule = rule;
            var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object
            // will be returned from that function.
            if (fnRule) {
                // Empty object will remove all currently defined props
                // in case function rule returns a falsy value.
                styleRule.style = fnRule(data) || {
                };
                for(var prop in styleRule.style)if (typeof styleRule.style[prop] === 'function') {
                    _tinyWarningDefault.default(false, '[JSS] Function values inside function rules are not supported.');
                    break;
                }
            }
            var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.
            if (fnValues) for(var _prop in fnValues)styleRule.prop(_prop, fnValues[_prop](data), options);
        }
    };
}
exports.default = functionPlugin;

},{"tiny-warning":"4xDJt","jss":"aE4g0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"cs4sc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _symbolObservable = require("symbol-observable");
var _symbolObservableDefault = parcelHelpers.interopDefault(_symbolObservable);
var _jss = require("jss");
var isObservable = function isObservable1(value) {
    return value && value[_symbolObservableDefault.default] && value === value[_symbolObservableDefault.default]();
};
function observablePlugin(updateOptions) {
    return {
        onCreateRule: function onCreateRule(name, decl, options) {
            if (!isObservable(decl)) return null; // Cast `decl` to `Observable`, since it passed the type guard.
            var style$ = decl;
            var rule = _jss.createRule(name, {
            }, options); // TODO
            // Call `stream.subscribe()` returns a subscription, which should be explicitly
            // unsubscribed from when we know this sheet is no longer needed.
            style$.subscribe(function(style) {
                for(var prop in style)rule.prop(prop, style[prop], updateOptions);
            });
            return rule;
        },
        onProcessRule: function onProcessRule(rule) {
            if (rule && rule.type !== 'style') return;
            var styleRule = rule;
            var style = styleRule.style;
            var _loop = function _loop1(prop) {
                var value = style[prop];
                if (!isObservable(value)) return "continue";
                delete style[prop];
                value.subscribe({
                    next: function next(nextValue) {
                        styleRule.prop(prop, nextValue, updateOptions);
                    }
                });
            };
            for(var prop in style){
                var _ret = _loop(prop);
                if (_ret === "continue") continue;
            }
        }
    };
}
exports.default = observablePlugin;

},{"symbol-observable":"a5uaQ","jss":"aE4g0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"a5uaQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* global window */ var _ponyfillJs = require("./ponyfill.js");
var _ponyfillJsDefault = parcelHelpers.interopDefault(_ponyfillJs);
var global = arguments[3];
var root;
if (typeof self !== 'undefined') root = self;
else if (typeof window !== 'undefined') root = window;
else if (typeof global !== 'undefined') root = global;
else if (typeof module !== 'undefined') root = module;
else root = Function('return this')();
var result = _ponyfillJsDefault.default(root);
exports.default = result;

},{"./ponyfill.js":"fIiG7","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"fIiG7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function symbolObservablePonyfill(root) {
    var result;
    var Symbol1 = root.Symbol;
    if (typeof Symbol1 === 'function') {
        if (Symbol1.observable) result = Symbol1.observable;
        else {
            result = Symbol1('observable');
            Symbol1.observable = result;
        }
    } else result = '@@observable';
    return result;
}
exports.default = symbolObservablePonyfill;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8Ee7C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
var semiWithNl = /;\n/;
/**
 * Naive CSS parser.
 * - Supports only rule body (no selectors)
 * - Requires semicolon and new line after the value (except of last line)
 * - No nested rules support
 */ var parse = function(cssText) {
    var style = {
    };
    var split = cssText.split(semiWithNl);
    for(var i = 0; i < split.length; i++){
        var decl = (split[i] || '').trim();
        if (!decl) continue;
        var colonIndex = decl.indexOf(':');
        if (colonIndex === -1) {
            _tinyWarningDefault.default(false, "[JSS] Malformed CSS string \"" + decl + "\"");
            continue;
        }
        var prop = decl.substr(0, colonIndex).trim();
        var value = decl.substr(colonIndex + 1).trim();
        style[prop] = value;
    }
    return style;
};
var onProcessRule = function onProcessRule1(rule) {
    if (typeof rule.style === 'string') // $FlowFixMe: We can safely assume that rule has the style property
    rule.style = parse(rule.style);
};
function templatePlugin() {
    return {
        onProcessRule: onProcessRule
    };
}
exports.default = templatePlugin;

},{"tiny-warning":"4xDJt","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"67Z5D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _jss = require("jss");
var at = '@global';
var atPrefix = '@global ';
var GlobalContainerRule = /*#__PURE__*/ function() {
    function GlobalContainerRule1(key, styles, options) {
        this.type = 'global';
        this.at = at;
        this.rules = void 0;
        this.options = void 0;
        this.key = void 0;
        this.isProcessed = false;
        this.key = key;
        this.options = options;
        this.rules = new _jss.RuleList(_extendsDefault.default({
        }, options, {
            parent: this
        }));
        for(var selector in styles)this.rules.add(selector, styles[selector]);
        this.rules.process();
    }
    /**
   * Get a rule.
   */ var _proto = GlobalContainerRule1.prototype;
    _proto.getRule = function getRule(name) {
        return this.rules.get(name);
    };
    _proto.addRule = function addRule(name, style, options) {
        var rule = this.rules.add(name, style, options);
        this.options.jss.plugins.onProcessRule(rule);
        return rule;
    };
    _proto.indexOf = function indexOf(rule) {
        return this.rules.indexOf(rule);
    };
    _proto.toString = function toString() {
        return this.rules.toString();
    };
    return GlobalContainerRule1;
}();
var GlobalPrefixedRule = /*#__PURE__*/ function() {
    function GlobalPrefixedRule1(key, style, options) {
        this.type = 'global';
        this.at = at;
        this.options = void 0;
        this.rule = void 0;
        this.isProcessed = false;
        this.key = void 0;
        this.key = key;
        this.options = options;
        var selector = key.substr(atPrefix.length);
        this.rule = options.jss.createRule(selector, style, _extendsDefault.default({
        }, options, {
            parent: this
        }));
    }
    var _proto2 = GlobalPrefixedRule1.prototype;
    _proto2.toString = function toString(options) {
        return this.rule ? this.rule.toString(options) : '';
    };
    return GlobalPrefixedRule1;
}();
var separatorRegExp = /\s*,\s*/g;
function addScope(selector, scope) {
    var parts = selector.split(separatorRegExp);
    var scoped = '';
    for(var i = 0; i < parts.length; i++){
        scoped += scope + " " + parts[i].trim();
        if (parts[i + 1]) scoped += ', ';
    }
    return scoped;
}
function handleNestedGlobalContainerRule(rule) {
    var options = rule.options, style = rule.style;
    var rules = style ? style[at] : null;
    if (!rules) return;
    for(var name in rules)options.sheet.addRule(name, rules[name], _extendsDefault.default({
    }, options, {
        selector: addScope(name, rule.selector)
    }));
    delete style[at];
}
function handlePrefixedGlobalRule(rule) {
    var options = rule.options, style = rule.style;
    for(var prop in style){
        if (prop[0] !== '@' || prop.substr(0, at.length) !== at) continue;
        var selector = addScope(prop.substr(at.length), rule.selector);
        options.sheet.addRule(selector, style[prop], _extendsDefault.default({
        }, options, {
            selector: selector
        }));
        delete style[prop];
    }
}
/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */ function jssGlobal() {
    function onCreateRule(name, styles, options) {
        if (!name) return null;
        if (name === at) return new GlobalContainerRule(name, styles, options);
        if (name[0] === '@' && name.substr(0, atPrefix.length) === atPrefix) return new GlobalPrefixedRule(name, styles, options);
        var parent = options.parent;
        if (parent) {
            if (parent.type === 'global' || parent.options.parent && parent.options.parent.type === 'global') options.scoped = false;
        }
        if (options.scoped === false) options.selector = name;
        return null;
    }
    function onProcessRule(rule) {
        if (rule.type !== 'style') return;
        handleNestedGlobalContainerRule(rule);
        handlePrefixedGlobalRule(rule);
    }
    return {
        onCreateRule: onCreateRule,
        onProcessRule: onProcessRule
    };
}
exports.default = jssGlobal;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","jss":"aE4g0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6oSXp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
/* eslint-disable no-use-before-define */ var isObject = function isObject1(obj) {
    return obj && typeof obj === 'object' && !Array.isArray(obj);
};
var valueNs = "extendCurrValue" + Date.now();
function mergeExtend(style, rule, sheet, newStyle) {
    var extendType = typeof style.extend; // Extend using a rule name.
    if (extendType === 'string') {
        if (!sheet) return;
        var refRule = sheet.getRule(style.extend);
        if (!refRule) return;
        if (refRule === rule) {
            _tinyWarningDefault.default(false, "[JSS] A rule tries to extend itself \n" + rule.toString());
            return;
        }
        var parent = refRule.options.parent;
        if (parent) {
            var originalStyle = parent.rules.raw[style.extend];
            extend(originalStyle, rule, sheet, newStyle);
        }
        return;
    } // Extend using an array of objects.
    if (Array.isArray(style.extend)) {
        for(var index = 0; index < style.extend.length; index++)extend(style.extend[index], rule, sheet, newStyle);
        return;
    } // Extend is a style object.
    for(var prop in style.extend){
        if (prop === 'extend') {
            extend(style.extend.extend, rule, sheet, newStyle);
            continue;
        }
        if (isObject(style.extend[prop])) {
            if (!(prop in newStyle)) newStyle[prop] = {
            };
            extend(style.extend[prop], rule, sheet, newStyle[prop]);
            continue;
        }
        newStyle[prop] = style.extend[prop];
    }
}
function mergeRest(style, rule, sheet, newStyle) {
    // Copy base style.
    for(var prop in style){
        if (prop === 'extend') continue;
        if (isObject(newStyle[prop]) && isObject(style[prop])) {
            extend(style[prop], rule, sheet, newStyle[prop]);
            continue;
        }
        if (isObject(style[prop])) {
            newStyle[prop] = extend(style[prop], rule, sheet);
            continue;
        }
        newStyle[prop] = style[prop];
    }
}
/**
 * Recursively extend styles.
 */ function extend(style, rule, sheet, newStyle) {
    if (newStyle === void 0) newStyle = {
    };
    mergeExtend(style, rule, sheet, newStyle);
    mergeRest(style, rule, sheet, newStyle);
    return newStyle;
}
/**
 * Handle `extend` property.
 *
 * @param {Rule} rule
 * @api public
 */ function jssExtend() {
    function onProcessStyle(style, rule, sheet) {
        if ('extend' in style) return extend(style, rule, sheet);
        return style;
    }
    function onChangeValue(value, prop, rule) {
        if (prop !== 'extend') return value; // Value is empty, remove properties set previously.
        if (value == null || value === false) {
            // $FlowFixMe: Flow complains because there is no indexer property in StyleRule
            for(var key in rule[valueNs])rule.prop(key, null);
             // $FlowFixMe: Flow complains because there is no indexer property in StyleRule
            rule[valueNs] = null;
            return null;
        }
        if (typeof value === 'object') {
            // $FlowFixMe: This will be an object
            for(var _key in value)rule.prop(_key, value[_key]);
             // $FlowFixMe: Flow complains because there is no indexer property in StyleRule
            rule[valueNs] = value;
        } // Make sure we don't set the value in the core.
        return null;
    }
    return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
    };
}
exports.default = jssExtend;

},{"tiny-warning":"4xDJt","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ifE2h":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
var separatorRegExp = /\s*,\s*/g;
var parentRegExp = /&/g;
var refRegExp = /\$([\w-]+)/g;
/**
 * Convert nested rules to separate, remove them from original styles.
 *
 * @param {Rule} rule
 * @api public
 */ function jssNested() {
    // Get a function to be used for $ref replacement.
    function getReplaceRef(container, sheet) {
        return function(match, key) {
            var rule = container.getRule(key) || sheet && sheet.getRule(key);
            if (rule) return rule.selector;
            _tinyWarningDefault.default(false, "[JSS] Could not find the referenced rule \"" + key + "\" in \"" + (container.options.meta || container.toString()) + "\".");
            return key;
        };
    }
    function replaceParentRefs(nestedProp, parentProp) {
        var parentSelectors = parentProp.split(separatorRegExp);
        var nestedSelectors = nestedProp.split(separatorRegExp);
        var result = '';
        for(var i = 0; i < parentSelectors.length; i++){
            var parent = parentSelectors[i];
            for(var j = 0; j < nestedSelectors.length; j++){
                var nested = nestedSelectors[j];
                if (result) result += ', '; // Replace all & by the parent or prefix & with the parent.
                result += nested.indexOf('&') !== -1 ? nested.replace(parentRegExp, parent) : parent + " " + nested;
            }
        }
        return result;
    }
    function getOptions(rule, container, prevOptions) {
        // Options has been already created, now we only increase index.
        if (prevOptions) return _extendsDefault.default({
        }, prevOptions, {
            index: prevOptions.index + 1
        });
        var nestingLevel = rule.options.nestingLevel;
        nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;
        var options = _extendsDefault.default({
        }, rule.options, {
            nestingLevel: nestingLevel,
            index: container.indexOf(rule) + 1 // We don't need the parent name to be set options for chlid.
        });
        delete options.name;
        return options;
    }
    function onProcessStyle(style, rule, sheet) {
        if (rule.type !== 'style') return style;
        var styleRule = rule;
        var container = styleRule.options.parent;
        var options;
        var replaceRef;
        for(var prop in style){
            var isNested = prop.indexOf('&') !== -1;
            var isNestedConditional = prop[0] === '@';
            if (!isNested && !isNestedConditional) continue;
            options = getOptions(styleRule, container, options);
            if (isNested) {
                var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for
                // all nested rules within the sheet.
                if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.
                selector = selector.replace(refRegExp, replaceRef);
                container.addRule(selector, style[prop], _extendsDefault.default({
                }, options, {
                    selector: selector
                }));
            } else if (isNestedConditional) // Place conditional right after the parent rule to ensure right ordering.
            container.addRule(prop, {
            }, options) // Flow expects more options but they aren't required
            // And flow doesn't know this will always be a StyleRule which has the addRule method
            // $FlowFixMe
            .addRule(styleRule.key, style[prop], {
                selector: styleRule.selector
            });
            delete style[prop];
        }
        return style;
    }
    return {
        onProcessStyle: onProcessStyle
    };
}
exports.default = jssNested;

},{"@babel/runtime/helpers/esm/extends":"bKAu6","tiny-warning":"4xDJt","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lVUT6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _tinyWarning = require("tiny-warning");
var _tinyWarningDefault = parcelHelpers.interopDefault(_tinyWarning);
/**
 * Set selector.
 *
 * @param {Object} original rule
 * @param {String} className class string
 * @return {Boolean} flag, indicating function was successfull or not
 */ function registerClass(rule, className) {
    // Skip falsy values
    if (!className) return true; // Support array of class names `{composes: ['foo', 'bar']}`
    if (Array.isArray(className)) {
        for(var index = 0; index < className.length; index++){
            var isSetted = registerClass(rule, className[index]);
            if (!isSetted) return false;
        }
        return true;
    } // Support space separated class names `{composes: 'foo bar'}`
    if (className.indexOf(' ') > -1) return registerClass(rule, className.split(' '));
    var _ref = rule.options, parent = _ref.parent; // It is a ref to a local rule.
    if (className[0] === '$') {
        var refRule = parent.getRule(className.substr(1));
        if (!refRule) {
            _tinyWarningDefault.default(false, "[JSS] Referenced rule is not defined. \n" + rule.toString());
            return false;
        }
        if (refRule === rule) {
            _tinyWarningDefault.default(false, "[JSS] Cyclic composition detected. \n" + rule.toString());
            return false;
        }
        parent.classes[rule.key] += " " + parent.classes[refRule.key];
        return true;
    }
    parent.classes[rule.key] += " " + className;
    return true;
}
/**
 * Convert compose property to additional class, remove property from original styles.
 *
 * @param {Rule} rule
 * @api public
 */ function jssCompose() {
    function onProcessStyle(style, rule) {
        if (!('composes' in style)) return style;
        registerClass(rule, style.composes); // Remove composes property to prevent infinite loop.
        delete style.composes;
        return style;
    }
    return {
        onProcessStyle: onProcessStyle
    };
}
exports.default = jssCompose;

},{"tiny-warning":"4xDJt","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"axusa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _hyphenateStyleName = require("hyphenate-style-name");
var _hyphenateStyleNameDefault = parcelHelpers.interopDefault(_hyphenateStyleName);
/**
 * Convert camel cased property names to dash separated.
 *
 * @param {Object} style
 * @return {Object}
 */ function convertCase(style) {
    var converted = {
    };
    for(var prop in style){
        var key = prop.indexOf('--') === 0 ? prop : _hyphenateStyleNameDefault.default(prop);
        converted[key] = style[prop];
    }
    if (style.fallbacks) {
        if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);
        else converted.fallbacks = convertCase(style.fallbacks);
    }
    return converted;
}
/**
 * Allow camel cased property names by converting them back to dasherized.
 *
 * @param {Rule} rule
 */ function camelCase() {
    function onProcessStyle(style) {
        if (Array.isArray(style)) {
            // Handle rules like @font-face, which can have multiple styles in an array
            for(var index = 0; index < style.length; index++)style[index] = convertCase(style[index]);
            return style;
        }
        return convertCase(style);
    }
    function onChangeValue(value, prop, rule) {
        if (prop.indexOf('--') === 0) return value;
        var hyphenatedProp = _hyphenateStyleNameDefault.default(prop); // There was no camel case in place
        if (prop === hyphenatedProp) return value;
        rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.
        return null;
    }
    return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
    };
}
exports.default = camelCase;

},{"hyphenate-style-name":"4XkDg","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"4XkDg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/* eslint-disable no-var, prefer-template */ var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache = {
};
function toHyphenLower(match) {
    return '-' + match.toLowerCase();
}
function hyphenateStyleName(name) {
    if (cache.hasOwnProperty(name)) return cache[name];
    var hName = name.replace(uppercasePattern, toHyphenLower);
    return cache[name] = msPattern.test(hName) ? '-' + hName : hName;
}
exports.default = hyphenateStyleName;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1ru6s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _jss = require("jss");
var px = _jss.hasCSSTOMSupport && CSS ? CSS.px : 'px';
var ms = _jss.hasCSSTOMSupport && CSS ? CSS.ms : 'ms';
var percent = _jss.hasCSSTOMSupport && CSS ? CSS.percent : '%';
/**
 * Generated jss-plugin-default-unit CSS property units
 *
 * @type object
 */ var defaultUnits = {
    // Animation properties
    'animation-delay': ms,
    'animation-duration': ms,
    // Background properties
    'background-position': px,
    'background-position-x': px,
    'background-position-y': px,
    'background-size': px,
    // Border Properties
    border: px,
    'border-bottom': px,
    'border-bottom-left-radius': px,
    'border-bottom-right-radius': px,
    'border-bottom-width': px,
    'border-left': px,
    'border-left-width': px,
    'border-radius': px,
    'border-right': px,
    'border-right-width': px,
    'border-top': px,
    'border-top-left-radius': px,
    'border-top-right-radius': px,
    'border-top-width': px,
    'border-width': px,
    // Margin properties
    margin: px,
    'margin-bottom': px,
    'margin-left': px,
    'margin-right': px,
    'margin-top': px,
    // Padding properties
    padding: px,
    'padding-bottom': px,
    'padding-left': px,
    'padding-right': px,
    'padding-top': px,
    // Mask properties
    'mask-position-x': px,
    'mask-position-y': px,
    'mask-size': px,
    // Width and height properties
    height: px,
    width: px,
    'min-height': px,
    'max-height': px,
    'min-width': px,
    'max-width': px,
    // Position properties
    bottom: px,
    left: px,
    top: px,
    right: px,
    // Shadow properties
    'box-shadow': px,
    'text-shadow': px,
    // Column properties
    'column-gap': px,
    'column-rule': px,
    'column-rule-width': px,
    'column-width': px,
    // Font and text properties
    'font-size': px,
    'font-size-delta': px,
    'letter-spacing': px,
    'text-indent': px,
    'text-stroke': px,
    'text-stroke-width': px,
    'word-spacing': px,
    // Motion properties
    motion: px,
    'motion-offset': px,
    // Outline properties
    outline: px,
    'outline-offset': px,
    'outline-width': px,
    // Perspective properties
    perspective: px,
    'perspective-origin-x': percent,
    'perspective-origin-y': percent,
    // Transform properties
    'transform-origin': percent,
    'transform-origin-x': percent,
    'transform-origin-y': percent,
    'transform-origin-z': percent,
    // Transition properties
    'transition-delay': ms,
    'transition-duration': ms,
    // Alignment properties
    'vertical-align': px,
    'flex-basis': px,
    // Some random properties
    'shape-margin': px,
    size: px,
    // Grid properties
    grid: px,
    'grid-gap': px,
    'grid-row-gap': px,
    'grid-column-gap': px,
    'grid-template-rows': px,
    'grid-template-columns': px,
    'grid-auto-rows': px,
    'grid-auto-columns': px,
    // Not existing properties.
    // Used to avoid issues with jss-plugin-expand integration.
    'box-shadow-x': px,
    'box-shadow-y': px,
    'box-shadow-blur': px,
    'box-shadow-spread': px,
    'font-line-height': px,
    'text-shadow-x': px,
    'text-shadow-y': px,
    'text-shadow-blur': px
};
/**
 * Clones the object and adds a camel cased property version.
 */ function addCamelCasedVersion(obj) {
    var regExp = /(-[a-z])/g;
    var replace = function replace1(str) {
        return str[1].toUpperCase();
    };
    var newObj = {
    };
    for(var _key in obj){
        newObj[_key] = obj[_key];
        newObj[_key.replace(regExp, replace)] = obj[_key];
    }
    return newObj;
}
var units = addCamelCasedVersion(defaultUnits);
/**
 * Recursive deep style passing function
 */ function iterate(prop, value, options) {
    if (!value) return value;
    if (Array.isArray(value)) for(var i = 0; i < value.length; i++)value[i] = iterate(prop, value[i], options);
    else if (typeof value === 'object') {
        if (prop === 'fallbacks') for(var innerProp in value)value[innerProp] = iterate(innerProp, value[innerProp], options);
        else for(var _innerProp in value)value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
    } else if (typeof value === 'number') {
        var unit = options[prop] || units[prop];
        if (unit) return typeof unit === 'function' ? unit(value).toString() : "" + value + unit;
        return value.toString();
    }
    return value;
}
/**
 * Add unit to numeric values.
 */ function defaultUnit(options) {
    if (options === void 0) options = {
    };
    var camelCasedOptions = addCamelCasedVersion(options);
    function onProcessStyle(style, rule) {
        if (rule.type !== 'style') return style;
        for(var prop in style)style[prop] = iterate(prop, style[prop], camelCasedOptions);
        return style;
    }
    function onChangeValue(value, prop) {
        return iterate(prop, value, camelCasedOptions);
    }
    return {
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
    };
}
exports.default = defaultUnit;

},{"jss":"aE4g0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"jQft2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * A scheme for converting properties from array to regular style.
 * All properties listed below will be transformed to a string separated by space.
 */ var propArray = {
    'background-size': true,
    'background-position': true,
    border: true,
    'border-bottom': true,
    'border-left': true,
    'border-top': true,
    'border-right': true,
    'border-radius': true,
    'border-image': true,
    'border-width': true,
    'border-style': true,
    'border-color': true,
    'box-shadow': true,
    flex: true,
    margin: true,
    padding: true,
    outline: true,
    'transform-origin': true,
    transform: true,
    transition: true
};
var propArrayInObj = {
    position: true,
    // background-position
    size: true // background-size
};
var propObj = {
    padding: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    },
    margin: {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
    },
    background: {
        attachment: null,
        color: null,
        image: null,
        position: null,
        repeat: null
    },
    border: {
        width: null,
        style: null,
        color: null
    },
    'border-top': {
        width: null,
        style: null,
        color: null
    },
    'border-right': {
        width: null,
        style: null,
        color: null
    },
    'border-bottom': {
        width: null,
        style: null,
        color: null
    },
    'border-left': {
        width: null,
        style: null,
        color: null
    },
    outline: {
        width: null,
        style: null,
        color: null
    },
    'list-style': {
        type: null,
        position: null,
        image: null
    },
    transition: {
        property: null,
        duration: null,
        'timing-function': null,
        timingFunction: null,
        // Needed for avoiding comilation issues with jss-plugin-camel-case
        delay: null
    },
    animation: {
        name: null,
        duration: null,
        'timing-function': null,
        timingFunction: null,
        // Needed to avoid compilation issues with jss-plugin-camel-case
        delay: null,
        'iteration-count': null,
        iterationCount: null,
        // Needed to avoid compilation issues with jss-plugin-camel-case
        direction: null,
        'fill-mode': null,
        fillMode: null,
        // Needed to avoid compilation issues with jss-plugin-camel-case
        'play-state': null,
        playState: null // Needed to avoid compilation issues with jss-plugin-camel-case
    },
    'box-shadow': {
        x: 0,
        y: 0,
        blur: 0,
        spread: 0,
        color: null,
        inset: null
    },
    'text-shadow': {
        x: 0,
        y: 0,
        blur: null,
        color: null
    }
};
var customPropObj = {
    border: {
        radius: 'border-radius',
        image: 'border-image',
        width: 'border-width',
        style: 'border-style',
        color: 'border-color'
    },
    'border-bottom': {
        width: 'border-bottom-width',
        style: 'border-bottom-style',
        color: 'border-bottom-color'
    },
    'border-top': {
        width: 'border-top-width',
        style: 'border-top-style',
        color: 'border-top-color'
    },
    'border-left': {
        width: 'border-left-width',
        style: 'border-left-style',
        color: 'border-left-color'
    },
    'border-right': {
        width: 'border-right-width',
        style: 'border-right-style',
        color: 'border-right-color'
    },
    background: {
        size: 'background-size',
        image: 'background-image'
    },
    font: {
        style: 'font-style',
        variant: 'font-variant',
        weight: 'font-weight',
        stretch: 'font-stretch',
        size: 'font-size',
        family: 'font-family',
        lineHeight: 'line-height',
        // Needed to avoid compilation issues with jss-plugin-camel-case
        'line-height': 'line-height'
    },
    flex: {
        grow: 'flex-grow',
        basis: 'flex-basis',
        direction: 'flex-direction',
        wrap: 'flex-wrap',
        flow: 'flex-flow',
        shrink: 'flex-shrink'
    },
    align: {
        self: 'align-self',
        items: 'align-items',
        content: 'align-content'
    },
    grid: {
        'template-columns': 'grid-template-columns',
        templateColumns: 'grid-template-columns',
        'template-rows': 'grid-template-rows',
        templateRows: 'grid-template-rows',
        'template-areas': 'grid-template-areas',
        templateAreas: 'grid-template-areas',
        template: 'grid-template',
        'auto-columns': 'grid-auto-columns',
        autoColumns: 'grid-auto-columns',
        'auto-rows': 'grid-auto-rows',
        autoRows: 'grid-auto-rows',
        'auto-flow': 'grid-auto-flow',
        autoFlow: 'grid-auto-flow',
        row: 'grid-row',
        column: 'grid-column',
        'row-start': 'grid-row-start',
        rowStart: 'grid-row-start',
        'row-end': 'grid-row-end',
        rowEnd: 'grid-row-end',
        'column-start': 'grid-column-start',
        columnStart: 'grid-column-start',
        'column-end': 'grid-column-end',
        columnEnd: 'grid-column-end',
        area: 'grid-area',
        gap: 'grid-gap',
        'row-gap': 'grid-row-gap',
        rowGap: 'grid-row-gap',
        'column-gap': 'grid-column-gap',
        columnGap: 'grid-column-gap'
    }
};
/* eslint-disable no-use-before-define */ /**
 * Map values by given prop.
 *
 * @param {Array} array of values
 * @param {String} original property
 * @param {String} original rule
 * @return {String} mapped values
 */ function mapValuesByProp(value, prop, rule) {
    return value.map(function(item) {
        return objectToArray(item, prop, rule, false, true);
    });
}
/**
 * Convert array to nested array, if needed
 */ function processArray(value, prop, scheme, rule) {
    if (scheme[prop] == null) return value;
    if (value.length === 0) return [];
    if (Array.isArray(value[0])) return processArray(value[0], prop, scheme, rule);
    if (typeof value[0] === 'object') return mapValuesByProp(value, prop, rule);
    return [
        value
    ];
}
/**
 * Convert object to array.
 */ function objectToArray(value, prop, rule, isFallback, isInArray) {
    if (!(propObj[prop] || customPropObj[prop])) return [];
    var result = []; // Check if exists any non-standard property
    if (customPropObj[prop]) // eslint-disable-next-line no-param-reassign
    value = customPropsToStyle(value, rule, customPropObj[prop], isFallback);
     // Pass throught all standart props
    if (Object.keys(value).length) for(var baseProp in propObj[prop]){
        if (value[baseProp]) {
            if (Array.isArray(value[baseProp])) result.push(propArrayInObj[baseProp] === null ? value[baseProp] : value[baseProp].join(' '));
            else result.push(value[baseProp]);
            continue;
        } // Add default value from props config.
        if (propObj[prop][baseProp] != null) result.push(propObj[prop][baseProp]);
    }
    if (!result.length || isInArray) return result;
    return [
        result
    ];
}
/**
 * Convert custom properties values to styles adding them to rule directly
 */ function customPropsToStyle(value, rule, customProps, isFallback) {
    for(var prop in customProps){
        var propName = customProps[prop]; // If current property doesn't exist already in rule - add new one
        if (typeof value[prop] !== 'undefined' && (isFallback || !rule.prop(propName))) {
            var _styleDetector;
            var appendedValue = styleDetector((_styleDetector = {
            }, _styleDetector[propName] = value[prop], _styleDetector), rule)[propName]; // Add style directly in rule
            if (isFallback) rule.style.fallbacks[propName] = appendedValue;
            else rule.style[propName] = appendedValue;
        } // Delete converted property to avoid double converting
        delete value[prop];
    }
    return value;
}
/**
 * Detect if a style needs to be converted.
 */ function styleDetector(style, rule, isFallback) {
    for(var prop in style){
        var value = style[prop];
        if (Array.isArray(value)) // Check double arrays to avoid recursion.
        {
            if (!Array.isArray(value[0])) {
                if (prop === 'fallbacks') {
                    for(var index = 0; index < style.fallbacks.length; index++)style.fallbacks[index] = styleDetector(style.fallbacks[index], rule, true);
                    continue;
                }
                style[prop] = processArray(value, prop, propArray, rule); // Avoid creating properties with empty values
                if (!style[prop].length) delete style[prop];
            }
        } else if (typeof value === 'object') {
            if (prop === 'fallbacks') {
                style.fallbacks = styleDetector(style.fallbacks, rule, true);
                continue;
            }
            style[prop] = objectToArray(value, prop, rule, isFallback); // Avoid creating properties with empty values
            if (!style[prop].length) delete style[prop];
        } else if (style[prop] === '') delete style[prop];
    }
    return style;
}
/**
 * Adds possibility to write expanded styles.
 */ function jssExpand() {
    function onProcessStyle(style, rule) {
        if (!style || rule.type !== 'style') return style;
        if (Array.isArray(style)) {
            // Pass rules one by one and reformat them
            for(var index = 0; index < style.length; index++)style[index] = styleDetector(style[index], rule);
            return style;
        }
        return styleDetector(style, rule);
    }
    return {
        onProcessStyle: onProcessStyle
    };
}
exports.default = jssExpand;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"eA3I1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cssVendor = require("css-vendor");
var _jss = require("jss");
/**
 * Add vendor prefix to a property name when needed.
 *
 * @api public
 */ function jssVendorPrefixer() {
    function onProcessRule(rule) {
        if (rule.type === 'keyframes') {
            var atRule = rule;
            atRule.at = _cssVendor.supportedKeyframes(atRule.at);
        }
    }
    function prefixStyle(style) {
        for(var prop in style){
            var value = style[prop];
            if (prop === 'fallbacks' && Array.isArray(value)) {
                style[prop] = value.map(prefixStyle);
                continue;
            }
            var changeProp = false;
            var supportedProp = _cssVendor.supportedProperty(prop);
            if (supportedProp && supportedProp !== prop) changeProp = true;
            var changeValue = false;
            var supportedValue$$1 = _cssVendor.supportedValue(supportedProp, _jss.toCssValue(value));
            if (supportedValue$$1 && supportedValue$$1 !== value) changeValue = true;
            if (changeProp || changeValue) {
                if (changeProp) delete style[prop];
                style[supportedProp || prop] = supportedValue$$1 || value;
            }
        }
        return style;
    }
    function onProcessStyle(style, rule) {
        if (rule.type !== 'style') return style;
        return prefixStyle(style);
    }
    function onChangeValue(value, prop) {
        return _cssVendor.supportedValue(prop, _jss.toCssValue(value)) || value;
    }
    return {
        onProcessRule: onProcessRule,
        onProcessStyle: onProcessStyle,
        onChangeValue: onChangeValue
    };
}
exports.default = jssVendorPrefixer;

},{"css-vendor":"3nZk7","jss":"aE4g0","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3nZk7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prefix", ()=>prefix
);
parcelHelpers.export(exports, "supportedKeyframes", ()=>supportedKeyframes
);
parcelHelpers.export(exports, "supportedProperty", ()=>supportedProperty
);
parcelHelpers.export(exports, "supportedValue", ()=>supportedValue
);
var _isInBrowser = require("is-in-browser");
var _isInBrowserDefault = parcelHelpers.interopDefault(_isInBrowser);
var _toConsumableArray = require("@babel/runtime/helpers/esm/toConsumableArray");
var _toConsumableArrayDefault = parcelHelpers.interopDefault(_toConsumableArray);
// Export javascript style and css style vendor prefixes.
var js = '';
var css = '';
var vendor = '';
var browser = '';
var isTouch = _isInBrowserDefault.default && 'ontouchstart' in document.documentElement; // We should not do anything if required serverside.
if (_isInBrowserDefault.default) {
    // Order matters. We need to check Webkit the last one because
    // other vendors use to add Webkit prefixes to some properties
    var jsCssMap = {
        Moz: '-moz-',
        ms: '-ms-',
        O: '-o-',
        Webkit: '-webkit-'
    };
    var _document$createEleme = document.createElement('p'), style = _document$createEleme.style;
    var testProp = 'Transform';
    for(var key in jsCssMap)if (key + testProp in style) {
        js = key;
        css = jsCssMap[key];
        break;
    }
     // Correctly detect the Edge browser.
    if (js === 'Webkit' && 'msHyphens' in style) {
        js = 'ms';
        css = jsCssMap.ms;
        browser = 'edge';
    } // Correctly detect the Safari browser.
    if (js === 'Webkit' && '-apple-trailing-word' in style) vendor = 'apple';
}
/**
 * Vendor prefix string for the current browser.
 *
 * @type {{js: String, css: String, vendor: String, browser: String}}
 * @api public
 */ var prefix = {
    js: js,
    css: css,
    vendor: vendor,
    browser: browser,
    isTouch: isTouch
};
/**
 * Test if a keyframe at-rule should be prefixed or not
 *
 * @param {String} vendor prefix string for the current browser.
 * @return {String}
 * @api public
 */ function supportedKeyframes(key) {
    // Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'
    if (key[1] === '-') return key; // No need to prefix IE/Edge. Older browsers will ignore unsupported rules.
    // https://caniuse.com/#search=keyframes
    if (prefix.js === 'ms') return key;
    return "@" + prefix.css + "keyframes" + key.substr(10);
}
// https://caniuse.com/#search=appearance
var appearence = {
    noPrefill: [
        'appearance'
    ],
    supportedProperty: function supportedProperty(prop) {
        if (prop !== 'appearance') return false;
        if (prefix.js === 'ms') return "-webkit-" + prop;
        return prefix.css + prop;
    }
};
// https://caniuse.com/#search=color-adjust
var colorAdjust = {
    noPrefill: [
        'color-adjust'
    ],
    supportedProperty: function supportedProperty(prop) {
        if (prop !== 'color-adjust') return false;
        if (prefix.js === 'Webkit') return prefix.css + "print-" + prop;
        return prop;
    }
};
var regExp = /[-\s]+(.)?/g;
/**
 * Replaces the letter with the capital letter
 *
 * @param {String} match
 * @param {String} c
 * @return {String}
 * @api private
 */ function toUpper(match, c) {
    return c ? c.toUpperCase() : '';
}
/**
 * Convert dash separated strings to camel-cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */ function camelize(str) {
    return str.replace(regExp, toUpper);
}
/**
 * Convert dash separated strings to pascal cased.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */ function pascalize(str) {
    return camelize("-" + str);
}
// but we can use a longhand property instead.
// https://caniuse.com/#search=mask
var mask = {
    noPrefill: [
        'mask'
    ],
    supportedProperty: function supportedProperty(prop, style) {
        if (!/^mask/.test(prop)) return false;
        if (prefix.js === 'Webkit') {
            var longhand = 'mask-image';
            if (camelize(longhand) in style) return prop;
            if (prefix.js + pascalize(longhand) in style) return prefix.css + prop;
        }
        return prop;
    }
};
// https://caniuse.com/#search=text-orientation
var textOrientation = {
    noPrefill: [
        'text-orientation'
    ],
    supportedProperty: function supportedProperty(prop) {
        if (prop !== 'text-orientation') return false;
        if (prefix.vendor === 'apple' && !prefix.isTouch) return prefix.css + prop;
        return prop;
    }
};
// https://caniuse.com/#search=transform
var transform = {
    noPrefill: [
        'transform'
    ],
    supportedProperty: function supportedProperty(prop, style, options) {
        if (prop !== 'transform') return false;
        if (options.transform) return prop;
        return prefix.css + prop;
    }
};
// https://caniuse.com/#search=transition
var transition = {
    noPrefill: [
        'transition'
    ],
    supportedProperty: function supportedProperty(prop, style, options) {
        if (prop !== 'transition') return false;
        if (options.transition) return prop;
        return prefix.css + prop;
    }
};
// https://caniuse.com/#search=writing-mode
var writingMode = {
    noPrefill: [
        'writing-mode'
    ],
    supportedProperty: function supportedProperty(prop) {
        if (prop !== 'writing-mode') return false;
        if (prefix.js === 'Webkit' || prefix.js === 'ms' && prefix.browser !== 'edge') return prefix.css + prop;
        return prop;
    }
};
// https://caniuse.com/#search=user-select
var userSelect = {
    noPrefill: [
        'user-select'
    ],
    supportedProperty: function supportedProperty(prop) {
        if (prop !== 'user-select') return false;
        if (prefix.js === 'Moz' || prefix.js === 'ms' || prefix.vendor === 'apple') return prefix.css + prop;
        return prop;
    }
};
// https://caniuse.com/#search=multicolumn
// https://github.com/postcss/autoprefixer/issues/491
// https://github.com/postcss/autoprefixer/issues/177
var breakPropsOld = {
    supportedProperty: function supportedProperty(prop, style) {
        if (!/^break-/.test(prop)) return false;
        if (prefix.js === 'Webkit') {
            var jsProp = "WebkitColumn" + pascalize(prop);
            return jsProp in style ? prefix.css + "column-" + prop : false;
        }
        if (prefix.js === 'Moz') {
            var _jsProp = "page" + pascalize(prop);
            return _jsProp in style ? "page-" + prop : false;
        }
        return false;
    }
};
// See https://github.com/postcss/autoprefixer/issues/324.
var inlineLogicalOld = {
    supportedProperty: function supportedProperty(prop, style) {
        if (!/^(border|margin|padding)-inline/.test(prop)) return false;
        if (prefix.js === 'Moz') return prop;
        var newProp = prop.replace('-inline', '');
        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
    }
};
// Camelization is required because we can't test using.
// CSS syntax for e.g. in FF.
var unprefixed = {
    supportedProperty: function supportedProperty(prop, style) {
        return camelize(prop) in style ? prop : false;
    }
};
var prefixed = {
    supportedProperty: function supportedProperty(prop, style) {
        var pascalized = pascalize(prop); // Return custom CSS variable without prefixing.
        if (prop[0] === '-') return prop; // Return already prefixed value without prefixing.
        if (prop[0] === '-' && prop[1] === '-') return prop;
        if (prefix.js + pascalized in style) return prefix.css + prop; // Try webkit fallback.
        if (prefix.js !== 'Webkit' && "Webkit" + pascalized in style) return "-webkit-" + prop;
        return false;
    }
};
// https://caniuse.com/#search=scroll-snap
var scrollSnap = {
    supportedProperty: function supportedProperty(prop) {
        if (prop.substring(0, 11) !== 'scroll-snap') return false;
        if (prefix.js === 'ms') return "" + prefix.css + prop;
        return prop;
    }
};
// https://caniuse.com/#search=overscroll-behavior
var overscrollBehavior = {
    supportedProperty: function supportedProperty(prop) {
        if (prop !== 'overscroll-behavior') return false;
        if (prefix.js === 'ms') return prefix.css + "scroll-chaining";
        return prop;
    }
};
var propMap = {
    'flex-grow': 'flex-positive',
    'flex-shrink': 'flex-negative',
    'flex-basis': 'flex-preferred-size',
    'justify-content': 'flex-pack',
    order: 'flex-order',
    'align-items': 'flex-align',
    'align-content': 'flex-line-pack' // 'align-self' is handled by 'align-self' plugin.
}; // Support old flex spec from 2012.
var flex2012 = {
    supportedProperty: function supportedProperty(prop, style) {
        var newProp = propMap[prop];
        if (!newProp) return false;
        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
    }
};
var propMap$1 = {
    flex: 'box-flex',
    'flex-grow': 'box-flex',
    'flex-direction': [
        'box-orient',
        'box-direction'
    ],
    order: 'box-ordinal-group',
    'align-items': 'box-align',
    'flex-flow': [
        'box-orient',
        'box-direction'
    ],
    'justify-content': 'box-pack'
};
var propKeys = Object.keys(propMap$1);
var prefixCss = function prefixCss1(p) {
    return prefix.css + p;
}; // Support old flex spec from 2009.
var flex2009 = {
    supportedProperty: function supportedProperty(prop, style, _ref) {
        var multiple = _ref.multiple;
        if (propKeys.indexOf(prop) > -1) {
            var newProp = propMap$1[prop];
            if (!Array.isArray(newProp)) return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
            if (!multiple) return false;
            for(var i = 0; i < newProp.length; i++){
                if (!(prefix.js + pascalize(newProp[0]) in style)) return false;
            }
            return newProp.map(prefixCss);
        }
        return false;
    }
};
// plugins = [
//   ...plugins,
//    breakPropsOld,
//    inlineLogicalOld,
//    unprefixed,
//    prefixed,
//    scrollSnap,
//    flex2012,
//    flex2009
// ]
// Plugins without 'noPrefill' value, going last.
// 'flex-*' plugins should be at the bottom.
// 'flex2009' going after 'flex2012'.
// 'prefixed' going after 'unprefixed'
var plugins = [
    appearence,
    colorAdjust,
    mask,
    textOrientation,
    transform,
    transition,
    writingMode,
    userSelect,
    breakPropsOld,
    inlineLogicalOld,
    unprefixed,
    prefixed,
    scrollSnap,
    overscrollBehavior,
    flex2012,
    flex2009
];
var propertyDetectors = plugins.filter(function(p) {
    return p.supportedProperty;
}).map(function(p) {
    return p.supportedProperty;
});
var noPrefill = plugins.filter(function(p) {
    return p.noPrefill;
}).reduce(function(a, p) {
    a.push.apply(a, _toConsumableArrayDefault.default(p.noPrefill));
    return a;
}, []);
var el;
var cache = {
};
if (_isInBrowserDefault.default) {
    el = document.createElement('p'); // We test every property on vendor prefix requirement.
    // Once tested, result is cached. It gives us up to 70% perf boost.
    // http://jsperf.com/element-style-object-access-vs-plain-object
    //
    // Prefill cache with known css properties to reduce amount of
    // properties we need to feature test at runtime.
    // http://davidwalsh.name/vendor-prefix
    var computed = window.getComputedStyle(document.documentElement, '');
    for(var key$1 in computed)// eslint-disable-next-line no-restricted-globals
    if (!isNaN(key$1)) cache[computed[key$1]] = computed[key$1];
     // Properties that cannot be correctly detected using the
    // cache prefill method.
    noPrefill.forEach(function(x) {
        return delete cache[x];
    });
}
/**
 * Test if a property is supported, returns supported property with vendor
 * prefix if required. Returns `false` if not supported.
 *
 * @param {String} prop dash separated
 * @param {Object} [options]
 * @return {String|Boolean}
 * @api public
 */ function supportedProperty(prop, options) {
    if (options === void 0) options = {
    };
    // For server-side rendering.
    if (!el) return prop; // Remove cache for benchmark tests or return property from the cache.
    if (cache[prop] != null) return cache[prop];
     // Check if 'transition' or 'transform' natively supported in browser.
    if (prop === 'transition' || prop === 'transform') options[prop] = prop in el.style;
     // Find a plugin for current prefix property.
    for(var i = 0; i < propertyDetectors.length; i++){
        cache[prop] = propertyDetectors[i](prop, el.style, options); // Break loop, if value found.
        if (cache[prop]) break;
    } // Reset styles for current property.
    // Firefox can even throw an error for invalid properties, e.g., "0".
    try {
        el.style[prop] = '';
    } catch (err) {
        return false;
    }
    return cache[prop];
}
var cache$1 = {
};
var transitionProperties = {
    transition: 1,
    'transition-property': 1,
    '-webkit-transition': 1,
    '-webkit-transition-property': 1
};
var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
var el$1;
/**
 * Returns prefixed value transition/transform if needed.
 *
 * @param {String} match
 * @param {String} p1
 * @param {String} p2
 * @return {String}
 * @api private
 */ function prefixTransitionCallback(match, p1, p2) {
    if (p1 === 'var') return 'var';
    if (p1 === 'all') return 'all';
    if (p2 === 'all') return ', all';
    var prefixedValue = p1 ? supportedProperty(p1) : ", " + supportedProperty(p2);
    if (!prefixedValue) return p1 || p2;
    return prefixedValue;
}
if (_isInBrowserDefault.default) el$1 = document.createElement('p');
/**
 * Returns prefixed value if needed. Returns `false` if value is not supported.
 *
 * @param {String} property
 * @param {String} value
 * @return {String|Boolean}
 * @api public
 */ function supportedValue(property, value) {
    // For server-side rendering.
    var prefixedValue = value;
    if (!el$1 || property === 'content') return value; // It is a string or a number as a string like '1'.
    // We want only prefixable values here.
    // eslint-disable-next-line no-restricted-globals
    if (typeof prefixedValue !== 'string' || !isNaN(parseInt(prefixedValue, 10))) return prefixedValue;
     // Create cache key for current value.
    var cacheKey = property + prefixedValue; // Remove cache for benchmark tests or return value from cache.
    if (cache$1[cacheKey] != null) return cache$1[cacheKey];
     // IE can even throw an error in some cases, for e.g. style.content = 'bar'.
    try {
        // Test value as it is.
        el$1.style[property] = prefixedValue;
    } catch (err) {
        // Return false if value not supported.
        cache$1[cacheKey] = false;
        return false;
    } // If 'transition' or 'transition-property' property.
    if (transitionProperties[property]) prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
    else if (el$1.style[property] === '') {
        // Value with a vendor prefix.
        prefixedValue = prefix.css + prefixedValue; // Hardcode test to convert "flex" to "-ms-flexbox" for IE10.
        if (prefixedValue === '-ms-flex') el$1.style[property] = '-ms-flexbox'; // Test prefixed value.
        el$1.style[property] = prefixedValue; // Return false if value not supported.
        if (el$1.style[property] === '') {
            cache$1[cacheKey] = false;
            return false;
        }
    } // Reset styles for current property.
    el$1.style[property] = ''; // Write current value to cache.
    cache$1[cacheKey] = prefixedValue;
    return cache$1[cacheKey];
}

},{"is-in-browser":"jYbva","@babel/runtime/helpers/esm/toConsumableArray":"5Y3s4","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5Y3s4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayWithoutHoles = require("./arrayWithoutHoles");
var _arrayWithoutHolesDefault = parcelHelpers.interopDefault(_arrayWithoutHoles);
var _iterableToArray = require("./iterableToArray");
var _iterableToArrayDefault = parcelHelpers.interopDefault(_iterableToArray);
var _unsupportedIterableToArray = require("./unsupportedIterableToArray");
var _unsupportedIterableToArrayDefault = parcelHelpers.interopDefault(_unsupportedIterableToArray);
var _nonIterableSpread = require("./nonIterableSpread");
var _nonIterableSpreadDefault = parcelHelpers.interopDefault(_nonIterableSpread);
function _toConsumableArray(arr) {
    return _arrayWithoutHolesDefault.default(arr) || _iterableToArrayDefault.default(arr) || _unsupportedIterableToArrayDefault.default(arr) || _nonIterableSpreadDefault.default();
}
exports.default = _toConsumableArray;

},{"./arrayWithoutHoles":"1UwCP","./iterableToArray":"3TSI4","./unsupportedIterableToArray":"5LFTn","./nonIterableSpread":"lX7OH","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"1UwCP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayLikeToArray = require("./arrayLikeToArray");
var _arrayLikeToArrayDefault = parcelHelpers.interopDefault(_arrayLikeToArray);
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArrayDefault.default(arr);
}
exports.default = _arrayWithoutHoles;

},{"./arrayLikeToArray":"ljYZ1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"ljYZ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
exports.default = _arrayLikeToArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"3TSI4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}
exports.default = _iterableToArray;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"5LFTn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _arrayLikeToArray = require("./arrayLikeToArray");
var _arrayLikeToArrayDefault = parcelHelpers.interopDefault(_arrayLikeToArray);
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArrayDefault.default(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArrayDefault.default(o, minLen);
}
exports.default = _unsupportedIterableToArray;

},{"./arrayLikeToArray":"ljYZ1","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"lX7OH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
exports.default = _nonIterableSpread;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"kwgBp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Sort props by length.
 */ function jssPropsSort() {
    var sort = function sort1(prop0, prop1) {
        if (prop0.length === prop1.length) return prop0 > prop1 ? 1 : -1;
        return prop0.length - prop1.length;
    };
    return {
        onProcessStyle: function onProcessStyle(style, rule) {
            if (rule.type !== 'style') return style;
            var newStyle = {
            };
            var props = Object.keys(style).sort(sort);
            for(var i = 0; i < props.length; i++)newStyle[props[i]] = style[props[i]];
            return newStyle;
        }
    };
}
exports.default = jssPropsSort;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"8VJxh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _hlsJs = require("hls.js");
var _hlsJsDefault = parcelHelpers.interopDefault(_hlsJs);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = undefined && undefined.__rest || function(s, e) {
    var t = {
    };
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    return t;
};
function ReactHlsPlayer(_a) {
    var hlsConfig = _a.hlsConfig, _b = _a.playerRef, playerRef = _b === void 0 ? _reactDefault.default.createRef() : _b, src = _a.src, autoPlay = _a.autoPlay, props = __rest(_a, [
        "hlsConfig",
        "playerRef",
        "src",
        "autoPlay"
    ]);
    _react.useEffect(function() {
        var hls;
        function _initPlayer() {
            if (hls != null) hls.destroy();
            var newHls = new _hlsJsDefault.default(__assign({
                enableWorker: false
            }, hlsConfig));
            if (playerRef.current != null) newHls.attachMedia(playerRef.current);
            newHls.on(_hlsJsDefault.default.Events.MEDIA_ATTACHED, function() {
                newHls.loadSource(src);
                newHls.on(_hlsJsDefault.default.Events.MANIFEST_PARSED, function() {
                    var _a1;
                    if (autoPlay) (_a1 = playerRef === null || playerRef === void 0 ? void 0 : playerRef.current) === null || _a1 === void 0 || _a1.play().catch(function() {
                        return console.log('Unable to autoplay prior to user interaction with the dom.');
                    });
                });
            });
            newHls.on(_hlsJsDefault.default.Events.ERROR, function(event, data) {
                if (data.fatal) switch(data.type){
                    case _hlsJsDefault.default.ErrorTypes.NETWORK_ERROR:
                        newHls.startLoad();
                        break;
                    case _hlsJsDefault.default.ErrorTypes.MEDIA_ERROR:
                        newHls.recoverMediaError();
                        break;
                    default:
                        _initPlayer();
                        break;
                }
            });
            hls = newHls;
        }
        if (_hlsJsDefault.default.isSupported()) _initPlayer();
        return function() {
            if (hls != null) hls.destroy();
        };
    }, [
        autoPlay,
        hlsConfig,
        playerRef,
        src
    ]);
    if (_hlsJsDefault.default.isSupported()) return _reactDefault.default.createElement("video", __assign({
        ref: playerRef
    }, props));
    return _reactDefault.default.createElement("video", __assign({
        ref: playerRef,
        src: src,
        autoPlay: autoPlay
    }, props));
}
exports.default = ReactHlsPlayer;

},{"react":"6TuXu","hls.js":"1oXC5","@parcel/transformer-js/src/esmodule-helpers.js":"JacNc"}],"6TuXu":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react.development.js');

},{"./cjs/react.development.js":"9WG5J"}],"9WG5J":[function(require,module,exports) {
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var _assign = require('object-assign');
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    exports.StrictMode = 60108;
    exports.Profiler = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    exports.Suspense = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        exports.StrictMode = symbolFor('react.strict_mode');
        exports.Profiler = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        exports.Suspense = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    /**
 * Keeps track of the current dispatcher.
 */ var ReactCurrentDispatcher = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    /**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */ var ReactCurrentBatchConfig = {
        transition: 0
    };
    /**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */ var ReactCurrentOwner = {
        /**
   * @internal
   * @type {ReactComponent}
   */ current: null
    };
    var ReactDebugCurrentFrame = {
    };
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    }; // Stack implementation injected by the current renderer.
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = ''; // Add an extra top frame while an element is being validated
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
         // Delegate to the injected renderer-specific implementation
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    /**
 * Used by act() to track whether you're inside an act() scope.
 */ var IsSomeRendererActing = {
        current: false
    };
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner,
        IsSomeRendererActing: IsSomeRendererActing,
        // Used by renderers to avoid bundling object-assign twice in UMD bundles:
        assign: _assign
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame1 = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame1.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {
    };
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    /**
 * This is the abstract API for an update queue.
 */ var ReactNoopUpdateQueue = {
        /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */ isMounted: function(publicInstance) {
            return false;
        },
        /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */ enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */ enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var emptyObject = {
    };
    Object.freeze(emptyObject);
    /**
 * Base class helpers for the updating state of a component.
 */ function Component(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
        // renderer.
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {
    };
    /**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */ Component.prototype.setState = function(partialState, callback) {
        if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */ Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {
    }
    ComponentDummy.prototype = Component.prototype;
    /**
 * Convenience component with default shallow equality check for sCU.
 */ function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context; // If a component has string refs, we will assign a different object later.
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.
    _assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    // an immutable object with a single mutable value
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case exports.Profiler:
                return 'Profiler';
            case exports.StrictMode:
                return 'StrictMode';
            case exports.Suspense:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */ function createElement(type, config, children) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) key = '' + config.key;
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        } // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    /**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */ function cloneElement(element, config, children) {
        if (!!(element === null || element === undefined)) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName; // Original props are copied
        var props = _assign({
        }, element.props); // Reserved names are extracted
        var key = element.key;
        var ref = element.ref; // Self is preserved since the owner is preserved.
        var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
        // transpiler, and the original source is probably a better indicator of the
        // true owner.
        var source = element._source; // Owner will be preserved, unless ref is overridden
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                // Silently steal the ref from the parent.
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) key = '' + config.key;
             // Remaining properties override existing props
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) // Resolve default props
                props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        } // Children can be more than one argument, and those are transferred onto
        // the newly allocated props object.
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */ function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    /**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */ var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */ function getElementKey(element, index) {
        // Do some typechecking here since we call this blindly. We want to ensure
        // that we don't block potential future ES APIs.
        if (typeof element === 'object' && element !== null && element.key != null) // Explicit key
        return escape('' + element.key);
         // Implicit key determined by the index in the set
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') // All of the above are perceived as null.
        children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) mappedChild = cloneAndReplaceKey(mappedChild, // traverseAllChildren used to do for objects as children
                escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0; // Count of children found in the current subtree.
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = '' + children;
                throw Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead.");
            }
        }
        return subtreeCount;
    }
    /**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */ function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    /**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */ function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++; // Don't return anything
        });
        return n;
    }
    /**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */ function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments); // Don't return anything.
        }, forEachContext);
    }
    /**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */ function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    /**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */ function onlyChild(children) {
        if (!isValidElement(children)) throw Error("React.Children.only expected to receive a single React element child.");
        return children;
    }
    function createContext(defaultValue, calculateChangedBits) {
        if (calculateChangedBits === undefined) calculateChangedBits = null;
        else if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context,
            _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor(); // Transition to the next state.
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                    var defaultExport = moduleObject.default;
                    if (defaultExport === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = defaultExport;
                }
            }, function(error1) {
                if (payload._status === Pending) {
                    // Transition to the next state.
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error1;
                }
            });
        }
        if (payload._status === Resolved) return payload._result;
        else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes; // Match production behavior more closely:
                    // $FlowFixMe
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (render.displayName == null) render.displayName = name;
            }
        });
        return elementType;
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (type.displayName == null) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (!(dispatcher !== null)) throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context, unstable_observedBits) {
        var dispatcher = resolveDispatcher();
        if (unstable_observedBits !== undefined) error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : '');
         // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
            var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
            // and nobody should be using this in existing code.
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context, unstable_observedBits);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component1) {
        var prototype = Component1.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case exports.Suspense:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        } // Legacy hook: remove it
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    try {
        var frozenObject = Object.freeze({
        });
        /* eslint-disable no-new */ new Map([
            [
                frozenObject,
                null
            ]
        ]);
        new Set([
            frozenObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.PureComponent = PureComponent;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useEffect = useEffect;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.version = ReactVersion;
})();

},{"object-assign":"jzTFF"}],"jzTFF":[function(require,module,exports) {
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/ 'use strict';
/* eslint-disable no-unused-vars */ var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = "abc"; // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {
        };
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {
        };
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({
        }, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};

},{}],"1oXC5":[function(require,module,exports) {
typeof window !== "undefined" && (function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();
    else if (typeof define === 'function' && define.amd) define([], factory);
    else if (typeof exports === 'object') exports["Hls"] = factory();
    else root["Hls"] = factory();
})(this, function() {
    return(/******/ (function(modules) {
        /******/ // The module cache
        /******/ var installedModules = {
        };
        /******/ /******/ // The require function
        /******/ function __webpack_require__(moduleId) {
            /******/ /******/ // Check if module is in cache
            /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports;
            /******/ // Create a new module (and put it into the cache)
            /******/ var module = installedModules[moduleId] = {
                /******/ i: moduleId,
                /******/ l: false,
                /******/ exports: {
                }
            };
            /******/ /******/ // Execute the module function
            /******/ modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            /******/ /******/ // Flag the module as loaded
            /******/ module.l = true;
            /******/ /******/ // Return the exports of the module
            /******/ return module.exports;
        /******/ }
        /******/ /******/ /******/ // expose the modules object (__webpack_modules__)
        /******/ __webpack_require__.m = modules;
        /******/ /******/ // expose the module cache
        /******/ __webpack_require__.c = installedModules;
        /******/ /******/ // define getter function for harmony exports
        /******/ __webpack_require__.d = function(exports, name, getter) {
            /******/ if (!__webpack_require__.o(exports, name)) /******/ Object.defineProperty(exports, name, {
                enumerable: true,
                get: getter
            });
        /******/ };
        /******/ /******/ // define __esModule on exports
        /******/ __webpack_require__.r = function(exports) {
            /******/ if (typeof Symbol !== 'undefined' && Symbol.toStringTag) /******/ Object.defineProperty(exports, Symbol.toStringTag, {
                value: 'Module'
            });
            /******/ Object.defineProperty(exports, '__esModule', {
                value: true
            });
        /******/ };
        /******/ /******/ // create a fake namespace object
        /******/ // mode & 1: value is a module id, require it
        /******/ // mode & 2: merge all properties of value into the ns
        /******/ // mode & 4: return value when already ns object
        /******/ // mode & 8|1: behave like require
        /******/ __webpack_require__.t = function(value, mode) {
            /******/ if (mode & 1) value = __webpack_require__(value);
            /******/ if (mode & 8) return value;
            /******/ if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;
            /******/ var ns = Object.create(null);
            /******/ __webpack_require__.r(ns);
            /******/ Object.defineProperty(ns, 'default', {
                enumerable: true,
                value: value
            });
            /******/ if (mode & 2 && typeof value != 'string') for(var key in value)__webpack_require__.d(ns, key, (function(key1) {
                return value[key1];
            }).bind(null, key));
            /******/ return ns;
        /******/ };
        /******/ /******/ // getDefaultExport function for compatibility with non-harmony modules
        /******/ __webpack_require__.n = function(module) {
            /******/ var getter = module && module.__esModule ? /******/ function getDefault() {
                return module['default'];
            } : /******/ function getModuleExports() {
                return module;
            };
            /******/ __webpack_require__.d(getter, 'a', getter);
            /******/ return getter;
        /******/ };
        /******/ /******/ // Object.prototype.hasOwnProperty.call
        /******/ __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
        };
        /******/ /******/ // __webpack_public_path__
        /******/ __webpack_require__.p = "/dist/";
        /******/ /******/ /******/ // Load entry module and return exports
        /******/ return __webpack_require__(__webpack_require__.s = "./src/hls.ts");
    /******/ })({
        /***/ "./node_modules/eventemitter3/index.js": function(module, exports, __webpack_require__) {
            "use strict";
            var has = Object.prototype.hasOwnProperty, prefix = '~';
            /**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */ function Events() {
            }
            //
            // We try to not inherit from `Object.prototype`. In some engines creating an
            // instance in this way is faster than calling `Object.create(null)` directly.
            // If `Object.create(null)` is not supported we prefix the event names with a
            // character to make sure that the built-in object properties are not
            // overridden or used as an attack vector.
            //
            if (Object.create) {
                Events.prototype = Object.create(null);
                //
                // This hack is needed because the `__proto__` property is still inherited in
                // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
                //
                if (!new Events().__proto__) prefix = false;
            }
            /**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */ function EE(fn, context, once) {
                this.fn = fn;
                this.context = context;
                this.once = once || false;
            }
            /**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */ function addListener(emitter, event, fn, context, once) {
                if (typeof fn !== 'function') throw new TypeError('The listener must be a function');
                var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
                if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
                else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
                else emitter._events[evt] = [
                    emitter._events[evt],
                    listener
                ];
                return emitter;
            }
            /**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */ function clearEvent(emitter, evt) {
                if ((--emitter._eventsCount) === 0) emitter._events = new Events();
                else delete emitter._events[evt];
            }
            /**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */ function EventEmitter() {
                this._events = new Events();
                this._eventsCount = 0;
            }
            /**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */ EventEmitter.prototype.eventNames = function eventNames() {
                var names = [], events, name;
                if (this._eventsCount === 0) return names;
                for(name in events = this._events)if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
                if (Object.getOwnPropertySymbols) return names.concat(Object.getOwnPropertySymbols(events));
                return names;
            };
            /**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */ EventEmitter.prototype.listeners = function listeners(event) {
                var evt = prefix ? prefix + event : event, handlers = this._events[evt];
                if (!handlers) return [];
                if (handlers.fn) return [
                    handlers.fn
                ];
                for(var i = 0, l = handlers.length, ee = new Array(l); i < l; i++)ee[i] = handlers[i].fn;
                return ee;
            };
            /**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */ EventEmitter.prototype.listenerCount = function listenerCount(event) {
                var evt = prefix ? prefix + event : event, listeners1 = this._events[evt];
                if (!listeners1) return 0;
                if (listeners1.fn) return 1;
                return listeners1.length;
            };
            /**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */ EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
                var evt = prefix ? prefix + event : event;
                if (!this._events[evt]) return false;
                var listeners1 = this._events[evt], len = arguments.length, args, i;
                if (listeners1.fn) {
                    if (listeners1.once) this.removeListener(event, listeners1.fn, undefined, true);
                    switch(len){
                        case 1:
                            return listeners1.fn.call(listeners1.context), true;
                        case 2:
                            return listeners1.fn.call(listeners1.context, a1), true;
                        case 3:
                            return listeners1.fn.call(listeners1.context, a1, a2), true;
                        case 4:
                            return listeners1.fn.call(listeners1.context, a1, a2, a3), true;
                        case 5:
                            return listeners1.fn.call(listeners1.context, a1, a2, a3, a4), true;
                        case 6:
                            return listeners1.fn.call(listeners1.context, a1, a2, a3, a4, a5), true;
                    }
                    for(i = 1, args = new Array(len - 1); i < len; i++)args[i - 1] = arguments[i];
                    listeners1.fn.apply(listeners1.context, args);
                } else {
                    var length = listeners1.length, j;
                    for(i = 0; i < length; i++){
                        if (listeners1[i].once) this.removeListener(event, listeners1[i].fn, undefined, true);
                        switch(len){
                            case 1:
                                listeners1[i].fn.call(listeners1[i].context);
                                break;
                            case 2:
                                listeners1[i].fn.call(listeners1[i].context, a1);
                                break;
                            case 3:
                                listeners1[i].fn.call(listeners1[i].context, a1, a2);
                                break;
                            case 4:
                                listeners1[i].fn.call(listeners1[i].context, a1, a2, a3);
                                break;
                            default:
                                if (!args) for(j = 1, args = new Array(len - 1); j < len; j++)args[j - 1] = arguments[j];
                                listeners1[i].fn.apply(listeners1[i].context, args);
                        }
                    }
                }
                return true;
            };
            /**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.on = function on(event, fn, context) {
                return addListener(this, event, fn, context, false);
            };
            /**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.once = function once(event, fn, context) {
                return addListener(this, event, fn, context, true);
            };
            /**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once1) {
                var evt = prefix ? prefix + event : event;
                if (!this._events[evt]) return this;
                if (!fn) {
                    clearEvent(this, evt);
                    return this;
                }
                var listeners1 = this._events[evt];
                if (listeners1.fn) {
                    if (listeners1.fn === fn && (!once1 || listeners1.once) && (!context || listeners1.context === context)) clearEvent(this, evt);
                } else {
                    for(var i = 0, events = [], length = listeners1.length; i < length; i++)if (listeners1[i].fn !== fn || once1 && !listeners1[i].once || context && listeners1[i].context !== context) events.push(listeners1[i]);
                    //
                    // Reset the array, or remove it completely if we have no more listeners.
                    //
                    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
                    else clearEvent(this, evt);
                }
                return this;
            };
            /**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */ EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
                var evt;
                if (event) {
                    evt = prefix ? prefix + event : event;
                    if (this._events[evt]) clearEvent(this, evt);
                } else {
                    this._events = new Events();
                    this._eventsCount = 0;
                }
                return this;
            };
            //
            // Alias methods names because people roll like that.
            //
            EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
            EventEmitter.prototype.addListener = EventEmitter.prototype.on;
            //
            // Expose the prefix.
            //
            EventEmitter.prefixed = prefix;
            //
            // Allow `EventEmitter` to be imported as module namespace.
            //
            EventEmitter.EventEmitter = EventEmitter;
            module.exports = EventEmitter;
        /***/ },
        /***/ "./node_modules/url-toolkit/src/url-toolkit.js": function(module, exports, __webpack_require__) {
            // see https://tools.ietf.org/html/rfc1808
            (function(root) {
                var URL_REGEX = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/?#]*\/)*[^;?#]*)?(;[^?#]*)?(\?[^#]*)?(#.*)?$/;
                var FIRST_SEGMENT_REGEX = /^([^\/?#]*)(.*)$/;
                var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
                var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/)[^\/]*(?=\/)/g;
                var URLToolkit = {
                    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
                    // E.g
                    // With opts.alwaysNormalize = false (default, spec compliant)
                    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
                    // With opts.alwaysNormalize = true (not spec compliant)
                    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
                    buildAbsoluteURL: function(baseURL, relativeURL, opts) {
                        opts = opts || {
                        };
                        // remove any remaining space and CRLF
                        baseURL = baseURL.trim();
                        relativeURL = relativeURL.trim();
                        if (!relativeURL) {
                            // 2a) If the embedded URL is entirely empty, it inherits the
                            // entire base URL (i.e., is set equal to the base URL)
                            // and we are done.
                            if (!opts.alwaysNormalize) return baseURL;
                            var basePartsForNormalise = URLToolkit.parseURL(baseURL);
                            if (!basePartsForNormalise) throw new Error('Error trying to parse base URL.');
                            basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);
                            return URLToolkit.buildURLFromParts(basePartsForNormalise);
                        }
                        var relativeParts = URLToolkit.parseURL(relativeURL);
                        if (!relativeParts) throw new Error('Error trying to parse relative URL.');
                        if (relativeParts.scheme) {
                            // 2b) If the embedded URL starts with a scheme name, it is
                            // interpreted as an absolute URL and we are done.
                            if (!opts.alwaysNormalize) return relativeURL;
                            relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
                            return URLToolkit.buildURLFromParts(relativeParts);
                        }
                        var baseParts = URLToolkit.parseURL(baseURL);
                        if (!baseParts) throw new Error('Error trying to parse base URL.');
                        if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {
                            // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
                            // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
                            var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
                            baseParts.netLoc = pathParts[1];
                            baseParts.path = pathParts[2];
                        }
                        if (baseParts.netLoc && !baseParts.path) baseParts.path = '/';
                        var builtParts = {
                            // 2c) Otherwise, the embedded URL inherits the scheme of
                            // the base URL.
                            scheme: baseParts.scheme,
                            netLoc: relativeParts.netLoc,
                            path: null,
                            params: relativeParts.params,
                            query: relativeParts.query,
                            fragment: relativeParts.fragment
                        };
                        if (!relativeParts.netLoc) {
                            // 3) If the embedded URL's <net_loc> is non-empty, we skip to
                            // Step 7.  Otherwise, the embedded URL inherits the <net_loc>
                            // (if any) of the base URL.
                            builtParts.netLoc = baseParts.netLoc;
                            // 4) If the embedded URL path is preceded by a slash "/", the
                            // path is not relative and we skip to Step 7.
                            if (relativeParts.path[0] !== '/') {
                                if (!relativeParts.path) {
                                    // 5) If the embedded URL path is empty (and not preceded by a
                                    // slash), then the embedded URL inherits the base URL path
                                    builtParts.path = baseParts.path;
                                    // 5a) if the embedded URL's <params> is non-empty, we skip to
                                    // step 7; otherwise, it inherits the <params> of the base
                                    // URL (if any) and
                                    if (!relativeParts.params) {
                                        builtParts.params = baseParts.params;
                                        // 5b) if the embedded URL's <query> is non-empty, we skip to
                                        // step 7; otherwise, it inherits the <query> of the base
                                        // URL (if any) and we skip to step 7.
                                        if (!relativeParts.query) builtParts.query = baseParts.query;
                                    }
                                } else {
                                    // 6) The last segment of the base URL's path (anything
                                    // following the rightmost slash "/", or the entire path if no
                                    // slash is present) is removed and the embedded URL's path is
                                    // appended in its place.
                                    var baseURLPath = baseParts.path;
                                    var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;
                                    builtParts.path = URLToolkit.normalizePath(newPath);
                                }
                            }
                        }
                        if (builtParts.path === null) builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
                        return URLToolkit.buildURLFromParts(builtParts);
                    },
                    parseURL: function(url) {
                        var parts = URL_REGEX.exec(url);
                        if (!parts) return null;
                        return {
                            scheme: parts[1] || '',
                            netLoc: parts[2] || '',
                            path: parts[3] || '',
                            params: parts[4] || '',
                            query: parts[5] || '',
                            fragment: parts[6] || ''
                        };
                    },
                    normalizePath: function(path) {
                        // The following operations are
                        // then applied, in order, to the new path:
                        // 6a) All occurrences of "./", where "." is a complete path
                        // segment, are removed.
                        // 6b) If the path ends with "." as a complete path segment,
                        // that "." is removed.
                        path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');
                        // 6c) All occurrences of "<segment>/../", where <segment> is a
                        // complete path segment not equal to "..", are removed.
                        // Removal of these path segments is performed iteratively,
                        // removing the leftmost matching pattern on each iteration,
                        // until no matching pattern remains.
                        // 6d) If the path ends with "<segment>/..", where <segment> is a
                        // complete path segment not equal to "..", that
                        // "<segment>/.." is removed.
                        while(path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length);
                        return path.split('').reverse().join('');
                    },
                    buildURLFromParts: function(parts) {
                        return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
                    }
                };
                module.exports = URLToolkit;
            })(this);
        /***/ },
        /***/ "./node_modules/webworkify-webpack/index.js": function(module, exports, __webpack_require__) {
            function webpackBootstrapFunc(modules) {
                /******/ // The module cache
                /******/ var installedModules = {
                };
                /******/ // The require function
                /******/ function __webpack_require__1(moduleId) {
                    /******/ // Check if module is in cache
                    /******/ if (installedModules[moduleId]) /******/ return installedModules[moduleId].exports;
                    /******/ // Create a new module (and put it into the cache)
                    /******/ var module1 = installedModules[moduleId] = {
                        /******/ i: moduleId,
                        /******/ l: false,
                        /******/ exports: {
                        }
                    };
                    /******/ // Execute the module function
                    /******/ modules[moduleId].call(module1.exports, module1, module1.exports, __webpack_require__1);
                    /******/ // Flag the module as loaded
                    /******/ module1.l = true;
                    /******/ // Return the exports of the module
                    /******/ return module1.exports;
                /******/ }
                /******/ // expose the modules object (__webpack_modules__)
                /******/ __webpack_require__1.m = modules;
                /******/ // expose the module cache
                /******/ __webpack_require__1.c = installedModules;
                /******/ // identity function for calling harmony imports with the correct context
                /******/ __webpack_require__1.i = function(value) {
                    return value;
                };
                /******/ // define getter function for harmony exports
                /******/ __webpack_require__1.d = function(exports1, name, getter) {
                    /******/ if (!__webpack_require__1.o(exports1, name)) /******/ Object.defineProperty(exports1, name, {
                        /******/ configurable: false,
                        /******/ enumerable: true,
                        /******/ get: getter
                    });
                /******/ };
                /******/ // define __esModule on exports
                /******/ __webpack_require__1.r = function(exports1) {
                    /******/ Object.defineProperty(exports1, '__esModule', {
                        value: true
                    });
                /******/ };
                /******/ // getDefaultExport function for compatibility with non-harmony modules
                /******/ __webpack_require__1.n = function(module1) {
                    /******/ var getter = module1 && module1.__esModule ? /******/ function getDefault() {
                        return module1['default'];
                    } : /******/ function getModuleExports() {
                        return module1;
                    };
                    /******/ __webpack_require__1.d(getter, 'a', getter);
                    /******/ return getter;
                /******/ };
                /******/ // Object.prototype.hasOwnProperty.call
                /******/ __webpack_require__1.o = function(object, property) {
                    return Object.prototype.hasOwnProperty.call(object, property);
                };
                /******/ // __webpack_public_path__
                /******/ __webpack_require__1.p = "/";
                /******/ // on error function for async loading
                /******/ __webpack_require__1.oe = function(err) {
                    console.error(err);
                    throw err;
                };
                var f = __webpack_require__1(__webpack_require__1.s = ENTRY_MODULE);
                return f.default || f // try to call default if defined to also support babel esmodule exports
                ;
            }
            var moduleNameReqExp = '[\\.|\\-|\\+|\\w|\/|@]+';
            var dependencyRegExp = '\\(\\s*(\/\\*.*?\\*\/)?\\s*.*?(' + moduleNameReqExp + ').*?\\)' // additional chars when output.pathinfo is true
            ;
            // http://stackoverflow.com/a/2593661/130442
            function quoteRegExp(str) {
                return (str + '').replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
            }
            function isNumeric(n) {
                return !isNaN(1 * n); // 1 * n converts integers, integers as string ("123"), 1e3 and "1e3" to integers and strings to NaN
            }
            function getModuleDependencies(sources, module1, queueName) {
                var retval = {
                };
                retval[queueName] = [];
                var fnString = module1.toString();
                var wrapperSignature = fnString.match(/^function\s?\w*\(\w+,\s*\w+,\s*(\w+)\)/);
                if (!wrapperSignature) return retval;
                var webpackRequireName = wrapperSignature[1];
                // main bundle deps
                var re = new RegExp('(\\\\n|\\W)' + quoteRegExp(webpackRequireName) + dependencyRegExp, 'g');
                var match;
                while(match = re.exec(fnString)){
                    if (match[3] === 'dll-reference') continue;
                    retval[queueName].push(match[3]);
                }
                // dll deps
                re = new RegExp('\\(' + quoteRegExp(webpackRequireName) + '\\("(dll-reference\\s(' + moduleNameReqExp + '))"\\)\\)' + dependencyRegExp, 'g');
                while(match = re.exec(fnString)){
                    if (!sources[match[2]]) {
                        retval[queueName].push(match[1]);
                        sources[match[2]] = __webpack_require__(match[1]).m;
                    }
                    retval[match[2]] = retval[match[2]] || [];
                    retval[match[2]].push(match[4]);
                }
                // convert 1e3 back to 1000 - this can be important after uglify-js converted 1000 to 1e3
                var keys = Object.keys(retval);
                for(var i = 0; i < keys.length; i++){
                    for(var j = 0; j < retval[keys[i]].length; j++)if (isNumeric(retval[keys[i]][j])) retval[keys[i]][j] = 1 * retval[keys[i]][j];
                }
                return retval;
            }
            function hasValuesInQueues(queues) {
                var keys = Object.keys(queues);
                return keys.reduce(function(hasValues, key) {
                    return hasValues || queues[key].length > 0;
                }, false);
            }
            function getRequiredModules(sources, moduleId) {
                var modulesQueue = {
                    main: [
                        moduleId
                    ]
                };
                var requiredModules = {
                    main: []
                };
                var seenModules = {
                    main: {
                    }
                };
                while(hasValuesInQueues(modulesQueue)){
                    var queues = Object.keys(modulesQueue);
                    for(var i = 0; i < queues.length; i++){
                        var queueName = queues[i];
                        var queue = modulesQueue[queueName];
                        var moduleToCheck = queue.pop();
                        seenModules[queueName] = seenModules[queueName] || {
                        };
                        if (seenModules[queueName][moduleToCheck] || !sources[queueName][moduleToCheck]) continue;
                        seenModules[queueName][moduleToCheck] = true;
                        requiredModules[queueName] = requiredModules[queueName] || [];
                        requiredModules[queueName].push(moduleToCheck);
                        var newModules = getModuleDependencies(sources, sources[queueName][moduleToCheck], queueName);
                        var newModulesKeys = Object.keys(newModules);
                        for(var j = 0; j < newModulesKeys.length; j++){
                            modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]] || [];
                            modulesQueue[newModulesKeys[j]] = modulesQueue[newModulesKeys[j]].concat(newModules[newModulesKeys[j]]);
                        }
                    }
                }
                return requiredModules;
            }
            module.exports = function(moduleId, options) {
                options = options || {
                };
                var sources = {
                    main: __webpack_require__.m
                };
                var requiredModules = options.all ? {
                    main: Object.keys(sources.main)
                } : getRequiredModules(sources, moduleId);
                var src = '';
                Object.keys(requiredModules).filter(function(m) {
                    return m !== 'main';
                }).forEach(function(module1) {
                    var entryModule = 0;
                    while(requiredModules[module1][entryModule])entryModule++;
                    requiredModules[module1].push(entryModule);
                    sources[module1][entryModule] = '(function(module, exports, __webpack_require__) { module.exports = __webpack_require__; })';
                    src = src + 'var ' + module1 + ' = (' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(entryModule)) + ')({' + requiredModules[module1].map(function(id) {
                        return '' + JSON.stringify(id) + ': ' + sources[module1][id].toString();
                    }).join(',') + '});\n';
                });
                src = src + 'new ((' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.main.map(function(id) {
                    return '' + JSON.stringify(id) + ': ' + sources.main[id].toString();
                }).join(',') + '}))(self);';
                var blob = new window.Blob([
                    src
                ], {
                    type: 'text/javascript'
                });
                if (options.bare) return blob;
                var URL1 = window.URL || window.webkitURL || window.mozURL || window.msURL;
                var workerUrl = URL1.createObjectURL(blob);
                var worker = new window.Worker(workerUrl);
                worker.objectURL = workerUrl;
                return worker;
            };
        /***/ },
        /***/ "./src/crypt/decrypter.js": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            // ESM COMPAT FLAG
            __webpack_require__.r(__webpack_exports__);
            // CONCATENATED MODULE: ./src/crypt/aes-crypto.js
            var AESCrypto = /*#__PURE__*/ function() {
                function AESCrypto1(subtle, iv) {
                    this.subtle = subtle;
                    this.aesIV = iv;
                }
                var _proto = AESCrypto1.prototype;
                _proto.decrypt = function decrypt(data, key) {
                    return this.subtle.decrypt({
                        name: 'AES-CBC',
                        iv: this.aesIV
                    }, key, data);
                };
                return AESCrypto1;
            }();
            // CONCATENATED MODULE: ./src/crypt/fast-aes-key.js
            var FastAESKey = /*#__PURE__*/ function() {
                function FastAESKey1(subtle, key) {
                    this.subtle = subtle;
                    this.key = key;
                }
                var _proto = FastAESKey1.prototype;
                _proto.expandKey = function expandKey() {
                    return this.subtle.importKey('raw', this.key, {
                        name: 'AES-CBC'
                    }, false, [
                        'encrypt',
                        'decrypt'
                    ]);
                };
                return FastAESKey1;
            }();
            /* harmony default export */ var fast_aes_key = FastAESKey;
            // CONCATENATED MODULE: ./src/crypt/aes-decryptor.js
            // PKCS7
            function removePadding(buffer) {
                var outputBytes = buffer.byteLength;
                var paddingBytes = outputBytes && new DataView(buffer).getUint8(outputBytes - 1);
                if (paddingBytes) return buffer.slice(0, outputBytes - paddingBytes);
                else return buffer;
            }
            var AESDecryptor = /*#__PURE__*/ function() {
                function AESDecryptor1() {
                    // Static after running initTable
                    this.rcon = [
                        0,
                        1,
                        2,
                        4,
                        8,
                        16,
                        32,
                        64,
                        128,
                        27,
                        54
                    ];
                    this.subMix = [
                        new Uint32Array(256),
                        new Uint32Array(256),
                        new Uint32Array(256),
                        new Uint32Array(256)
                    ];
                    this.invSubMix = [
                        new Uint32Array(256),
                        new Uint32Array(256),
                        new Uint32Array(256),
                        new Uint32Array(256)
                    ];
                    this.sBox = new Uint32Array(256);
                    this.invSBox = new Uint32Array(256); // Changes during runtime
                    this.key = new Uint32Array(0);
                    this.initTable();
                } // Using view.getUint32() also swaps the byte order.
                var _proto = AESDecryptor1.prototype;
                _proto.uint8ArrayToUint32Array_ = function uint8ArrayToUint32Array_(arrayBuffer) {
                    var view = new DataView(arrayBuffer);
                    var newArray = new Uint32Array(4);
                    for(var i = 0; i < 4; i++)newArray[i] = view.getUint32(i * 4);
                    return newArray;
                };
                _proto.initTable = function initTable() {
                    var sBox = this.sBox;
                    var invSBox = this.invSBox;
                    var subMix = this.subMix;
                    var subMix0 = subMix[0];
                    var subMix1 = subMix[1];
                    var subMix2 = subMix[2];
                    var subMix3 = subMix[3];
                    var invSubMix = this.invSubMix;
                    var invSubMix0 = invSubMix[0];
                    var invSubMix1 = invSubMix[1];
                    var invSubMix2 = invSubMix[2];
                    var invSubMix3 = invSubMix[3];
                    var d = new Uint32Array(256);
                    var x = 0;
                    var xi = 0;
                    var i = 0;
                    for(i = 0; i < 256; i++)if (i < 128) d[i] = i << 1;
                    else d[i] = i << 1 ^ 283;
                    for(i = 0; i < 256; i++){
                        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
                        sx = sx >>> 8 ^ sx & 255 ^ 99;
                        sBox[x] = sx;
                        invSBox[sx] = x; // Compute multiplication
                        var x2 = d[x];
                        var x4 = d[x2];
                        var x8 = d[x4]; // Compute sub/invSub bytes, mix columns tables
                        var t = d[sx] * 257 ^ sx * 16843008;
                        subMix0[x] = t << 24 | t >>> 8;
                        subMix1[x] = t << 16 | t >>> 16;
                        subMix2[x] = t << 8 | t >>> 24;
                        subMix3[x] = t; // Compute inv sub bytes, inv mix columns tables
                        t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
                        invSubMix0[sx] = t << 24 | t >>> 8;
                        invSubMix1[sx] = t << 16 | t >>> 16;
                        invSubMix2[sx] = t << 8 | t >>> 24;
                        invSubMix3[sx] = t; // Compute next counter
                        if (!x) x = xi = 1;
                        else {
                            x = x2 ^ d[d[d[x8 ^ x2]]];
                            xi ^= d[d[xi]];
                        }
                    }
                };
                _proto.expandKey = function expandKey(keyBuffer) {
                    // convert keyBuffer to Uint32Array
                    var key = this.uint8ArrayToUint32Array_(keyBuffer);
                    var sameKey = true;
                    var offset = 0;
                    while(offset < key.length && sameKey){
                        sameKey = key[offset] === this.key[offset];
                        offset++;
                    }
                    if (sameKey) return;
                    this.key = key;
                    var keySize = this.keySize = key.length;
                    if (keySize !== 4 && keySize !== 6 && keySize !== 8) throw new Error('Invalid aes key size=' + keySize);
                    var ksRows = this.ksRows = (keySize + 6 + 1) * 4;
                    var ksRow;
                    var invKsRow;
                    var keySchedule = this.keySchedule = new Uint32Array(ksRows);
                    var invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);
                    var sbox = this.sBox;
                    var rcon = this.rcon;
                    var invSubMix = this.invSubMix;
                    var invSubMix0 = invSubMix[0];
                    var invSubMix1 = invSubMix[1];
                    var invSubMix2 = invSubMix[2];
                    var invSubMix3 = invSubMix[3];
                    var prev;
                    var t;
                    for(ksRow = 0; ksRow < ksRows; ksRow++){
                        if (ksRow < keySize) {
                            prev = keySchedule[ksRow] = key[ksRow];
                            continue;
                        }
                        t = prev;
                        if (ksRow % keySize === 0) {
                            // Rot word
                            t = t << 8 | t >>> 24; // Sub word
                            t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 255] << 16 | sbox[t >>> 8 & 255] << 8 | sbox[t & 255]; // Mix Rcon
                            t ^= rcon[ksRow / keySize | 0] << 24;
                        } else if (keySize > 6 && ksRow % keySize === 4) // Sub word
                        t = sbox[t >>> 24] << 24 | sbox[t >>> 16 & 255] << 16 | sbox[t >>> 8 & 255] << 8 | sbox[t & 255];
                        keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;
                    }
                    for(invKsRow = 0; invKsRow < ksRows; invKsRow++){
                        ksRow = ksRows - invKsRow;
                        if (invKsRow & 3) t = keySchedule[ksRow];
                        else t = keySchedule[ksRow - 4];
                        if (invKsRow < 4 || ksRow <= 4) invKeySchedule[invKsRow] = t;
                        else invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[t >>> 16 & 255]] ^ invSubMix2[sbox[t >>> 8 & 255]] ^ invSubMix3[sbox[t & 255]];
                        invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;
                    }
                } // Adding this as a method greatly improves performance.
                ;
                _proto.networkToHostOrderSwap = function networkToHostOrderSwap(word) {
                    return word << 24 | (word & 65280) << 8 | (word & 16711680) >> 8 | word >>> 24;
                };
                _proto.decrypt = function decrypt(inputArrayBuffer, offset, aesIV, removePKCS7Padding) {
                    var nRounds = this.keySize + 6;
                    var invKeySchedule = this.invKeySchedule;
                    var invSBOX = this.invSBox;
                    var invSubMix = this.invSubMix;
                    var invSubMix0 = invSubMix[0];
                    var invSubMix1 = invSubMix[1];
                    var invSubMix2 = invSubMix[2];
                    var invSubMix3 = invSubMix[3];
                    var initVector = this.uint8ArrayToUint32Array_(aesIV);
                    var initVector0 = initVector[0];
                    var initVector1 = initVector[1];
                    var initVector2 = initVector[2];
                    var initVector3 = initVector[3];
                    var inputInt32 = new Int32Array(inputArrayBuffer);
                    var outputInt32 = new Int32Array(inputInt32.length);
                    var t0, t1, t2, t3;
                    var s0, s1, s2, s3;
                    var inputWords0, inputWords1, inputWords2, inputWords3;
                    var ksRow, i;
                    var swapWord = this.networkToHostOrderSwap;
                    while(offset < inputInt32.length){
                        inputWords0 = swapWord(inputInt32[offset]);
                        inputWords1 = swapWord(inputInt32[offset + 1]);
                        inputWords2 = swapWord(inputInt32[offset + 2]);
                        inputWords3 = swapWord(inputInt32[offset + 3]);
                        s0 = inputWords0 ^ invKeySchedule[0];
                        s1 = inputWords3 ^ invKeySchedule[1];
                        s2 = inputWords2 ^ invKeySchedule[2];
                        s3 = inputWords1 ^ invKeySchedule[3];
                        ksRow = 4; // Iterate through the rounds of decryption
                        for(i = 1; i < nRounds; i++){
                            t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[s1 >> 16 & 255] ^ invSubMix2[s2 >> 8 & 255] ^ invSubMix3[s3 & 255] ^ invKeySchedule[ksRow];
                            t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[s2 >> 16 & 255] ^ invSubMix2[s3 >> 8 & 255] ^ invSubMix3[s0 & 255] ^ invKeySchedule[ksRow + 1];
                            t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[s3 >> 16 & 255] ^ invSubMix2[s0 >> 8 & 255] ^ invSubMix3[s1 & 255] ^ invKeySchedule[ksRow + 2];
                            t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[s0 >> 16 & 255] ^ invSubMix2[s1 >> 8 & 255] ^ invSubMix3[s2 & 255] ^ invKeySchedule[ksRow + 3]; // Update state
                            s0 = t0;
                            s1 = t1;
                            s2 = t2;
                            s3 = t3;
                            ksRow = ksRow + 4;
                        } // Shift rows, sub bytes, add round key
                        t0 = invSBOX[s0 >>> 24] << 24 ^ invSBOX[s1 >> 16 & 255] << 16 ^ invSBOX[s2 >> 8 & 255] << 8 ^ invSBOX[s3 & 255] ^ invKeySchedule[ksRow];
                        t1 = invSBOX[s1 >>> 24] << 24 ^ invSBOX[s2 >> 16 & 255] << 16 ^ invSBOX[s3 >> 8 & 255] << 8 ^ invSBOX[s0 & 255] ^ invKeySchedule[ksRow + 1];
                        t2 = invSBOX[s2 >>> 24] << 24 ^ invSBOX[s3 >> 16 & 255] << 16 ^ invSBOX[s0 >> 8 & 255] << 8 ^ invSBOX[s1 & 255] ^ invKeySchedule[ksRow + 2];
                        t3 = invSBOX[s3 >>> 24] << 24 ^ invSBOX[s0 >> 16 & 255] << 16 ^ invSBOX[s1 >> 8 & 255] << 8 ^ invSBOX[s2 & 255] ^ invKeySchedule[ksRow + 3];
                        ksRow = ksRow + 3; // Write
                        outputInt32[offset] = swapWord(t0 ^ initVector0);
                        outputInt32[offset + 1] = swapWord(t3 ^ initVector1);
                        outputInt32[offset + 2] = swapWord(t2 ^ initVector2);
                        outputInt32[offset + 3] = swapWord(t1 ^ initVector3); // reset initVector to last 4 unsigned int
                        initVector0 = inputWords0;
                        initVector1 = inputWords1;
                        initVector2 = inputWords2;
                        initVector3 = inputWords3;
                        offset = offset + 4;
                    }
                    return removePKCS7Padding ? removePadding(outputInt32.buffer) : outputInt32.buffer;
                };
                _proto.destroy = function destroy() {
                    this.key = undefined;
                    this.keySize = undefined;
                    this.ksRows = undefined;
                    this.sBox = undefined;
                    this.invSBox = undefined;
                    this.subMix = undefined;
                    this.invSubMix = undefined;
                    this.keySchedule = undefined;
                    this.invKeySchedule = undefined;
                    this.rcon = undefined;
                };
                return AESDecryptor1;
            }();
            /* harmony default export */ var aes_decryptor = AESDecryptor;
            // EXTERNAL MODULE: ./src/errors.ts
            var errors = __webpack_require__("./src/errors.ts");
            // EXTERNAL MODULE: ./src/utils/logger.js
            var logger = __webpack_require__("./src/utils/logger.js");
            // EXTERNAL MODULE: ./src/events.js
            var events = __webpack_require__("./src/events.js");
            // EXTERNAL MODULE: ./src/utils/get-self-scope.js
            var get_self_scope = __webpack_require__("./src/utils/get-self-scope.js");
            // CONCATENATED MODULE: ./src/crypt/decrypter.js
            // see https://stackoverflow.com/a/11237259/589493
            var global = Object(get_self_scope["getSelfScope"])(); // safeguard for code that might run both on worker and main thread
            var decrypter_Decrypter = /*#__PURE__*/ function() {
                function Decrypter(observer, config, _temp) {
                    var _ref = _temp === void 0 ? {
                    } : _temp, _ref$removePKCS7Paddi = _ref.removePKCS7Padding, removePKCS7Padding = _ref$removePKCS7Paddi === void 0 ? true : _ref$removePKCS7Paddi;
                    this.logEnabled = true;
                    this.observer = observer;
                    this.config = config;
                    this.removePKCS7Padding = removePKCS7Padding; // built in decryptor expects PKCS7 padding
                    if (removePKCS7Padding) try {
                        var browserCrypto = global.crypto;
                        if (browserCrypto) this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;
                    } catch (e) {
                    }
                    this.disableWebCrypto = !this.subtle;
                }
                var _proto = Decrypter.prototype;
                _proto.isSync = function isSync() {
                    return this.disableWebCrypto && this.config.enableSoftwareAES;
                };
                _proto.decrypt = function decrypt(data, key, iv, callback) {
                    var _this = this;
                    if (this.disableWebCrypto && this.config.enableSoftwareAES) {
                        if (this.logEnabled) {
                            logger["logger"].log('JS AES decrypt');
                            this.logEnabled = false;
                        }
                        var decryptor = this.decryptor;
                        if (!decryptor) this.decryptor = decryptor = new aes_decryptor();
                        decryptor.expandKey(key);
                        callback(decryptor.decrypt(data, 0, iv, this.removePKCS7Padding));
                    } else {
                        if (this.logEnabled) {
                            logger["logger"].log('WebCrypto AES decrypt');
                            this.logEnabled = false;
                        }
                        var subtle = this.subtle;
                        if (this.key !== key) {
                            this.key = key;
                            this.fastAesKey = new fast_aes_key(subtle, key);
                        }
                        this.fastAesKey.expandKey().then(function(aesKey) {
                            // decrypt using web crypto
                            var crypto = new AESCrypto(subtle, iv);
                            crypto.decrypt(data, aesKey).catch(function(err) {
                                _this.onWebCryptoError(err, data, key, iv, callback);
                            }).then(function(result) {
                                callback(result);
                            });
                        }).catch(function(err) {
                            _this.onWebCryptoError(err, data, key, iv, callback);
                        });
                    }
                };
                _proto.onWebCryptoError = function onWebCryptoError(err, data, key, iv, callback) {
                    if (this.config.enableSoftwareAES) {
                        logger["logger"].log('WebCrypto Error, disable WebCrypto API');
                        this.disableWebCrypto = true;
                        this.logEnabled = true;
                        this.decrypt(data, key, iv, callback);
                    } else {
                        logger["logger"].error("decrypting error : " + err.message);
                        this.observer.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].MEDIA_ERROR,
                            details: errors["ErrorDetails"].FRAG_DECRYPT_ERROR,
                            fatal: true,
                            reason: err.message
                        });
                    }
                };
                _proto.destroy = function destroy() {
                    var decryptor = this.decryptor;
                    if (decryptor) {
                        decryptor.destroy();
                        this.decryptor = undefined;
                    }
                };
                return Decrypter;
            }();
            /* harmony default export */ var decrypter = __webpack_exports__["default"] = decrypter_Decrypter;
        /***/ },
        /***/ "./src/demux/demuxer-inline.js": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            // ESM COMPAT FLAG
            __webpack_require__.r(__webpack_exports__);
            // EXTERNAL MODULE: ./src/events.js
            var events = __webpack_require__("./src/events.js");
            // EXTERNAL MODULE: ./src/errors.ts
            var errors = __webpack_require__("./src/errors.ts");
            // EXTERNAL MODULE: ./src/crypt/decrypter.js + 3 modules
            var crypt_decrypter = __webpack_require__("./src/crypt/decrypter.js");
            // EXTERNAL MODULE: ./src/polyfills/number.js
            var number = __webpack_require__("./src/polyfills/number.js");
            // EXTERNAL MODULE: ./src/utils/logger.js
            var logger = __webpack_require__("./src/utils/logger.js");
            // EXTERNAL MODULE: ./src/utils/get-self-scope.js
            var get_self_scope = __webpack_require__("./src/utils/get-self-scope.js");
            // CONCATENATED MODULE: ./src/demux/adts.js
            /**
 * ADTS parser helper
 * @link https://wiki.multimedia.cx/index.php?title=ADTS
 */ function getAudioConfig(observer, data, offset, audioCodec) {
                var adtsObjectType, // :int
                adtsSampleingIndex, // :int
                adtsExtensionSampleingIndex, // :int
                adtsChanelConfig, // :int
                config, userAgent = navigator.userAgent.toLowerCase(), manifestCodec = audioCodec, adtsSampleingRates = [
                    96000,
                    88200,
                    64000,
                    48000,
                    44100,
                    32000,
                    24000,
                    22050,
                    16000,
                    12000,
                    11025,
                    8000,
                    7350
                ]; // byte 2
                adtsObjectType = ((data[offset + 2] & 192) >>> 6) + 1;
                adtsSampleingIndex = (data[offset + 2] & 60) >>> 2;
                if (adtsSampleingIndex > adtsSampleingRates.length - 1) {
                    observer.trigger(events["default"].ERROR, {
                        type: errors["ErrorTypes"].MEDIA_ERROR,
                        details: errors["ErrorDetails"].FRAG_PARSING_ERROR,
                        fatal: true,
                        reason: "invalid ADTS sampling index:" + adtsSampleingIndex
                    });
                    return;
                }
                adtsChanelConfig = (data[offset + 2] & 1) << 2; // byte 3
                adtsChanelConfig |= (data[offset + 3] & 192) >>> 6;
                logger["logger"].log("manifest codec:" + audioCodec + ",ADTS data:type:" + adtsObjectType + ",sampleingIndex:" + adtsSampleingIndex + "[" + adtsSampleingRates[adtsSampleingIndex] + "Hz],channelConfig:" + adtsChanelConfig); // firefox: freq less than 24kHz = AAC SBR (HE-AAC)
                if (/firefox/i.test(userAgent)) {
                    if (adtsSampleingIndex >= 6) {
                        adtsObjectType = 5;
                        config = new Array(4); // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
                        // there is a factor 2 between frame sample rate and output sample rate
                        // multiply frequency by 2 (see table below, equivalent to substract 3)
                        adtsExtensionSampleingIndex = adtsSampleingIndex - 3;
                    } else {
                        adtsObjectType = 2;
                        config = new Array(2);
                        adtsExtensionSampleingIndex = adtsSampleingIndex;
                    } // Android : always use AAC
                } else if (userAgent.indexOf('android') !== -1) {
                    adtsObjectType = 2;
                    config = new Array(2);
                    adtsExtensionSampleingIndex = adtsSampleingIndex;
                } else {
                    /*  for other browsers (Chrome/Vivaldi/Opera ...)
        always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)
    */ adtsObjectType = 5;
                    config = new Array(4); // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)
                    if (audioCodec && (audioCodec.indexOf('mp4a.40.29') !== -1 || audioCodec.indexOf('mp4a.40.5') !== -1) || !audioCodec && adtsSampleingIndex >= 6) // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies
                    // there is a factor 2 between frame sample rate and output sample rate
                    // multiply frequency by 2 (see table below, equivalent to substract 3)
                    adtsExtensionSampleingIndex = adtsSampleingIndex - 3;
                    else {
                        // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)
                        // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.
                        if (audioCodec && audioCodec.indexOf('mp4a.40.2') !== -1 && (adtsSampleingIndex >= 6 && adtsChanelConfig === 1 || /vivaldi/i.test(userAgent)) || !audioCodec && adtsChanelConfig === 1) {
                            adtsObjectType = 2;
                            config = new Array(2);
                        }
                        adtsExtensionSampleingIndex = adtsSampleingIndex;
                    }
                }
                /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config
      ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()
    Audio Profile / Audio Object Type
    0: Null
    1: AAC Main
    2: AAC LC (Low Complexity)
    3: AAC SSR (Scalable Sample Rate)
    4: AAC LTP (Long Term Prediction)
    5: SBR (Spectral Band Replication)
    6: AAC Scalable
   sampling freq
    0: 96000 Hz
    1: 88200 Hz
    2: 64000 Hz
    3: 48000 Hz
    4: 44100 Hz
    5: 32000 Hz
    6: 24000 Hz
    7: 22050 Hz
    8: 16000 Hz
    9: 12000 Hz
    10: 11025 Hz
    11: 8000 Hz
    12: 7350 Hz
    13: Reserved
    14: Reserved
    15: frequency is written explictly
    Channel Configurations
    These are the channel configurations:
    0: Defined in AOT Specifc Config
    1: 1 channel: front-center
    2: 2 channels: front-left, front-right
  */ // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1
                config[0] = adtsObjectType << 3; // samplingFrequencyIndex
                config[0] |= (adtsSampleingIndex & 14) >> 1;
                config[1] |= (adtsSampleingIndex & 1) << 7; // channelConfiguration
                config[1] |= adtsChanelConfig << 3;
                if (adtsObjectType === 5) {
                    // adtsExtensionSampleingIndex
                    config[1] |= (adtsExtensionSampleingIndex & 14) >> 1;
                    config[2] = (adtsExtensionSampleingIndex & 1) << 7; // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???
                    //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc
                    config[2] |= 8;
                    config[3] = 0;
                }
                return {
                    config: config,
                    samplerate: adtsSampleingRates[adtsSampleingIndex],
                    channelCount: adtsChanelConfig,
                    codec: 'mp4a.40.' + adtsObjectType,
                    manifestCodec: manifestCodec
                };
            }
            function isHeaderPattern(data, offset) {
                return data[offset] === 255 && (data[offset + 1] & 246) === 240;
            }
            function getHeaderLength(data, offset) {
                return data[offset + 1] & 1 ? 7 : 9;
            }
            function getFullFrameLength(data, offset) {
                return (data[offset + 3] & 3) << 11 | data[offset + 4] << 3 | (data[offset + 5] & 224) >>> 5;
            }
            function isHeader(data, offset) {
                // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
                // Layer bits (position 14 and 15) in header should be always 0 for ADTS
                // More info https://wiki.multimedia.cx/index.php?title=ADTS
                if (offset + 1 < data.length && isHeaderPattern(data, offset)) return true;
                return false;
            }
            function adts_probe(data, offset) {
                // same as isHeader but we also check that ADTS frame follows last ADTS frame
                // or end of data is reached
                if (isHeader(data, offset)) {
                    // ADTS header Length
                    var headerLength = getHeaderLength(data, offset);
                    if (offset + headerLength >= data.length) return false;
                     // ADTS frame Length
                    var frameLength = getFullFrameLength(data, offset);
                    if (frameLength <= headerLength) return false;
                    var newOffset = offset + frameLength;
                    if (newOffset === data.length || newOffset + 1 < data.length && isHeaderPattern(data, newOffset)) return true;
                }
                return false;
            }
            function initTrackConfig(track, observer, data, offset, audioCodec) {
                if (!track.samplerate) {
                    var config = getAudioConfig(observer, data, offset, audioCodec);
                    track.config = config.config;
                    track.samplerate = config.samplerate;
                    track.channelCount = config.channelCount;
                    track.codec = config.codec;
                    track.manifestCodec = config.manifestCodec;
                    logger["logger"].log("parsed codec:" + track.codec + ",rate:" + config.samplerate + ",nb channel:" + config.channelCount);
                }
            }
            function getFrameDuration(samplerate) {
                return 92160000 / samplerate;
            }
            function parseFrameHeader(data, offset, pts, frameIndex, frameDuration) {
                var headerLength, frameLength, stamp;
                var length = data.length; // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header
                headerLength = getHeaderLength(data, offset); // retrieve frame size
                frameLength = getFullFrameLength(data, offset);
                frameLength -= headerLength;
                if (frameLength > 0 && offset + headerLength + frameLength <= length) {
                    stamp = pts + frameIndex * frameDuration; // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);
                    return {
                        headerLength: headerLength,
                        frameLength: frameLength,
                        stamp: stamp
                    };
                }
                return undefined;
            }
            function appendFrame(track, data, offset, pts, frameIndex) {
                var frameDuration = getFrameDuration(track.samplerate);
                var header = parseFrameHeader(data, offset, pts, frameIndex, frameDuration);
                if (header) {
                    var stamp = header.stamp;
                    var headerLength = header.headerLength;
                    var frameLength = header.frameLength; // logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);
                    var aacSample = {
                        unit: data.subarray(offset + headerLength, offset + headerLength + frameLength),
                        pts: stamp,
                        dts: stamp
                    };
                    track.samples.push(aacSample);
                    return {
                        sample: aacSample,
                        length: frameLength + headerLength
                    };
                }
                return undefined;
            }
            // EXTERNAL MODULE: ./src/demux/id3.js
            var id3 = __webpack_require__("./src/demux/id3.js");
            // CONCATENATED MODULE: ./src/demux/aacdemuxer.js
            /**
 * AAC demuxer
 */ var aacdemuxer_AACDemuxer = /*#__PURE__*/ function() {
                function AACDemuxer(observer, remuxer, config) {
                    this.observer = observer;
                    this.config = config;
                    this.remuxer = remuxer;
                }
                var _proto = AACDemuxer.prototype;
                _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
                    this._audioTrack = {
                        container: 'audio/adts',
                        type: 'audio',
                        id: 0,
                        sequenceNumber: 0,
                        isAAC: true,
                        samples: [],
                        len: 0,
                        manifestCodec: audioCodec,
                        duration: duration,
                        inputTimeScale: 90000
                    };
                };
                _proto.resetTimeStamp = function resetTimeStamp() {
                };
                AACDemuxer.probe = function probe(data) {
                    if (!data) return false;
                     // Check for the ADTS sync word
                    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1
                    // Layer bits (position 14 and 15) in header should be always 0 for ADTS
                    // More info https://wiki.multimedia.cx/index.php?title=ADTS
                    var id3Data = id3["default"].getID3Data(data, 0) || [];
                    var offset = id3Data.length;
                    for(var length = data.length; offset < length; offset++)if (adts_probe(data, offset)) {
                        logger["logger"].log('ADTS sync word found !');
                        return true;
                    }
                    return false;
                } // feed incoming data to the front of the parsing pipeline
                ;
                _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
                    var track = this._audioTrack;
                    var id3Data = id3["default"].getID3Data(data, 0) || [];
                    var timestamp = id3["default"].getTimeStamp(id3Data);
                    var pts = Object(number["isFiniteNumber"])(timestamp) ? timestamp * 90 : timeOffset * 90000;
                    var frameIndex = 0;
                    var stamp = pts;
                    var length = data.length;
                    var offset = id3Data.length;
                    var id3Samples = [
                        {
                            pts: stamp,
                            dts: stamp,
                            data: id3Data
                        }
                    ];
                    while(offset < length - 1){
                        if (isHeader(data, offset) && offset + 5 < length) {
                            initTrackConfig(track, this.observer, data, offset, track.manifestCodec);
                            var frame = appendFrame(track, data, offset, pts, frameIndex);
                            if (frame) {
                                offset += frame.length;
                                stamp = frame.sample.pts;
                                frameIndex++;
                            } else {
                                logger["logger"].log('Unable to parse AAC frame');
                                break;
                            }
                        } else if (id3["default"].isHeader(data, offset)) {
                            id3Data = id3["default"].getID3Data(data, offset);
                            id3Samples.push({
                                pts: stamp,
                                dts: stamp,
                                data: id3Data
                            });
                            offset += id3Data.length;
                        } else // nothing found, keep looking
                        offset++;
                    }
                    this.remuxer.remux(track, {
                        samples: []
                    }, {
                        samples: id3Samples,
                        inputTimeScale: 90000
                    }, {
                        samples: []
                    }, timeOffset, contiguous, accurateTimeOffset);
                };
                _proto.destroy = function destroy() {
                };
                return AACDemuxer;
            }();
            /* harmony default export */ var aacdemuxer = aacdemuxer_AACDemuxer;
            // EXTERNAL MODULE: ./src/demux/mp4demuxer.js
            var mp4demuxer = __webpack_require__("./src/demux/mp4demuxer.js");
            // CONCATENATED MODULE: ./src/demux/mpegaudio.js
            /**
 *  MPEG parser helper
 */ var MpegAudio = {
                BitratesMap: [
                    32,
                    64,
                    96,
                    128,
                    160,
                    192,
                    224,
                    256,
                    288,
                    320,
                    352,
                    384,
                    416,
                    448,
                    32,
                    48,
                    56,
                    64,
                    80,
                    96,
                    112,
                    128,
                    160,
                    192,
                    224,
                    256,
                    320,
                    384,
                    32,
                    40,
                    48,
                    56,
                    64,
                    80,
                    96,
                    112,
                    128,
                    160,
                    192,
                    224,
                    256,
                    320,
                    32,
                    48,
                    56,
                    64,
                    80,
                    96,
                    112,
                    128,
                    144,
                    160,
                    176,
                    192,
                    224,
                    256,
                    8,
                    16,
                    24,
                    32,
                    40,
                    48,
                    56,
                    64,
                    80,
                    96,
                    112,
                    128,
                    144,
                    160
                ],
                SamplingRateMap: [
                    44100,
                    48000,
                    32000,
                    22050,
                    24000,
                    16000,
                    11025,
                    12000,
                    8000
                ],
                SamplesCoefficients: [
                    [
                        0,
                        72,
                        144,
                        12 // Layer1
                    ],
                    [
                        0,
                        0,
                        0,
                        0 // Layer1
                    ],
                    [
                        0,
                        72,
                        144,
                        12 // Layer1
                    ],
                    [
                        0,
                        144,
                        144,
                        12 // Layer1
                    ]
                ],
                BytesInSlot: [
                    0,
                    1,
                    1,
                    4 // Layer1
                ],
                appendFrame: function appendFrame1(track, data, offset, pts, frameIndex) {
                    // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference
                    if (offset + 24 > data.length) return undefined;
                    var header = this.parseHeader(data, offset);
                    if (header && offset + header.frameLength <= data.length) {
                        var frameDuration = header.samplesPerFrame * 90000 / header.sampleRate;
                        var stamp = pts + frameIndex * frameDuration;
                        var sample = {
                            unit: data.subarray(offset, offset + header.frameLength),
                            pts: stamp,
                            dts: stamp
                        };
                        track.config = [];
                        track.channelCount = header.channelCount;
                        track.samplerate = header.sampleRate;
                        track.samples.push(sample);
                        return {
                            sample: sample,
                            length: header.frameLength
                        };
                    }
                    return undefined;
                },
                parseHeader: function parseHeader(data, offset) {
                    var headerB = data[offset + 1] >> 3 & 3;
                    var headerC = data[offset + 1] >> 1 & 3;
                    var headerE = data[offset + 2] >> 4 & 15;
                    var headerF = data[offset + 2] >> 2 & 3;
                    var headerG = data[offset + 2] >> 1 & 1;
                    if (headerB !== 1 && headerE !== 0 && headerE !== 15 && headerF !== 3) {
                        var columnInBitrates = headerB === 3 ? 3 - headerC : headerC === 3 ? 3 : 4;
                        var bitRate = MpegAudio.BitratesMap[columnInBitrates * 14 + headerE - 1] * 1000;
                        var columnInSampleRates = headerB === 3 ? 0 : headerB === 2 ? 1 : 2;
                        var sampleRate = MpegAudio.SamplingRateMap[columnInSampleRates * 3 + headerF];
                        var channelCount = data[offset + 3] >> 6 === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)
                        var sampleCoefficient = MpegAudio.SamplesCoefficients[headerB][headerC];
                        var bytesInSlot = MpegAudio.BytesInSlot[headerC];
                        var samplesPerFrame = sampleCoefficient * 8 * bytesInSlot;
                        var frameLength = parseInt(sampleCoefficient * bitRate / sampleRate + headerG, 10) * bytesInSlot;
                        return {
                            sampleRate: sampleRate,
                            channelCount: channelCount,
                            frameLength: frameLength,
                            samplesPerFrame: samplesPerFrame
                        };
                    }
                    return undefined;
                },
                isHeaderPattern: function isHeaderPattern1(data, offset) {
                    return data[offset] === 255 && (data[offset + 1] & 224) === 224 && (data[offset + 1] & 6) !== 0;
                },
                isHeader: function isHeader1(data, offset) {
                    // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
                    // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
                    // More info http://www.mp3-tech.org/programmer/frame_header.html
                    if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) return true;
                    return false;
                },
                probe: function probe(data, offset) {
                    // same as isHeader but we also check that MPEG frame follows last MPEG frame
                    // or end of data is reached
                    if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {
                        // MPEG header Length
                        var headerLength = 4; // MPEG frame Length
                        var header = this.parseHeader(data, offset);
                        var frameLength = headerLength;
                        if (header && header.frameLength) frameLength = header.frameLength;
                        var newOffset = offset + frameLength;
                        if (newOffset === data.length || newOffset + 1 < data.length && this.isHeaderPattern(data, newOffset)) return true;
                    }
                    return false;
                }
            };
            /* harmony default export */ var mpegaudio = MpegAudio;
            // CONCATENATED MODULE: ./src/demux/exp-golomb.js
            /**
 * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.
*/ var exp_golomb_ExpGolomb = /*#__PURE__*/ function() {
                function ExpGolomb(data) {
                    this.data = data; // the number of bytes left to examine in this.data
                    this.bytesAvailable = data.byteLength; // the current word being examined
                    this.word = 0; // :uint
                    // the number of bits left to examine in the current word
                    this.bitsAvailable = 0; // :uint
                } // ():void
                var _proto = ExpGolomb.prototype;
                _proto.loadWord = function loadWord() {
                    var data = this.data, bytesAvailable = this.bytesAvailable, position = data.byteLength - bytesAvailable, workingBytes = new Uint8Array(4), availableBytes = Math.min(4, bytesAvailable);
                    if (availableBytes === 0) throw new Error('no bytes available');
                    workingBytes.set(data.subarray(position, position + availableBytes));
                    this.word = new DataView(workingBytes.buffer).getUint32(0); // track the amount of this.data that has been processed
                    this.bitsAvailable = availableBytes * 8;
                    this.bytesAvailable -= availableBytes;
                } // (count:int):void
                ;
                _proto.skipBits = function skipBits(count) {
                    var skipBytes; // :int
                    if (this.bitsAvailable > count) {
                        this.word <<= count;
                        this.bitsAvailable -= count;
                    } else {
                        count -= this.bitsAvailable;
                        skipBytes = count >> 3;
                        count -= skipBytes >> 3;
                        this.bytesAvailable -= skipBytes;
                        this.loadWord();
                        this.word <<= count;
                        this.bitsAvailable -= count;
                    }
                } // (size:int):uint
                ;
                _proto.readBits = function readBits(size) {
                    var bits = Math.min(this.bitsAvailable, size), // :uint
                    valu = this.word >>> 32 - bits; // :uint
                    if (size > 32) logger["logger"].error('Cannot read more than 32 bits at a time');
                    this.bitsAvailable -= bits;
                    if (this.bitsAvailable > 0) this.word <<= bits;
                    else if (this.bytesAvailable > 0) this.loadWord();
                    bits = size - bits;
                    if (bits > 0 && this.bitsAvailable) return valu << bits | this.readBits(bits);
                    else return valu;
                } // ():uint
                ;
                _proto.skipLZ = function skipLZ() {
                    var leadingZeroCount; // :uint
                    for(leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount)if ((this.word & 2147483648 >>> leadingZeroCount) !== 0) {
                        // the first bit of working word is 1
                        this.word <<= leadingZeroCount;
                        this.bitsAvailable -= leadingZeroCount;
                        return leadingZeroCount;
                    }
                     // we exhausted word and still have not found a 1
                    this.loadWord();
                    return leadingZeroCount + this.skipLZ();
                } // ():void
                ;
                _proto.skipUEG = function skipUEG() {
                    this.skipBits(1 + this.skipLZ());
                } // ():void
                ;
                _proto.skipEG = function skipEG() {
                    this.skipBits(1 + this.skipLZ());
                } // ():uint
                ;
                _proto.readUEG = function readUEG() {
                    var clz = this.skipLZ(); // :uint
                    return this.readBits(clz + 1) - 1;
                } // ():int
                ;
                _proto.readEG = function readEG() {
                    var valu = this.readUEG(); // :int
                    if (1 & valu) // the number is odd if the low order bit is set
                    return 1 + valu >>> 1; // add 1 to make it even, and divide by 2
                    else return -1 * (valu >>> 1); // divide by two then make it negative
                } // Some convenience functions
                ;
                _proto.readBoolean = function readBoolean() {
                    return this.readBits(1) === 1;
                } // ():int
                ;
                _proto.readUByte = function readUByte() {
                    return this.readBits(8);
                } // ():int
                ;
                _proto.readUShort = function readUShort() {
                    return this.readBits(16);
                } // ():int
                ;
                _proto.readUInt = function readUInt() {
                    return this.readBits(32);
                };
                _proto.skipScalingList = function skipScalingList(count) {
                    var lastScale = 8, nextScale = 8, j, deltaScale;
                    for(j = 0; j < count; j++){
                        if (nextScale !== 0) {
                            deltaScale = this.readEG();
                            nextScale = (lastScale + deltaScale + 256) % 256;
                        }
                        lastScale = nextScale === 0 ? lastScale : nextScale;
                    }
                };
                _proto.readSPS = function readSPS() {
                    var frameCropLeftOffset = 0, frameCropRightOffset = 0, frameCropTopOffset = 0, frameCropBottomOffset = 0, profileIdc, profileCompat, levelIdc, numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1, picHeightInMapUnitsMinus1, frameMbsOnlyFlag, scalingListCount, i, readUByte1 = this.readUByte.bind(this), readBits1 = this.readBits.bind(this), readUEG1 = this.readUEG.bind(this), readBoolean1 = this.readBoolean.bind(this), skipBits1 = this.skipBits.bind(this), skipEG1 = this.skipEG.bind(this), skipUEG1 = this.skipUEG.bind(this), skipScalingList1 = this.skipScalingList.bind(this);
                    readUByte1();
                    profileIdc = readUByte1(); // profile_idc
                    profileCompat = readBits1(5); // constraint_set[0-4]_flag, u(5)
                    skipBits1(3); // reserved_zero_3bits u(3),
                    levelIdc = readUByte1(); // level_idc u(8)
                    skipUEG1(); // seq_parameter_set_id
                    // some profiles have more optional data we don't need
                    if (profileIdc === 100 || profileIdc === 110 || profileIdc === 122 || profileIdc === 244 || profileIdc === 44 || profileIdc === 83 || profileIdc === 86 || profileIdc === 118 || profileIdc === 128) {
                        var chromaFormatIdc = readUEG1();
                        if (chromaFormatIdc === 3) skipBits1(1);
                         // separate_colour_plane_flag
                        skipUEG1(); // bit_depth_luma_minus8
                        skipUEG1(); // bit_depth_chroma_minus8
                        skipBits1(1); // qpprime_y_zero_transform_bypass_flag
                        if (readBoolean1()) {
                            // seq_scaling_matrix_present_flag
                            scalingListCount = chromaFormatIdc !== 3 ? 8 : 12;
                            for(i = 0; i < scalingListCount; i++)if (readBoolean1()) {
                                // seq_scaling_list_present_flag[ i ]
                                if (i < 6) skipScalingList1(16);
                                else skipScalingList1(64);
                            }
                        }
                    }
                    skipUEG1(); // log2_max_frame_num_minus4
                    var picOrderCntType = readUEG1();
                    if (picOrderCntType === 0) readUEG1(); // log2_max_pic_order_cnt_lsb_minus4
                    else if (picOrderCntType === 1) {
                        skipBits1(1); // delta_pic_order_always_zero_flag
                        skipEG1(); // offset_for_non_ref_pic
                        skipEG1(); // offset_for_top_to_bottom_field
                        numRefFramesInPicOrderCntCycle = readUEG1();
                        for(i = 0; i < numRefFramesInPicOrderCntCycle; i++)skipEG1();
                         // offset_for_ref_frame[ i ]
                    }
                    skipUEG1(); // max_num_ref_frames
                    skipBits1(1); // gaps_in_frame_num_value_allowed_flag
                    picWidthInMbsMinus1 = readUEG1();
                    picHeightInMapUnitsMinus1 = readUEG1();
                    frameMbsOnlyFlag = readBits1(1);
                    if (frameMbsOnlyFlag === 0) skipBits1(1);
                     // mb_adaptive_frame_field_flag
                    skipBits1(1); // direct_8x8_inference_flag
                    if (readBoolean1()) {
                        // frame_cropping_flag
                        frameCropLeftOffset = readUEG1();
                        frameCropRightOffset = readUEG1();
                        frameCropTopOffset = readUEG1();
                        frameCropBottomOffset = readUEG1();
                    }
                    var pixelRatio = [
                        1,
                        1
                    ];
                    if (readBoolean1()) // vui_parameters_present_flag
                    {
                        if (readBoolean1()) {
                            // aspect_ratio_info_present_flag
                            var aspectRatioIdc = readUByte1();
                            switch(aspectRatioIdc){
                                case 1:
                                    pixelRatio = [
                                        1,
                                        1
                                    ];
                                    break;
                                case 2:
                                    pixelRatio = [
                                        12,
                                        11
                                    ];
                                    break;
                                case 3:
                                    pixelRatio = [
                                        10,
                                        11
                                    ];
                                    break;
                                case 4:
                                    pixelRatio = [
                                        16,
                                        11
                                    ];
                                    break;
                                case 5:
                                    pixelRatio = [
                                        40,
                                        33
                                    ];
                                    break;
                                case 6:
                                    pixelRatio = [
                                        24,
                                        11
                                    ];
                                    break;
                                case 7:
                                    pixelRatio = [
                                        20,
                                        11
                                    ];
                                    break;
                                case 8:
                                    pixelRatio = [
                                        32,
                                        11
                                    ];
                                    break;
                                case 9:
                                    pixelRatio = [
                                        80,
                                        33
                                    ];
                                    break;
                                case 10:
                                    pixelRatio = [
                                        18,
                                        11
                                    ];
                                    break;
                                case 11:
                                    pixelRatio = [
                                        15,
                                        11
                                    ];
                                    break;
                                case 12:
                                    pixelRatio = [
                                        64,
                                        33
                                    ];
                                    break;
                                case 13:
                                    pixelRatio = [
                                        160,
                                        99
                                    ];
                                    break;
                                case 14:
                                    pixelRatio = [
                                        4,
                                        3
                                    ];
                                    break;
                                case 15:
                                    pixelRatio = [
                                        3,
                                        2
                                    ];
                                    break;
                                case 16:
                                    pixelRatio = [
                                        2,
                                        1
                                    ];
                                    break;
                                case 255:
                                    pixelRatio = [
                                        readUByte1() << 8 | readUByte1(),
                                        readUByte1() << 8 | readUByte1()
                                    ];
                                    break;
                            }
                        }
                    }
                    return {
                        width: Math.ceil((picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2),
                        height: (2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - (frameMbsOnlyFlag ? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset),
                        pixelRatio: pixelRatio
                    };
                };
                _proto.readSliceType = function readSliceType() {
                    // skip NALu type
                    this.readUByte(); // discard first_mb_in_slice
                    this.readUEG(); // return slice_type
                    return this.readUEG();
                };
                return ExpGolomb;
            }();
            /* harmony default export */ var exp_golomb = exp_golomb_ExpGolomb;
            // CONCATENATED MODULE: ./src/demux/sample-aes.js
            /**
 * SAMPLE-AES decrypter
*/ var sample_aes_SampleAesDecrypter = /*#__PURE__*/ function() {
                function SampleAesDecrypter(observer, config, decryptdata, discardEPB) {
                    this.decryptdata = decryptdata;
                    this.discardEPB = discardEPB;
                    this.decrypter = new crypt_decrypter["default"](observer, config, {
                        removePKCS7Padding: false
                    });
                }
                var _proto = SampleAesDecrypter.prototype;
                _proto.decryptBuffer = function decryptBuffer(encryptedData, callback) {
                    this.decrypter.decrypt(encryptedData, this.decryptdata.key.buffer, this.decryptdata.iv.buffer, callback);
                } // AAC - encrypt all full 16 bytes blocks starting from offset 16
                ;
                _proto.decryptAacSample = function decryptAacSample(samples, sampleIndex, callback, sync) {
                    var curUnit = samples[sampleIndex].unit;
                    var encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);
                    var encryptedBuffer = encryptedData.buffer.slice(encryptedData.byteOffset, encryptedData.byteOffset + encryptedData.length);
                    var localthis = this;
                    this.decryptBuffer(encryptedBuffer, function(decryptedData) {
                        decryptedData = new Uint8Array(decryptedData);
                        curUnit.set(decryptedData, 16);
                        if (!sync) localthis.decryptAacSamples(samples, sampleIndex + 1, callback);
                    });
                };
                _proto.decryptAacSamples = function decryptAacSamples(samples, sampleIndex, callback) {
                    for(;; sampleIndex++){
                        if (sampleIndex >= samples.length) {
                            callback();
                            return;
                        }
                        if (samples[sampleIndex].unit.length < 32) continue;
                        var sync = this.decrypter.isSync();
                        this.decryptAacSample(samples, sampleIndex, callback, sync);
                        if (!sync) return;
                    }
                } // AVC - encrypt one 16 bytes block out of ten, starting from offset 32
                ;
                _proto.getAvcEncryptedData = function getAvcEncryptedData(decodedData) {
                    var encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;
                    var encryptedData = new Int8Array(encryptedDataLen);
                    var outputPos = 0;
                    for(var inputPos = 32; inputPos <= decodedData.length - 16; inputPos += 160, outputPos += 16)encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);
                    return encryptedData;
                };
                _proto.getAvcDecryptedUnit = function getAvcDecryptedUnit(decodedData, decryptedData) {
                    decryptedData = new Uint8Array(decryptedData);
                    var inputPos = 0;
                    for(var outputPos = 32; outputPos <= decodedData.length - 16; outputPos += 160, inputPos += 16)decodedData.set(decryptedData.subarray(inputPos, inputPos + 16), outputPos);
                    return decodedData;
                };
                _proto.decryptAvcSample = function decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync) {
                    var decodedData = this.discardEPB(curUnit.data);
                    var encryptedData = this.getAvcEncryptedData(decodedData);
                    var localthis = this;
                    this.decryptBuffer(encryptedData.buffer, function(decryptedData) {
                        curUnit.data = localthis.getAvcDecryptedUnit(decodedData, decryptedData);
                        if (!sync) localthis.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);
                    });
                };
                _proto.decryptAvcSamples = function decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {
                    for(;; sampleIndex++, unitIndex = 0){
                        if (sampleIndex >= samples.length) {
                            callback();
                            return;
                        }
                        var curUnits = samples[sampleIndex].units;
                        for(;; unitIndex++){
                            if (unitIndex >= curUnits.length) break;
                            var curUnit = curUnits[unitIndex];
                            if (curUnit.data.length <= 48 || curUnit.type !== 1 && curUnit.type !== 5) continue;
                            var sync = this.decrypter.isSync();
                            this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync);
                            if (!sync) return;
                        }
                    }
                };
                return SampleAesDecrypter;
            }();
            /* harmony default export */ var sample_aes = sample_aes_SampleAesDecrypter;
            // CONCATENATED MODULE: ./src/demux/tsdemuxer.js
            /**
 * highly optimized TS demuxer:
 * parse PAT, PMT
 * extract PES packet from audio and video PIDs
 * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet
 * trigger the remuxer upon parsing completion
 * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.
 * it also controls the remuxing process :
 * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.
*/ // import Hex from '../utils/hex';
            // We are using fixed track IDs for driving the MP4 remuxer
            // instead of following the TS PIDs.
            // There is no reason not to do this and some browsers/SourceBuffer-demuxers
            // may not like if there are TrackID "switches"
            // See https://github.com/video-dev/hls.js/issues/1331
            // Here we are mapping our internal track types to constant MP4 track IDs
            // With MSE currently one can only have one track of each, and we are muxing
            // whatever video/audio rendition in them.
            var RemuxerTrackIdConfig = {
                video: 1,
                audio: 2,
                id3: 3,
                text: 4
            };
            var tsdemuxer_TSDemuxer = /*#__PURE__*/ function() {
                function TSDemuxer(observer, remuxer, config, typeSupported) {
                    this.observer = observer;
                    this.config = config;
                    this.typeSupported = typeSupported;
                    this.remuxer = remuxer;
                    this.sampleAes = null;
                    this.pmtUnknownTypes = {
                    };
                }
                var _proto = TSDemuxer.prototype;
                _proto.setDecryptData = function setDecryptData(decryptdata) {
                    if (decryptdata != null && decryptdata.key != null && decryptdata.method === 'SAMPLE-AES') this.sampleAes = new sample_aes(this.observer, this.config, decryptdata, this.discardEPB);
                    else this.sampleAes = null;
                };
                TSDemuxer.probe = function probe(data) {
                    var syncOffset = TSDemuxer._syncOffset(data);
                    if (syncOffset < 0) return false;
                    else {
                        if (syncOffset) logger["logger"].warn("MPEG2-TS detected but first sync word found @ offset " + syncOffset + ", junk ahead ?");
                        return true;
                    }
                };
                TSDemuxer._syncOffset = function _syncOffset(data) {
                    // scan 1000 first bytes
                    var scanwindow = Math.min(1000, data.length - 564);
                    var i = 0;
                    while(i < scanwindow){
                        // a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47
                        if (data[i] === 71 && data[i + 188] === 71 && data[i + 376] === 71) return i;
                        else i++;
                    }
                    return -1;
                };
                TSDemuxer.createTrack = function createTrack(type, duration) {
                    return {
                        container: type === 'video' || type === 'audio' ? 'video/mp2t' : undefined,
                        type: type,
                        id: RemuxerTrackIdConfig[type],
                        pid: -1,
                        inputTimeScale: 90000,
                        sequenceNumber: 0,
                        samples: [],
                        dropped: type === 'video' ? 0 : undefined,
                        isAAC: type === 'audio' ? true : undefined,
                        duration: type === 'audio' ? duration : undefined
                    };
                };
                _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
                    this.pmtParsed = false;
                    this._pmtId = -1;
                    this.pmtUnknownTypes = {
                    };
                    this._avcTrack = TSDemuxer.createTrack('video', duration);
                    this._audioTrack = TSDemuxer.createTrack('audio', duration);
                    this._id3Track = TSDemuxer.createTrack('id3', duration);
                    this._txtTrack = TSDemuxer.createTrack('text', duration); // flush any partial content
                    this.aacOverFlow = null;
                    this.aacLastPTS = null;
                    this.avcSample = null;
                    this.audioCodec = audioCodec;
                    this.videoCodec = videoCodec;
                    this._duration = duration;
                };
                _proto.resetTimeStamp = function resetTimeStamp() {
                } // feed incoming data to the front of the parsing pipeline
                ;
                _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
                    var start, len = data.length, stt, pid, atf, offset, pes, unknownPIDs = false;
                    this.pmtUnknownTypes = {
                    };
                    this.contiguous = contiguous;
                    var pmtParsed = this.pmtParsed, avcTrack = this._avcTrack, audioTrack = this._audioTrack, id3Track = this._id3Track, avcId = avcTrack.pid, audioId = audioTrack.pid, id3Id = id3Track.pid, pmtId = this._pmtId, avcData = avcTrack.pesData, audioData = audioTrack.pesData, id3Data = id3Track.pesData, parsePAT = this._parsePAT, parsePMT = this._parsePMT.bind(this), parsePES = this._parsePES, parseAVCPES = this._parseAVCPES.bind(this), parseAACPES = this._parseAACPES.bind(this), parseMPEGPES = this._parseMPEGPES.bind(this), parseID3PES = this._parseID3PES.bind(this);
                    var syncOffset = TSDemuxer._syncOffset(data); // don't parse last TS packet if incomplete
                    len -= (len + syncOffset) % 188; // loop through TS packets
                    for(start = syncOffset; start < len; start += 188)if (data[start] === 71) {
                        stt = !!(data[start + 1] & 64); // pid is a 13-bit field starting at the last bit of TS[1]
                        pid = ((data[start + 1] & 31) << 8) + data[start + 2];
                        atf = (data[start + 3] & 48) >> 4; // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.
                        if (atf > 1) {
                            offset = start + 5 + data[start + 4]; // continue if there is only adaptation field
                            if (offset === start + 188) continue;
                        } else offset = start + 4;
                        switch(pid){
                            case avcId:
                                if (stt) {
                                    if (avcData && (pes = parsePES(avcData))) parseAVCPES(pes, false);
                                    avcData = {
                                        data: [],
                                        size: 0
                                    };
                                }
                                if (avcData) {
                                    avcData.data.push(data.subarray(offset, start + 188));
                                    avcData.size += start + 188 - offset;
                                }
                                break;
                            case audioId:
                                if (stt) {
                                    if (audioData && (pes = parsePES(audioData))) {
                                        if (audioTrack.isAAC) parseAACPES(pes);
                                        else parseMPEGPES(pes);
                                    }
                                    audioData = {
                                        data: [],
                                        size: 0
                                    };
                                }
                                if (audioData) {
                                    audioData.data.push(data.subarray(offset, start + 188));
                                    audioData.size += start + 188 - offset;
                                }
                                break;
                            case id3Id:
                                if (stt) {
                                    if (id3Data && (pes = parsePES(id3Data))) parseID3PES(pes);
                                    id3Data = {
                                        data: [],
                                        size: 0
                                    };
                                }
                                if (id3Data) {
                                    id3Data.data.push(data.subarray(offset, start + 188));
                                    id3Data.size += start + 188 - offset;
                                }
                                break;
                            case 0:
                                if (stt) offset += data[offset] + 1;
                                pmtId = this._pmtId = parsePAT(data, offset);
                                break;
                            case pmtId:
                                if (stt) offset += data[offset] + 1;
                                var parsedPIDs = parsePMT(data, offset, this.typeSupported.mpeg === true || this.typeSupported.mp3 === true, this.sampleAes != null); // only update track id if track PID found while parsing PMT
                                // this is to avoid resetting the PID to -1 in case
                                // track PID transiently disappears from the stream
                                // this could happen in case of transient missing audio samples for example
                                // NOTE this is only the PID of the track as found in TS,
                                // but we are not using this for MP4 track IDs.
                                avcId = parsedPIDs.avc;
                                if (avcId > 0) avcTrack.pid = avcId;
                                audioId = parsedPIDs.audio;
                                if (audioId > 0) {
                                    audioTrack.pid = audioId;
                                    audioTrack.isAAC = parsedPIDs.isAAC;
                                }
                                id3Id = parsedPIDs.id3;
                                if (id3Id > 0) id3Track.pid = id3Id;
                                if (unknownPIDs && !pmtParsed) {
                                    logger["logger"].log('reparse from beginning');
                                    unknownPIDs = false; // we set it to -188, the += 188 in the for loop will reset start to 0
                                    start = syncOffset - 188;
                                }
                                pmtParsed = this.pmtParsed = true;
                                break;
                            case 17:
                            case 8191:
                                break;
                            default:
                                unknownPIDs = true;
                                break;
                        }
                    } else this.observer.trigger(events["default"].ERROR, {
                        type: errors["ErrorTypes"].MEDIA_ERROR,
                        details: errors["ErrorDetails"].FRAG_PARSING_ERROR,
                        fatal: false,
                        reason: 'TS packet did not start with 0x47'
                    });
                     // try to parse last PES packets
                    if (avcData && (pes = parsePES(avcData))) {
                        parseAVCPES(pes, true);
                        avcTrack.pesData = null;
                    } else // either avcData null or PES truncated, keep it for next frag parsing
                    avcTrack.pesData = avcData;
                    if (audioData && (pes = parsePES(audioData))) {
                        if (audioTrack.isAAC) parseAACPES(pes);
                        else parseMPEGPES(pes);
                        audioTrack.pesData = null;
                    } else {
                        if (audioData && audioData.size) logger["logger"].log('last AAC PES packet truncated,might overlap between fragments');
                         // either audioData null or PES truncated, keep it for next frag parsing
                        audioTrack.pesData = audioData;
                    }
                    if (id3Data && (pes = parsePES(id3Data))) {
                        parseID3PES(pes);
                        id3Track.pesData = null;
                    } else // either id3Data null or PES truncated, keep it for next frag parsing
                    id3Track.pesData = id3Data;
                    if (this.sampleAes == null) this.remuxer.remux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);
                    else this.decryptAndRemux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);
                };
                _proto.decryptAndRemux = function decryptAndRemux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {
                    if (audioTrack.samples && audioTrack.isAAC) {
                        var localthis = this;
                        this.sampleAes.decryptAacSamples(audioTrack.samples, 0, function() {
                            localthis.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
                        });
                    } else this.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
                };
                _proto.decryptAndRemuxAvc = function decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {
                    if (videoTrack.samples) {
                        var localthis = this;
                        this.sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function() {
                            localthis.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
                        });
                    } else this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);
                };
                _proto.destroy = function destroy() {
                    this._initPTS = this._initDTS = undefined;
                    this._duration = 0;
                };
                _proto._parsePAT = function _parsePAT(data, offset) {
                    // skip the PSI header and parse the first PMT entry
                    return (data[offset + 10] & 31) << 8 | data[offset + 11]; // logger.log('PMT PID:'  + this._pmtId);
                };
                _proto._trackUnknownPmt = function _trackUnknownPmt(type, logLevel, message) {
                    // Only log unknown and unsupported stream types once per append or stream (by resetting this.pmtUnknownTypes)
                    // For more information on elementary stream types see:
                    // https://en.wikipedia.org/wiki/Program-specific_information#Elementary_stream_types
                    var result = this.pmtUnknownTypes[type] || 0;
                    if (result === 0) {
                        this.pmtUnknownTypes[type] = 0;
                        logLevel.call(logger["logger"], message);
                    }
                    this.pmtUnknownTypes[type]++;
                    return result;
                };
                _proto._parsePMT = function _parsePMT(data, offset, mpegSupported, isSampleAes) {
                    var sectionLength, tableEnd, programInfoLength, pid, result = {
                        audio: -1,
                        avc: -1,
                        id3: -1,
                        isAAC: true
                    };
                    sectionLength = (data[offset + 1] & 15) << 8 | data[offset + 2];
                    tableEnd = offset + 3 + sectionLength - 4; // to determine where the table is, we have to figure out how
                    // long the program info descriptors are
                    programInfoLength = (data[offset + 10] & 15) << 8 | data[offset + 11]; // advance the offset to the first entry in the mapping table
                    offset += 12 + programInfoLength;
                    while(offset < tableEnd){
                        pid = (data[offset + 1] & 31) << 8 | data[offset + 2];
                        switch(data[offset]){
                            case 207:
                                // SAMPLE-AES AAC
                                if (!isSampleAes) {
                                    this._trackUnknownPmt(data[offset], logger["logger"].warn, 'ADTS AAC with AES-128-CBC frame encryption found in unencrypted stream');
                                    break;
                                }
                            /* falls through */ // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)
                            case 15:
                                // logger.log('AAC PID:'  + pid);
                                if (result.audio === -1) result.audio = pid;
                                break;
                            // Packetized metadata (ID3)
                            case 21:
                                // logger.log('ID3 PID:'  + pid);
                                if (result.id3 === -1) result.id3 = pid;
                                break;
                            case 219:
                                // SAMPLE-AES AVC
                                if (!isSampleAes) {
                                    this._trackUnknownPmt(data[offset], logger["logger"].warn, 'H.264 with AES-128-CBC slice encryption found in unencrypted stream');
                                    break;
                                }
                            /* falls through */ // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)
                            case 27:
                                // logger.log('AVC PID:'  + pid);
                                if (result.avc === -1) result.avc = pid;
                                break;
                            // ISO/IEC 11172-3 (MPEG-1 audio)
                            // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)
                            case 3:
                            case 4:
                                // logger.log('MPEG PID:'  + pid);
                                if (!mpegSupported) this._trackUnknownPmt(data[offset], logger["logger"].warn, 'MPEG audio found, not supported in this browser');
                                else if (result.audio === -1) {
                                    result.audio = pid;
                                    result.isAAC = false;
                                }
                                break;
                            case 36:
                                this._trackUnknownPmt(data[offset], logger["logger"].warn, 'Unsupported HEVC stream type found');
                                break;
                            default:
                                this._trackUnknownPmt(data[offset], logger["logger"].log, 'Unknown stream type:' + data[offset]);
                                break;
                        } // move to the next table entry
                        // skip past the elementary stream descriptors, if present
                        offset += ((data[offset + 3] & 15) << 8 | data[offset + 4]) + 5;
                    }
                    return result;
                };
                _proto._parsePES = function _parsePES(stream) {
                    var i = 0, frag, pesFlags, pesPrefix, pesLen, pesHdrLen, pesData, pesPts, pesDts, payloadStartOffset, data = stream.data; // safety check
                    if (!stream || stream.size === 0) return null;
                     // we might need up to 19 bytes to read PES header
                    // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes
                    // usually only one merge is needed (and this is rare ...)
                    while(data[0].length < 19 && data.length > 1){
                        var newData = new Uint8Array(data[0].length + data[1].length);
                        newData.set(data[0]);
                        newData.set(data[1], data[0].length);
                        data[0] = newData;
                        data.splice(1, 1);
                    } // retrieve PTS/DTS from first fragment
                    frag = data[0];
                    pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];
                    if (pesPrefix === 1) {
                        pesLen = (frag[4] << 8) + frag[5]; // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated
                        // minus 6 : PES header size
                        if (pesLen && pesLen > stream.size - 6) return null;
                        pesFlags = frag[7];
                        if (pesFlags & 192) {
                            /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html
            as PTS / DTS is 33 bit we cannot use bitwise operator in JS,
            as Bitwise operators treat their operands as a sequence of 32 bits */ pesPts = (frag[9] & 14) * 536870912 + (frag[10] & 255) * 4194304 + (frag[11] & 254) * 16384 + (frag[12] & 255) * 128 + (frag[13] & 254) / 2;
                            if (pesFlags & 64) {
                                pesDts = (frag[14] & 14) * 536870912 + (frag[15] & 255) * 4194304 + (frag[16] & 254) * 16384 + (frag[17] & 255) * 128 + (frag[18] & 254) / 2;
                                if (pesPts - pesDts > 5400000) {
                                    logger["logger"].warn(Math.round((pesPts - pesDts) / 90000) + "s delta between PTS and DTS, align them");
                                    pesPts = pesDts;
                                }
                            } else pesDts = pesPts;
                        }
                        pesHdrLen = frag[8]; // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension
                        payloadStartOffset = pesHdrLen + 9;
                        if (stream.size <= payloadStartOffset) return null;
                        stream.size -= payloadStartOffset; // reassemble PES packet
                        pesData = new Uint8Array(stream.size);
                        for(var j = 0, dataLen = data.length; j < dataLen; j++){
                            frag = data[j];
                            var len = frag.byteLength;
                            if (payloadStartOffset) {
                                if (payloadStartOffset > len) {
                                    // trim full frag if PES header bigger than frag
                                    payloadStartOffset -= len;
                                    continue;
                                } else {
                                    // trim partial frag if PES header smaller than frag
                                    frag = frag.subarray(payloadStartOffset);
                                    len -= payloadStartOffset;
                                    payloadStartOffset = 0;
                                }
                            }
                            pesData.set(frag, i);
                            i += len;
                        }
                        if (pesLen) // payload size : remove PES header + PES extension
                        pesLen -= pesHdrLen + 3;
                        return {
                            data: pesData,
                            pts: pesPts,
                            dts: pesDts,
                            len: pesLen
                        };
                    } else return null;
                };
                _proto.pushAccesUnit = function pushAccesUnit(avcSample, avcTrack) {
                    if (avcSample.units.length && avcSample.frame) {
                        var samples = avcTrack.samples;
                        var nbSamples = samples.length; // if sample does not have PTS/DTS, patch with last sample PTS/DTS
                        if (isNaN(avcSample.pts)) {
                            if (nbSamples) {
                                var lastSample = samples[nbSamples - 1];
                                avcSample.pts = lastSample.pts;
                                avcSample.dts = lastSample.dts;
                            } else {
                                // dropping samples, no timestamp found
                                avcTrack.dropped++;
                                return;
                            }
                        } // only push AVC sample if starting with a keyframe is not mandatory OR
                        //    if keyframe already found in this fragment OR
                        //       keyframe found in last fragment (track.sps) AND
                        //          samples already appended (we already found a keyframe in this fragment) OR fragment is contiguous
                        if (!this.config.forceKeyFrameOnDiscontinuity || avcSample.key === true || avcTrack.sps && (nbSamples || this.contiguous)) {
                            avcSample.id = nbSamples;
                            samples.push(avcSample);
                        } else // dropped samples, track it
                        avcTrack.dropped++;
                    }
                    if (avcSample.debug.length) logger["logger"].log(avcSample.pts + '/' + avcSample.dts + ':' + avcSample.debug);
                };
                _proto._parseAVCPES = function _parseAVCPES(pes, last) {
                    var _this = this;
                    // logger.log('parse new PES');
                    var track = this._avcTrack, units = this._parseAVCNALu(pes.data), debug = false, expGolombDecoder, avcSample = this.avcSample, push, spsfound = false, i, pushAccesUnit1 = this.pushAccesUnit.bind(this), createAVCSample = function createAVCSample1(key, pts, dts, debug1) {
                        return {
                            key: key,
                            pts: pts,
                            dts: dts,
                            units: [],
                            debug: debug1
                        };
                    }; // free pes.data to save up some memory
                    pes.data = null; // if new NAL units found and last sample still there, let's push ...
                    // this helps parsing streams with missing AUD (only do this if AUD never found)
                    if (avcSample && units.length && !track.audFound) {
                        pushAccesUnit1(avcSample, track);
                        avcSample = this.avcSample = createAVCSample(false, pes.pts, pes.dts, '');
                    }
                    units.forEach(function(unit) {
                        switch(unit.type){
                            // NDR
                            case 1:
                                push = true;
                                if (!avcSample) avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');
                                if (debug) avcSample.debug += 'NDR ';
                                avcSample.frame = true;
                                var data = unit.data; // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)
                                if (spsfound && data.length > 4) {
                                    // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR
                                    var sliceType = new exp_golomb(data).readSliceType(); // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice
                                    // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.
                                    // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.
                                    // I slice: A slice that is not an SI slice that is decoded using intra prediction only.
                                    // if (sliceType === 2 || sliceType === 7) {
                                    if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) avcSample.key = true;
                                }
                                break;
                            // IDR
                            case 5:
                                push = true; // handle PES not starting with AUD
                                if (!avcSample) avcSample = _this.avcSample = createAVCSample(true, pes.pts, pes.dts, '');
                                if (debug) avcSample.debug += 'IDR ';
                                avcSample.key = true;
                                avcSample.frame = true;
                                break;
                            // SEI
                            case 6:
                                push = true;
                                if (debug && avcSample) avcSample.debug += 'SEI ';
                                expGolombDecoder = new exp_golomb(_this.discardEPB(unit.data)); // skip frameType
                                expGolombDecoder.readUByte();
                                var payloadType = 0;
                                var payloadSize = 0;
                                var endOfCaptions = false;
                                var b = 0;
                                while(!endOfCaptions && expGolombDecoder.bytesAvailable > 1){
                                    payloadType = 0;
                                    do {
                                        b = expGolombDecoder.readUByte();
                                        payloadType += b;
                                    }while (b === 255) // Parse payload size.
                                    payloadSize = 0;
                                    do {
                                        b = expGolombDecoder.readUByte();
                                        payloadSize += b;
                                    }while (b === 255) // TODO: there can be more than one payload in an SEI packet...
                                    // TODO: need to read type and size in a while loop to get them all
                                    if (payloadType === 4 && expGolombDecoder.bytesAvailable !== 0) {
                                        endOfCaptions = true;
                                        var countryCode = expGolombDecoder.readUByte();
                                        if (countryCode === 181) {
                                            var providerCode = expGolombDecoder.readUShort();
                                            if (providerCode === 49) {
                                                var userStructure = expGolombDecoder.readUInt();
                                                if (userStructure === 1195456820) {
                                                    var userDataType = expGolombDecoder.readUByte(); // Raw CEA-608 bytes wrapped in CEA-708 packet
                                                    if (userDataType === 3) {
                                                        var firstByte = expGolombDecoder.readUByte();
                                                        var secondByte = expGolombDecoder.readUByte();
                                                        var totalCCs = 31 & firstByte;
                                                        var byteArray = [
                                                            firstByte,
                                                            secondByte
                                                        ];
                                                        for(i = 0; i < totalCCs; i++){
                                                            // 3 bytes per CC
                                                            byteArray.push(expGolombDecoder.readUByte());
                                                            byteArray.push(expGolombDecoder.readUByte());
                                                            byteArray.push(expGolombDecoder.readUByte());
                                                        }
                                                        _this._insertSampleInOrder(_this._txtTrack.samples, {
                                                            type: 3,
                                                            pts: pes.pts,
                                                            bytes: byteArray
                                                        });
                                                    }
                                                }
                                            }
                                        }
                                    } else if (payloadType === 5 && expGolombDecoder.bytesAvailable !== 0) {
                                        endOfCaptions = true;
                                        if (payloadSize > 16) {
                                            var uuidStrArray = [];
                                            for(i = 0; i < 16; i++){
                                                uuidStrArray.push(expGolombDecoder.readUByte().toString(16));
                                                if (i === 3 || i === 5 || i === 7 || i === 9) uuidStrArray.push('-');
                                            }
                                            var length = payloadSize - 16;
                                            var userDataPayloadBytes = new Uint8Array(length);
                                            for(i = 0; i < length; i++)userDataPayloadBytes[i] = expGolombDecoder.readUByte();
                                            _this._insertSampleInOrder(_this._txtTrack.samples, {
                                                pts: pes.pts,
                                                payloadType: payloadType,
                                                uuid: uuidStrArray.join(''),
                                                userDataBytes: userDataPayloadBytes,
                                                userData: Object(id3["utf8ArrayToStr"])(userDataPayloadBytes.buffer)
                                            });
                                        }
                                    } else if (payloadSize < expGolombDecoder.bytesAvailable) for(i = 0; i < payloadSize; i++)expGolombDecoder.readUByte();
                                }
                                break;
                            // SPS
                            case 7:
                                push = true;
                                spsfound = true;
                                if (debug && avcSample) avcSample.debug += 'SPS ';
                                if (!track.sps) {
                                    expGolombDecoder = new exp_golomb(unit.data);
                                    var config = expGolombDecoder.readSPS();
                                    track.width = config.width;
                                    track.height = config.height;
                                    track.pixelRatio = config.pixelRatio;
                                    track.sps = [
                                        unit.data
                                    ];
                                    track.duration = _this._duration;
                                    var codecarray = unit.data.subarray(1, 4);
                                    var codecstring = 'avc1.';
                                    for(i = 0; i < 3; i++){
                                        var h = codecarray[i].toString(16);
                                        if (h.length < 2) h = '0' + h;
                                        codecstring += h;
                                    }
                                    track.codec = codecstring;
                                }
                                break;
                            // PPS
                            case 8:
                                push = true;
                                if (debug && avcSample) avcSample.debug += 'PPS ';
                                if (!track.pps) track.pps = [
                                    unit.data
                                ];
                                break;
                            // AUD
                            case 9:
                                push = false;
                                track.audFound = true;
                                if (avcSample) pushAccesUnit1(avcSample, track);
                                avcSample = _this.avcSample = createAVCSample(false, pes.pts, pes.dts, debug ? 'AUD ' : '');
                                break;
                            // Filler Data
                            case 12:
                                push = false;
                                break;
                            default:
                                push = false;
                                if (avcSample) avcSample.debug += 'unknown NAL ' + unit.type + ' ';
                                break;
                        }
                        if (avcSample && push) {
                            var _units = avcSample.units;
                            _units.push(unit);
                        }
                    }); // if last PES packet, push samples
                    if (last && avcSample) {
                        pushAccesUnit1(avcSample, track);
                        this.avcSample = null;
                    }
                };
                _proto._insertSampleInOrder = function _insertSampleInOrder(arr, data) {
                    var len = arr.length;
                    if (len > 0) {
                        if (data.pts >= arr[len - 1].pts) arr.push(data);
                        else {
                            for(var pos = len - 1; pos >= 0; pos--)if (data.pts < arr[pos].pts) {
                                arr.splice(pos, 0, data);
                                break;
                            }
                        }
                    } else arr.push(data);
                };
                _proto._getLastNalUnit = function _getLastNalUnit() {
                    var avcSample = this.avcSample, lastUnit; // try to fallback to previous sample if current one is empty
                    if (!avcSample || avcSample.units.length === 0) {
                        var track = this._avcTrack, samples = track.samples;
                        avcSample = samples[samples.length - 1];
                    }
                    if (avcSample) {
                        var units = avcSample.units;
                        lastUnit = units[units.length - 1];
                    }
                    return lastUnit;
                };
                _proto._parseAVCNALu = function _parseAVCNALu(array) {
                    var i = 0, len = array.byteLength, value, overflow, track = this._avcTrack, state = track.naluState || 0, lastState = state;
                    var units = [], unit, unitType, lastUnitStart = -1, lastUnitType; // logger.log('PES:' + Hex.hexDump(array));
                    if (state === -1) {
                        // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet
                        lastUnitStart = 0; // NALu type is value read from offset 0
                        lastUnitType = array[0] & 31;
                        state = 0;
                        i = 1;
                    }
                    while(i < len){
                        value = array[i++]; // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case
                        if (!state) {
                            state = value ? 0 : 1;
                            continue;
                        }
                        if (state === 1) {
                            state = value ? 0 : 2;
                            continue;
                        } // here we have state either equal to 2 or 3
                        if (!value) state = 3;
                        else if (value === 1) {
                            if (lastUnitStart >= 0) {
                                unit = {
                                    data: array.subarray(lastUnitStart, i - state - 1),
                                    type: lastUnitType
                                }; // logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);
                                units.push(unit);
                            } else {
                                // lastUnitStart is undefined => this is the first start code found in this PES packet
                                // first check if start code delimiter is overlapping between 2 PES packets,
                                // ie it started in last packet (lastState not zero)
                                // and ended at the beginning of this PES packet (i <= 4 - lastState)
                                var lastUnit = this._getLastNalUnit();
                                if (lastUnit) {
                                    if (lastState && i <= 4 - lastState) // start delimiter overlapping between PES packets
                                    // strip start delimiter bytes from the end of last NAL unit
                                    // check if lastUnit had a state different from zero
                                    {
                                        if (lastUnit.state) // strip last bytes
                                        lastUnit.data = lastUnit.data.subarray(0, lastUnit.data.byteLength - lastState);
                                    } // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.
                                    overflow = i - state - 1;
                                    if (overflow > 0) {
                                        // logger.log('first NALU found with overflow:' + overflow);
                                        var tmp = new Uint8Array(lastUnit.data.byteLength + overflow);
                                        tmp.set(lastUnit.data, 0);
                                        tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);
                                        lastUnit.data = tmp;
                                    }
                                }
                            } // check if we can read unit type
                            if (i < len) {
                                unitType = array[i] & 31; // logger.log('find NALU @ offset:' + i + ',type:' + unitType);
                                lastUnitStart = i;
                                lastUnitType = unitType;
                                state = 0;
                            } else // not enough byte to read unit type. let's read it on next PES parsing
                            state = -1;
                        } else state = 0;
                    }
                    if (lastUnitStart >= 0 && state >= 0) {
                        unit = {
                            data: array.subarray(lastUnitStart, len),
                            type: lastUnitType,
                            state: state
                        };
                        units.push(unit); // logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);
                    } // no NALu found
                    if (units.length === 0) {
                        // append pes.data to previous NAL unit
                        var _lastUnit = this._getLastNalUnit();
                        if (_lastUnit) {
                            var _tmp = new Uint8Array(_lastUnit.data.byteLength + array.byteLength);
                            _tmp.set(_lastUnit.data, 0);
                            _tmp.set(array, _lastUnit.data.byteLength);
                            _lastUnit.data = _tmp;
                        }
                    }
                    track.naluState = state;
                    return units;
                };
                _proto.discardEPB = function discardEPB(data) {
                    var length = data.byteLength, EPBPositions = [], i = 1, newLength, newData; // Find all `Emulation Prevention Bytes`
                    while(i < length - 2)if (data[i] === 0 && data[i + 1] === 0 && data[i + 2] === 3) {
                        EPBPositions.push(i + 2);
                        i += 2;
                    } else i++;
                     // If no Emulation Prevention Bytes were found just return the original
                    // array
                    if (EPBPositions.length === 0) return data;
                     // Create a new array to hold the NAL unit data
                    newLength = length - EPBPositions.length;
                    newData = new Uint8Array(newLength);
                    var sourceIndex = 0;
                    for(i = 0; i < newLength; sourceIndex++, i++){
                        if (sourceIndex === EPBPositions[0]) {
                            // Skip this byte
                            sourceIndex++; // Remove this position index
                            EPBPositions.shift();
                        }
                        newData[i] = data[sourceIndex];
                    }
                    return newData;
                };
                _proto._parseAACPES = function _parseAACPES(pes) {
                    var track = this._audioTrack, data = pes.data, pts = pes.pts, startOffset = 0, aacOverFlow = this.aacOverFlow, aacLastPTS = this.aacLastPTS, frameDuration, frameIndex, offset, stamp, len;
                    if (aacOverFlow) {
                        var tmp = new Uint8Array(aacOverFlow.byteLength + data.byteLength);
                        tmp.set(aacOverFlow, 0);
                        tmp.set(data, aacOverFlow.byteLength); // logger.log(`AAC: append overflowing ${aacOverFlow.byteLength} bytes to beginning of new PES`);
                        data = tmp;
                    } // look for ADTS header (0xFFFx)
                    for(offset = startOffset, len = data.length; offset < len - 1; offset++){
                        if (isHeader(data, offset)) break;
                    } // if ADTS header does not start straight from the beginning of the PES payload, raise an error
                    if (offset) {
                        var reason, fatal;
                        if (offset < len - 1) {
                            reason = "AAC PES did not start with ADTS header,offset:" + offset;
                            fatal = false;
                        } else {
                            reason = 'no ADTS header found in AAC PES';
                            fatal = true;
                        }
                        logger["logger"].warn("parsing error:" + reason);
                        this.observer.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].MEDIA_ERROR,
                            details: errors["ErrorDetails"].FRAG_PARSING_ERROR,
                            fatal: fatal,
                            reason: reason
                        });
                        if (fatal) return;
                    }
                    initTrackConfig(track, this.observer, data, offset, this.audioCodec);
                    frameIndex = 0;
                    frameDuration = getFrameDuration(track.samplerate); // if last AAC frame is overflowing, we should ensure timestamps are contiguous:
                    // first sample PTS should be equal to last sample PTS + frameDuration
                    if (aacOverFlow && aacLastPTS) {
                        var newPTS = aacLastPTS + frameDuration;
                        if (Math.abs(newPTS - pts) > 1) {
                            logger["logger"].log("AAC: align PTS for overlapping frames by " + Math.round((newPTS - pts) / 90));
                            pts = newPTS;
                        }
                    } // scan for aac samples
                    while(offset < len)if (isHeader(data, offset)) {
                        if (offset + 5 < len) {
                            var frame = appendFrame(track, data, offset, pts, frameIndex);
                            if (frame) {
                                offset += frame.length;
                                stamp = frame.sample.pts;
                                frameIndex++;
                                continue;
                            }
                        } // We are at an ADTS header, but do not have enough data for a frame
                        break;
                    } else // nothing found, keep looking
                    offset++;
                    if (offset < len) aacOverFlow = data.subarray(offset, len); // logger.log(`AAC: overflow detected:${len-offset}`);
                    else aacOverFlow = null;
                    this.aacOverFlow = aacOverFlow;
                    this.aacLastPTS = stamp;
                };
                _proto._parseMPEGPES = function _parseMPEGPES(pes) {
                    var data = pes.data;
                    var length = data.length;
                    var frameIndex = 0;
                    var offset = 0;
                    var pts = pes.pts;
                    while(offset < length)if (mpegaudio.isHeader(data, offset)) {
                        var frame = mpegaudio.appendFrame(this._audioTrack, data, offset, pts, frameIndex);
                        if (frame) {
                            offset += frame.length;
                            frameIndex++;
                        } else break;
                    } else // nothing found, keep looking
                    offset++;
                };
                _proto._parseID3PES = function _parseID3PES(pes) {
                    this._id3Track.samples.push(pes);
                };
                return TSDemuxer;
            }();
            /* harmony default export */ var tsdemuxer = tsdemuxer_TSDemuxer;
            // CONCATENATED MODULE: ./src/demux/mp3demuxer.js
            /**
 * MP3 demuxer
 */ var mp3demuxer_MP3Demuxer = /*#__PURE__*/ function() {
                function MP3Demuxer(observer, remuxer, config) {
                    this.observer = observer;
                    this.config = config;
                    this.remuxer = remuxer;
                }
                var _proto = MP3Demuxer.prototype;
                _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
                    this._audioTrack = {
                        container: 'audio/mpeg',
                        type: 'audio',
                        id: -1,
                        sequenceNumber: 0,
                        isAAC: false,
                        samples: [],
                        len: 0,
                        manifestCodec: audioCodec,
                        duration: duration,
                        inputTimeScale: 90000
                    };
                };
                _proto.resetTimeStamp = function resetTimeStamp() {
                };
                MP3Demuxer.probe = function probe(data) {
                    // check if data contains ID3 timestamp and MPEG sync word
                    var offset, length;
                    var id3Data = id3["default"].getID3Data(data, 0);
                    if (id3Data && id3["default"].getTimeStamp(id3Data) !== undefined) {
                        // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1
                        // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)
                        // More info http://www.mp3-tech.org/programmer/frame_header.html
                        for(offset = id3Data.length, length = Math.min(data.length - 1, offset + 100); offset < length; offset++)if (mpegaudio.probe(data, offset)) {
                            logger["logger"].log('MPEG Audio sync word found !');
                            return true;
                        }
                    }
                    return false;
                } // feed incoming data to the front of the parsing pipeline
                ;
                _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
                    var id3Data = id3["default"].getID3Data(data, 0) || [];
                    var timestamp = id3["default"].getTimeStamp(id3Data);
                    var pts = timestamp !== undefined ? 90 * timestamp : timeOffset * 90000;
                    var offset = id3Data.length;
                    var length = data.length;
                    var frameIndex = 0, stamp = 0;
                    var track = this._audioTrack;
                    var id3Samples = [
                        {
                            pts: pts,
                            dts: pts,
                            data: id3Data
                        }
                    ];
                    while(offset < length){
                        if (mpegaudio.isHeader(data, offset)) {
                            var frame = mpegaudio.appendFrame(track, data, offset, pts, frameIndex);
                            if (frame) {
                                offset += frame.length;
                                stamp = frame.sample.pts;
                                frameIndex++;
                            } else break;
                        } else if (id3["default"].isHeader(data, offset)) {
                            id3Data = id3["default"].getID3Data(data, offset);
                            id3Samples.push({
                                pts: stamp,
                                dts: stamp,
                                data: id3Data
                            });
                            offset += id3Data.length;
                        } else // nothing found, keep looking
                        offset++;
                    }
                    this.remuxer.remux(track, {
                        samples: []
                    }, {
                        samples: id3Samples,
                        inputTimeScale: 90000
                    }, {
                        samples: []
                    }, timeOffset, contiguous, accurateTimeOffset);
                };
                _proto.destroy = function destroy() {
                };
                return MP3Demuxer;
            }();
            /* harmony default export */ var mp3demuxer = mp3demuxer_MP3Demuxer;
            // CONCATENATED MODULE: ./src/remux/aac-helper.js
            /**
 *  AAC helper
 */ var AAC = /*#__PURE__*/ function() {
                function AAC1() {
                }
                AAC1.getSilentFrame = function getSilentFrame(codec, channelCount) {
                    switch(codec){
                        case 'mp4a.40.2':
                            if (channelCount === 1) return new Uint8Array([
                                0,
                                200,
                                0,
                                128,
                                35,
                                128
                            ]);
                            else if (channelCount === 2) return new Uint8Array([
                                33,
                                0,
                                73,
                                144,
                                2,
                                25,
                                0,
                                35,
                                128
                            ]);
                            else if (channelCount === 3) return new Uint8Array([
                                0,
                                200,
                                0,
                                128,
                                32,
                                132,
                                1,
                                38,
                                64,
                                8,
                                100,
                                0,
                                142
                            ]);
                            else if (channelCount === 4) return new Uint8Array([
                                0,
                                200,
                                0,
                                128,
                                32,
                                132,
                                1,
                                38,
                                64,
                                8,
                                100,
                                0,
                                128,
                                44,
                                128,
                                8,
                                2,
                                56
                            ]);
                            else if (channelCount === 5) return new Uint8Array([
                                0,
                                200,
                                0,
                                128,
                                32,
                                132,
                                1,
                                38,
                                64,
                                8,
                                100,
                                0,
                                130,
                                48,
                                4,
                                153,
                                0,
                                33,
                                144,
                                2,
                                56
                            ]);
                            else if (channelCount === 6) return new Uint8Array([
                                0,
                                200,
                                0,
                                128,
                                32,
                                132,
                                1,
                                38,
                                64,
                                8,
                                100,
                                0,
                                130,
                                48,
                                4,
                                153,
                                0,
                                33,
                                144,
                                2,
                                0,
                                178,
                                0,
                                32,
                                8,
                                224
                            ]);
                            break;
                        // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)
                        default:
                            if (channelCount === 1) // ffmpeg -y -f lavfi -i "aevalsrc=0:d=0.05" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                            return new Uint8Array([
                                1,
                                64,
                                34,
                                128,
                                163,
                                78,
                                230,
                                128,
                                186,
                                8,
                                0,
                                0,
                                0,
                                28,
                                6,
                                241,
                                193,
                                10,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                94
                            ]);
                            else if (channelCount === 2) // ffmpeg -y -f lavfi -i "aevalsrc=0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                            return new Uint8Array([
                                1,
                                64,
                                34,
                                128,
                                163,
                                94,
                                230,
                                128,
                                186,
                                8,
                                0,
                                0,
                                0,
                                0,
                                149,
                                0,
                                6,
                                241,
                                161,
                                10,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                94
                            ]);
                            else if (channelCount === 3) // ffmpeg -y -f lavfi -i "aevalsrc=0|0|0:d=0.05" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 "0x%x," "\n"' -v output.aac
                            return new Uint8Array([
                                1,
                                64,
                                34,
                                128,
                                163,
                                94,
                                230,
                                128,
                                186,
                                8,
                                0,
                                0,
                                0,
                                0,
                                149,
                                0,
                                6,
                                241,
                                161,
                                10,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                90,
                                94
                            ]);
                            break;
                    }
                    return null;
                };
                return AAC1;
            }();
            /* harmony default export */ var aac_helper = AAC;
            // CONCATENATED MODULE: ./src/remux/mp4-generator.js
            /**
 * Generate MP4 Box
*/ var UINT32_MAX = Math.pow(2, 32) - 1;
            var MP4 = /*#__PURE__*/ function() {
                function MP41() {
                }
                MP41.init = function init() {
                    MP41.types = {
                        avc1: [],
                        // codingname
                        avcC: [],
                        btrt: [],
                        dinf: [],
                        dref: [],
                        esds: [],
                        ftyp: [],
                        hdlr: [],
                        mdat: [],
                        mdhd: [],
                        mdia: [],
                        mfhd: [],
                        minf: [],
                        moof: [],
                        moov: [],
                        mp4a: [],
                        '.mp3': [],
                        mvex: [],
                        mvhd: [],
                        pasp: [],
                        sdtp: [],
                        stbl: [],
                        stco: [],
                        stsc: [],
                        stsd: [],
                        stsz: [],
                        stts: [],
                        tfdt: [],
                        tfhd: [],
                        traf: [],
                        trak: [],
                        trun: [],
                        trex: [],
                        tkhd: [],
                        vmhd: [],
                        smhd: []
                    };
                    var i;
                    for(i in MP41.types)if (MP41.types.hasOwnProperty(i)) MP41.types[i] = [
                        i.charCodeAt(0),
                        i.charCodeAt(1),
                        i.charCodeAt(2),
                        i.charCodeAt(3)
                    ];
                    var videoHdlr = new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        118,
                        105,
                        100,
                        101,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        86,
                        105,
                        100,
                        101,
                        111,
                        72,
                        97,
                        110,
                        100,
                        108,
                        101,
                        114,
                        0 // name: 'VideoHandler'
                    ]);
                    var audioHdlr = new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        115,
                        111,
                        117,
                        110,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        83,
                        111,
                        117,
                        110,
                        100,
                        72,
                        97,
                        110,
                        100,
                        108,
                        101,
                        114,
                        0 // name: 'SoundHandler'
                    ]);
                    MP41.HDLR_TYPES = {
                        'video': videoHdlr,
                        'audio': audioHdlr
                    };
                    var dref = new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        12,
                        117,
                        114,
                        108,
                        32,
                        0,
                        0,
                        0,
                        1 // entry_flags
                    ]);
                    var stco = new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0 // entry_count
                    ]);
                    MP41.STTS = MP41.STSC = MP41.STCO = stco;
                    MP41.STSZ = new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0 // sample_count
                    ]);
                    MP41.VMHD = new Uint8Array([
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0 // opcolor
                    ]);
                    MP41.SMHD = new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0 // reserved
                    ]);
                    MP41.STSD = new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1
                    ]); // entry_count
                    var majorBrand = new Uint8Array([
                        105,
                        115,
                        111,
                        109
                    ]); // isom
                    var avc1Brand = new Uint8Array([
                        97,
                        118,
                        99,
                        49
                    ]); // avc1
                    var minorVersion = new Uint8Array([
                        0,
                        0,
                        0,
                        1
                    ]);
                    MP41.FTYP = MP41.box(MP41.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);
                    MP41.DINF = MP41.box(MP41.types.dinf, MP41.box(MP41.types.dref, dref));
                };
                MP41.box = function box(type) {
                    var payload = Array.prototype.slice.call(arguments, 1), size = 8, i = payload.length, len = i, result; // calculate the total size we need to allocate
                    while(i--)size += payload[i].byteLength;
                    result = new Uint8Array(size);
                    result[0] = size >> 24 & 255;
                    result[1] = size >> 16 & 255;
                    result[2] = size >> 8 & 255;
                    result[3] = size & 255;
                    result.set(type, 4); // copy the payload into the result
                    for(i = 0, size = 8; i < len; i++){
                        // copy payload[i] array @ offset size
                        result.set(payload[i], size);
                        size += payload[i].byteLength;
                    }
                    return result;
                };
                MP41.hdlr = function hdlr(type) {
                    return MP41.box(MP41.types.hdlr, MP41.HDLR_TYPES[type]);
                };
                MP41.mdat = function mdat(data) {
                    return MP41.box(MP41.types.mdat, data);
                };
                MP41.mdhd = function mdhd(timescale, duration) {
                    duration *= timescale;
                    var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
                    var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
                    return MP41.box(MP41.types.mdhd, new Uint8Array([
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        2,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        3,
                        timescale >> 24 & 255,
                        timescale >> 16 & 255,
                        timescale >> 8 & 255,
                        timescale & 255,
                        upperWordDuration >> 24,
                        upperWordDuration >> 16 & 255,
                        upperWordDuration >> 8 & 255,
                        upperWordDuration & 255,
                        lowerWordDuration >> 24,
                        lowerWordDuration >> 16 & 255,
                        lowerWordDuration >> 8 & 255,
                        lowerWordDuration & 255,
                        85,
                        196,
                        0,
                        0
                    ]));
                };
                MP41.mdia = function mdia(track) {
                    return MP41.box(MP41.types.mdia, MP41.mdhd(track.timescale, track.duration), MP41.hdlr(track.type), MP41.minf(track));
                };
                MP41.mfhd = function mfhd(sequenceNumber) {
                    return MP41.box(MP41.types.mfhd, new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        sequenceNumber >> 24,
                        sequenceNumber >> 16 & 255,
                        sequenceNumber >> 8 & 255,
                        sequenceNumber & 255 // sequence_number
                    ]));
                };
                MP41.minf = function minf(track) {
                    if (track.type === 'audio') return MP41.box(MP41.types.minf, MP41.box(MP41.types.smhd, MP41.SMHD), MP41.DINF, MP41.stbl(track));
                    else return MP41.box(MP41.types.minf, MP41.box(MP41.types.vmhd, MP41.VMHD), MP41.DINF, MP41.stbl(track));
                };
                MP41.moof = function moof(sn, baseMediaDecodeTime, track) {
                    return MP41.box(MP41.types.moof, MP41.mfhd(sn), MP41.traf(track, baseMediaDecodeTime));
                };
                MP41.moov = function moov(tracks) {
                    var i = tracks.length, boxes = [];
                    while(i--)boxes[i] = MP41.trak(tracks[i]);
                    return MP41.box.apply(null, [
                        MP41.types.moov,
                        MP41.mvhd(tracks[0].timescale, tracks[0].duration)
                    ].concat(boxes).concat(MP41.mvex(tracks)));
                };
                MP41.mvex = function mvex(tracks) {
                    var i = tracks.length, boxes = [];
                    while(i--)boxes[i] = MP41.trex(tracks[i]);
                    return MP41.box.apply(null, [
                        MP41.types.mvex
                    ].concat(boxes));
                };
                MP41.mvhd = function mvhd(timescale, duration) {
                    duration *= timescale;
                    var upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));
                    var lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
                    var bytes = new Uint8Array([
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        2,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        3,
                        timescale >> 24 & 255,
                        timescale >> 16 & 255,
                        timescale >> 8 & 255,
                        timescale & 255,
                        upperWordDuration >> 24,
                        upperWordDuration >> 16 & 255,
                        upperWordDuration >> 8 & 255,
                        upperWordDuration & 255,
                        lowerWordDuration >> 24,
                        lowerWordDuration >> 16 & 255,
                        lowerWordDuration >> 8 & 255,
                        lowerWordDuration & 255,
                        0,
                        1,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        64,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        255,
                        255,
                        255,
                        255 // next_track_ID
                    ]);
                    return MP41.box(MP41.types.mvhd, bytes);
                };
                MP41.sdtp = function sdtp(track) {
                    var samples = track.samples || [], bytes = new Uint8Array(4 + samples.length), flags, i; // leave the full box header (4 bytes) all zero
                    // write the sample table
                    for(i = 0; i < samples.length; i++){
                        flags = samples[i].flags;
                        bytes[i + 4] = flags.dependsOn << 4 | flags.isDependedOn << 2 | flags.hasRedundancy;
                    }
                    return MP41.box(MP41.types.sdtp, bytes);
                };
                MP41.stbl = function stbl(track) {
                    return MP41.box(MP41.types.stbl, MP41.stsd(track), MP41.box(MP41.types.stts, MP41.STTS), MP41.box(MP41.types.stsc, MP41.STSC), MP41.box(MP41.types.stsz, MP41.STSZ), MP41.box(MP41.types.stco, MP41.STCO));
                };
                MP41.avc1 = function avc1(track) {
                    var sps = [], pps = [], i, data, len; // assemble the SPSs
                    for(i = 0; i < track.sps.length; i++){
                        data = track.sps[i];
                        len = data.byteLength;
                        sps.push(len >>> 8 & 255);
                        sps.push(len & 255); // SPS
                        sps = sps.concat(Array.prototype.slice.call(data));
                    } // assemble the PPSs
                    for(i = 0; i < track.pps.length; i++){
                        data = track.pps[i];
                        len = data.byteLength;
                        pps.push(len >>> 8 & 255);
                        pps.push(len & 255);
                        pps = pps.concat(Array.prototype.slice.call(data));
                    }
                    var avcc = MP41.box(MP41.types.avcC, new Uint8Array([
                        1,
                        sps[3],
                        sps[4],
                        sps[5],
                        255,
                        224 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets
                    ].concat(sps).concat([
                        track.pps.length // numOfPictureParameterSets
                    ]).concat(pps))), // "PPS"
                    width = track.width, height = track.height, hSpacing = track.pixelRatio[0], vSpacing = track.pixelRatio[1];
                    return MP41.box(MP41.types.avc1, new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        width >> 8 & 255,
                        width & 255,
                        height >> 8 & 255,
                        height & 255,
                        0,
                        72,
                        0,
                        0,
                        0,
                        72,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        18,
                        100,
                        97,
                        105,
                        108,
                        121,
                        109,
                        111,
                        116,
                        105,
                        111,
                        110,
                        47,
                        104,
                        108,
                        115,
                        46,
                        106,
                        115,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        24,
                        17,
                        17
                    ]), avcc, MP41.box(MP41.types.btrt, new Uint8Array([
                        0,
                        28,
                        156,
                        128,
                        0,
                        45,
                        198,
                        192,
                        0,
                        45,
                        198,
                        192
                    ])), MP41.box(MP41.types.pasp, new Uint8Array([
                        hSpacing >> 24,
                        hSpacing >> 16 & 255,
                        hSpacing >> 8 & 255,
                        hSpacing & 255,
                        vSpacing >> 24,
                        vSpacing >> 16 & 255,
                        vSpacing >> 8 & 255,
                        vSpacing & 255
                    ])));
                };
                MP41.esds = function esds(track) {
                    var configlen = track.config.length;
                    return new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        3,
                        23 + configlen,
                        0,
                        1,
                        0,
                        4,
                        15 + configlen,
                        64,
                        21,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        5 // descriptor_type
                    ].concat([
                        configlen
                    ]).concat(track.config).concat([
                        6,
                        1,
                        2
                    ])); // GASpecificConfig)); // length + audio config descriptor
                };
                MP41.mp4a = function mp4a(track) {
                    var samplerate = track.samplerate;
                    return MP41.box(MP41.types.mp4a, new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        track.channelCount,
                        0,
                        16,
                        0,
                        0,
                        0,
                        0,
                        samplerate >> 8 & 255,
                        samplerate & 255,
                        0,
                        0
                    ]), MP41.box(MP41.types.esds, MP41.esds(track)));
                };
                MP41.mp3 = function mp3(track) {
                    var samplerate = track.samplerate;
                    return MP41.box(MP41.types['.mp3'], new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        track.channelCount,
                        0,
                        16,
                        0,
                        0,
                        0,
                        0,
                        samplerate >> 8 & 255,
                        samplerate & 255,
                        0,
                        0
                    ]));
                };
                MP41.stsd = function stsd(track) {
                    if (track.type === 'audio') {
                        if (!track.isAAC && track.codec === 'mp3') return MP41.box(MP41.types.stsd, MP41.STSD, MP41.mp3(track));
                        return MP41.box(MP41.types.stsd, MP41.STSD, MP41.mp4a(track));
                    } else return MP41.box(MP41.types.stsd, MP41.STSD, MP41.avc1(track));
                };
                MP41.tkhd = function tkhd(track) {
                    var id = track.id, duration = track.duration * track.timescale, width = track.width, height = track.height, upperWordDuration = Math.floor(duration / (UINT32_MAX + 1)), lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));
                    return MP41.box(MP41.types.tkhd, new Uint8Array([
                        1,
                        0,
                        0,
                        7,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        2,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        3,
                        id >> 24 & 255,
                        id >> 16 & 255,
                        id >> 8 & 255,
                        id & 255,
                        0,
                        0,
                        0,
                        0,
                        upperWordDuration >> 24,
                        upperWordDuration >> 16 & 255,
                        upperWordDuration >> 8 & 255,
                        upperWordDuration & 255,
                        lowerWordDuration >> 24,
                        lowerWordDuration >> 16 & 255,
                        lowerWordDuration >> 8 & 255,
                        lowerWordDuration & 255,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        64,
                        0,
                        0,
                        0,
                        width >> 8 & 255,
                        width & 255,
                        0,
                        0,
                        height >> 8 & 255,
                        height & 255,
                        0,
                        0 // height
                    ]));
                };
                MP41.traf = function traf(track, baseMediaDecodeTime) {
                    var sampleDependencyTable = MP41.sdtp(track), id = track.id, upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1)), lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
                    return MP41.box(MP41.types.traf, MP41.box(MP41.types.tfhd, new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        id >> 24,
                        id >> 16 & 255,
                        id >> 8 & 255,
                        id & 255 // track_ID
                    ])), MP41.box(MP41.types.tfdt, new Uint8Array([
                        1,
                        0,
                        0,
                        0,
                        upperWordBaseMediaDecodeTime >> 24,
                        upperWordBaseMediaDecodeTime >> 16 & 255,
                        upperWordBaseMediaDecodeTime >> 8 & 255,
                        upperWordBaseMediaDecodeTime & 255,
                        lowerWordBaseMediaDecodeTime >> 24,
                        lowerWordBaseMediaDecodeTime >> 16 & 255,
                        lowerWordBaseMediaDecodeTime >> 8 & 255,
                        lowerWordBaseMediaDecodeTime & 255
                    ])), MP41.trun(track, sampleDependencyTable.length + 16 + 20 + 8 + 16 + 8 + 8), sampleDependencyTable);
                };
                MP41.trak = function trak(track) {
                    track.duration = track.duration || 4294967295;
                    return MP41.box(MP41.types.trak, MP41.tkhd(track), MP41.mdia(track));
                };
                MP41.trex = function trex(track) {
                    var id = track.id;
                    return MP41.box(MP41.types.trex, new Uint8Array([
                        0,
                        0,
                        0,
                        0,
                        id >> 24,
                        id >> 16 & 255,
                        id >> 8 & 255,
                        id & 255,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        1 // default_sample_flags
                    ]));
                };
                MP41.trun = function trun(track, offset) {
                    var samples = track.samples || [], len = samples.length, arraylen = 12 + 16 * len, array = new Uint8Array(arraylen), i, sample, duration, size, flags, cts;
                    offset += 8 + arraylen;
                    array.set([
                        0,
                        0,
                        15,
                        1,
                        len >>> 24 & 255,
                        len >>> 16 & 255,
                        len >>> 8 & 255,
                        len & 255,
                        offset >>> 24 & 255,
                        offset >>> 16 & 255,
                        offset >>> 8 & 255,
                        offset & 255 // data_offset
                    ], 0);
                    for(i = 0; i < len; i++){
                        sample = samples[i];
                        duration = sample.duration;
                        size = sample.size;
                        flags = sample.flags;
                        cts = sample.cts;
                        array.set([
                            duration >>> 24 & 255,
                            duration >>> 16 & 255,
                            duration >>> 8 & 255,
                            duration & 255,
                            size >>> 24 & 255,
                            size >>> 16 & 255,
                            size >>> 8 & 255,
                            size & 255,
                            flags.isLeading << 2 | flags.dependsOn,
                            flags.isDependedOn << 6 | flags.hasRedundancy << 4 | flags.paddingValue << 1 | flags.isNonSync,
                            flags.degradPrio & 61440,
                            flags.degradPrio & 15,
                            cts >>> 24 & 255,
                            cts >>> 16 & 255,
                            cts >>> 8 & 255,
                            cts & 255 // sample_composition_time_offset
                        ], 12 + 16 * i);
                    }
                    return MP41.box(MP41.types.trun, array);
                };
                MP41.initSegment = function initSegment(tracks) {
                    if (!MP41.types) MP41.init();
                    var movie = MP41.moov(tracks), result;
                    result = new Uint8Array(MP41.FTYP.byteLength + movie.byteLength);
                    result.set(MP41.FTYP);
                    result.set(movie, MP41.FTYP.byteLength);
                    return result;
                };
                return MP41;
            }();
            /* harmony default export */ var mp4_generator = MP4;
            // CONCATENATED MODULE: ./src/utils/timescale-conversion.ts
            var MPEG_TS_CLOCK_FREQ_HZ = 90000;
            function toTimescaleFromScale(value, destScale, srcScale, round) {
                if (srcScale === void 0) srcScale = 1;
                if (round === void 0) round = false;
                return toTimescaleFromBase(value, destScale, 1 / srcScale);
            }
            function toTimescaleFromBase(value, destScale, srcBase, round) {
                if (srcBase === void 0) srcBase = 1;
                if (round === void 0) round = false;
                var result = value * destScale * srcBase; // equivalent to `(value * scale) / (1 / base)`
                return round ? Math.round(result) : result;
            }
            function toMsFromMpegTsClock(value, round) {
                if (round === void 0) round = false;
                return toTimescaleFromBase(value, 1000, 1 / MPEG_TS_CLOCK_FREQ_HZ, round);
            }
            function toMpegTsClockFromTimescale(value, srcScale) {
                if (srcScale === void 0) srcScale = 1;
                return toTimescaleFromBase(value, MPEG_TS_CLOCK_FREQ_HZ, 1 / srcScale);
            }
            // CONCATENATED MODULE: ./src/remux/mp4-remuxer.js
            /**
 * fMP4 remuxer
*/ var MAX_SILENT_FRAME_DURATION_90KHZ = toMpegTsClockFromTimescale(10);
            var PTS_DTS_SHIFT_TOLERANCE_90KHZ = toMpegTsClockFromTimescale(0.2);
            var chromeVersion = null;
            var mp4_remuxer_MP4Remuxer = /*#__PURE__*/ function() {
                function MP4Remuxer(observer, config, typeSupported, vendor) {
                    this.observer = observer;
                    this.config = config;
                    this.typeSupported = typeSupported;
                    this.ISGenerated = false;
                    if (chromeVersion === null) {
                        var result = navigator.userAgent.match(/Chrome\/(\d+)/i);
                        chromeVersion = result ? parseInt(result[1]) : 0;
                    }
                }
                var _proto = MP4Remuxer.prototype;
                _proto.destroy = function destroy() {
                };
                _proto.resetTimeStamp = function resetTimeStamp(defaultTimeStamp) {
                    this._initPTS = this._initDTS = defaultTimeStamp;
                };
                _proto.resetInitSegment = function resetInitSegment() {
                    this.ISGenerated = false;
                };
                _proto.getVideoStartPts = function getVideoStartPts(videoSamples) {
                    var rolloverDetected = false;
                    var startPTS = videoSamples.reduce(function(minPTS, sample) {
                        var delta = sample.pts - minPTS;
                        if (delta < -4294967296) {
                            // 2^32, see PTSNormalize for reasoning, but we're hitting a rollover here, and we don't want that to impact the timeOffset calculation
                            rolloverDetected = true;
                            return PTSNormalize(minPTS, sample.pts);
                        } else if (delta > 0) return minPTS;
                        else return sample.pts;
                    }, videoSamples[0].pts);
                    if (rolloverDetected) logger["logger"].debug('PTS rollover detected');
                    return startPTS;
                };
                _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {
                    // generate Init Segment if needed
                    if (!this.ISGenerated) this.generateIS(audioTrack, videoTrack, timeOffset);
                    if (this.ISGenerated) {
                        var nbAudioSamples = audioTrack.samples.length;
                        var nbVideoSamples = videoTrack.samples.length;
                        var audioTimeOffset = timeOffset;
                        var videoTimeOffset = timeOffset;
                        if (nbAudioSamples && nbVideoSamples) {
                            // timeOffset is expected to be the offset of the first timestamp of this fragment (first DTS)
                            // if first audio DTS is not aligned with first video DTS then we need to take that into account
                            // when providing timeOffset to remuxAudio / remuxVideo. if we don't do that, there might be a permanent / small
                            // drift between audio and video streams
                            var startPTS = this.getVideoStartPts(videoTrack.samples);
                            var tsDelta = PTSNormalize(audioTrack.samples[0].pts, startPTS) - startPTS;
                            var audiovideoTimestampDelta = tsDelta / videoTrack.inputTimeScale;
                            audioTimeOffset += Math.max(0, audiovideoTimestampDelta);
                            videoTimeOffset += Math.max(0, -audiovideoTimestampDelta);
                        } // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is
                        // calculated in remuxAudio.
                        // logger.log('nb AAC samples:' + audioTrack.samples.length);
                        if (nbAudioSamples) {
                            // if initSegment was generated without video samples, regenerate it again
                            if (!audioTrack.timescale) {
                                logger["logger"].warn('regenerate InitSegment as audio detected');
                                this.generateIS(audioTrack, videoTrack, timeOffset);
                            }
                            var audioData = this.remuxAudio(audioTrack, audioTimeOffset, contiguous, accurateTimeOffset); // logger.log('nb AVC samples:' + videoTrack.samples.length);
                            if (nbVideoSamples) {
                                var audioTrackLength;
                                if (audioData) audioTrackLength = audioData.endPTS - audioData.startPTS;
                                 // if initSegment was generated without video samples, regenerate it again
                                if (!videoTrack.timescale) {
                                    logger["logger"].warn('regenerate InitSegment as video detected');
                                    this.generateIS(audioTrack, videoTrack, timeOffset);
                                }
                                this.remuxVideo(videoTrack, videoTimeOffset, contiguous, audioTrackLength);
                            }
                        } else // logger.log('nb AVC samples:' + videoTrack.samples.length);
                        if (nbVideoSamples) {
                            var videoData = this.remuxVideo(videoTrack, videoTimeOffset, contiguous, 0, accurateTimeOffset);
                            if (videoData && audioTrack.codec) this.remuxEmptyAudio(audioTrack, audioTimeOffset, contiguous, videoData);
                        }
                    } // logger.log('nb ID3 samples:' + audioTrack.samples.length);
                    if (id3Track.samples.length) this.remuxID3(id3Track, timeOffset);
                     // logger.log('nb ID3 samples:' + audioTrack.samples.length);
                    if (textTrack.samples.length) this.remuxText(textTrack, timeOffset);
                     // notify end of parsing
                    this.observer.trigger(events["default"].FRAG_PARSED);
                };
                _proto.generateIS = function generateIS(audioTrack, videoTrack, timeOffset) {
                    var observer = this.observer, audioSamples = audioTrack.samples, videoSamples = videoTrack.samples, typeSupported = this.typeSupported, container = 'audio/mp4', tracks = {
                    }, data = {
                        tracks: tracks
                    }, computePTSDTS = this._initPTS === undefined, initPTS, initDTS;
                    if (computePTSDTS) initPTS = initDTS = Infinity;
                    if (audioTrack.config && audioSamples.length) {
                        // let's use audio sampling rate as MP4 time scale.
                        // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)
                        // using audio sampling rate here helps having an integer MP4 frame duration
                        // this avoids potential rounding issue and AV sync issue
                        audioTrack.timescale = audioTrack.samplerate;
                        logger["logger"].log("audio sampling rate : " + audioTrack.samplerate);
                        if (!audioTrack.isAAC) {
                            if (typeSupported.mpeg) {
                                // Chrome and Safari
                                container = 'audio/mpeg';
                                audioTrack.codec = '';
                            } else if (typeSupported.mp3) // Firefox
                            audioTrack.codec = 'mp3';
                        }
                        tracks.audio = {
                            container: container,
                            codec: audioTrack.codec,
                            initSegment: !audioTrack.isAAC && typeSupported.mpeg ? new Uint8Array() : mp4_generator.initSegment([
                                audioTrack
                            ]),
                            metadata: {
                                channelCount: audioTrack.channelCount
                            }
                        };
                        if (computePTSDTS) // remember first PTS of this demuxing context. for audio, PTS = DTS
                        initPTS = initDTS = audioSamples[0].pts - Math.round(audioTrack.inputTimeScale * timeOffset);
                    }
                    if (videoTrack.sps && videoTrack.pps && videoSamples.length) {
                        // let's use input time scale as MP4 video timescale
                        // we use input time scale straight away to avoid rounding issues on frame duration / cts computation
                        var inputTimeScale = videoTrack.inputTimeScale;
                        videoTrack.timescale = inputTimeScale;
                        tracks.video = {
                            container: 'video/mp4',
                            codec: videoTrack.codec,
                            initSegment: mp4_generator.initSegment([
                                videoTrack
                            ]),
                            metadata: {
                                width: videoTrack.width,
                                height: videoTrack.height
                            }
                        };
                        if (computePTSDTS) {
                            var startPTS = this.getVideoStartPts(videoSamples);
                            var startOffset = Math.round(inputTimeScale * timeOffset);
                            initDTS = Math.min(initDTS, PTSNormalize(videoSamples[0].dts, startPTS) - startOffset);
                            initPTS = Math.min(initPTS, startPTS - startOffset);
                            this.observer.trigger(events["default"].INIT_PTS_FOUND, {
                                initPTS: initPTS
                            });
                        }
                    } else if (computePTSDTS && tracks.audio) // initPTS found for audio-only stream with main and alt audio
                    this.observer.trigger(events["default"].INIT_PTS_FOUND, {
                        initPTS: initPTS
                    });
                    if (Object.keys(tracks).length) {
                        observer.trigger(events["default"].FRAG_PARSING_INIT_SEGMENT, data);
                        this.ISGenerated = true;
                        if (computePTSDTS) {
                            this._initPTS = initPTS;
                            this._initDTS = initDTS;
                        }
                    } else observer.trigger(events["default"].ERROR, {
                        type: errors["ErrorTypes"].MEDIA_ERROR,
                        details: errors["ErrorDetails"].FRAG_PARSING_ERROR,
                        fatal: false,
                        reason: 'no audio/video samples found'
                    });
                };
                _proto.remuxVideo = function remuxVideo(track, timeOffset, contiguous, audioTrackLength) {
                    var timeScale = track.timescale;
                    var inputSamples = track.samples;
                    var outputSamples = [];
                    var nbSamples = inputSamples.length;
                    var initPTS = this._initPTS;
                    var offset = 8;
                    var mp4SampleDuration;
                    var mdat;
                    var moof;
                    var firstDTS;
                    var lastDTS;
                    var minPTS = Number.POSITIVE_INFINITY;
                    var maxPTS = Number.NEGATIVE_INFINITY;
                    var ptsDtsShift = 0;
                    var sortSamples = false; // if parsed fragment is contiguous with last one, let's use last DTS value as reference
                    var nextAvcDts = this.nextAvcDts;
                    if (nbSamples === 0) return;
                    if (!contiguous) {
                        var pts = timeOffset * timeScale;
                        var cts = inputSamples[0].pts - PTSNormalize(inputSamples[0].dts, inputSamples[0].pts); // if not contiguous, let's use target timeOffset
                        nextAvcDts = pts - cts;
                    } // PTS is coded on 33bits, and can loop from -2^32 to 2^32
                    // PTSNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value
                    for(var i = 0; i < nbSamples; i++){
                        var sample = inputSamples[i];
                        sample.pts = PTSNormalize(sample.pts - initPTS, nextAvcDts);
                        sample.dts = PTSNormalize(sample.dts - initPTS, nextAvcDts);
                        if (sample.dts > sample.pts) ptsDtsShift = Math.max(Math.min(ptsDtsShift, sample.pts - sample.dts), -1 * PTS_DTS_SHIFT_TOLERANCE_90KHZ);
                        if (sample.dts < inputSamples[i > 0 ? i - 1 : i].dts) sortSamples = true;
                    } // sort video samples by DTS then PTS then demux id order
                    if (sortSamples) inputSamples.sort(function(a, b) {
                        var deltadts = a.dts - b.dts;
                        var deltapts = a.pts - b.pts;
                        return deltadts || deltapts || a.id - b.id;
                    });
                     // Get first/last DTS
                    firstDTS = inputSamples[0].dts;
                    lastDTS = inputSamples[nbSamples - 1].dts; // on Safari let's signal the same sample duration for all samples
                    // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS
                    // set this constant duration as being the avg delta between consecutive DTS.
                    var averageSampleDuration = Math.round((lastDTS - firstDTS) / (nbSamples - 1)); // handle broken streams with PTS < DTS, tolerance up 0.2 seconds
                    if (ptsDtsShift < 0) {
                        if (ptsDtsShift < averageSampleDuration * -2) {
                            // Fix for "CNN special report, with CC" in test-streams (including Safari browser)
                            // With large PTS < DTS errors such as this, we want to correct CTS while maintaining increasing DTS values
                            logger["logger"].warn("PTS < DTS detected in video samples, offsetting DTS from PTS by " + toMsFromMpegTsClock(-averageSampleDuration, true) + " ms");
                            var lastDts = ptsDtsShift;
                            for(var _i = 0; _i < nbSamples; _i++){
                                inputSamples[_i].dts = lastDts = Math.max(lastDts, inputSamples[_i].pts - averageSampleDuration);
                                inputSamples[_i].pts = Math.max(lastDts, inputSamples[_i].pts);
                            }
                        } else {
                            // Fix for "Custom IV with bad PTS DTS" in test-streams
                            // With smaller PTS < DTS errors we can simply move all DTS back. This increases CTS without causing buffer gaps or decode errors in Safari
                            logger["logger"].warn("PTS < DTS detected in video samples, shifting DTS by " + toMsFromMpegTsClock(ptsDtsShift, true) + " ms to overcome this issue");
                            for(var _i2 = 0; _i2 < nbSamples; _i2++)inputSamples[_i2].dts = inputSamples[_i2].dts + ptsDtsShift;
                        }
                        firstDTS = inputSamples[0].dts;
                        lastDTS = inputSamples[nbSamples - 1].dts;
                    } // if fragment are contiguous, detect hole/overlapping between fragments
                    if (contiguous) {
                        // check timestamp continuity across consecutive fragments (this is to remove inter-fragment gap/hole)
                        var delta = firstDTS - nextAvcDts;
                        var foundHole = delta > averageSampleDuration;
                        var foundOverlap = delta < -1;
                        if (foundHole || foundOverlap) {
                            if (foundHole) logger["logger"].warn("AVC: " + toMsFromMpegTsClock(delta, true) + " ms (" + delta + "dts) hole between fragments detected, filling it");
                            else logger["logger"].warn("AVC: " + toMsFromMpegTsClock(-delta, true) + " ms (" + delta + "dts) overlapping between fragments detected");
                            firstDTS = nextAvcDts;
                            var firstPTS = inputSamples[0].pts - delta;
                            inputSamples[0].dts = firstDTS;
                            inputSamples[0].pts = firstPTS;
                            logger["logger"].log("Video: First PTS/DTS adjusted: " + toMsFromMpegTsClock(firstPTS, true) + "/" + toMsFromMpegTsClock(firstDTS, true) + ", delta: " + toMsFromMpegTsClock(delta, true) + " ms");
                        }
                    }
                    if (chromeVersion && chromeVersion < 75) firstDTS = Math.max(0, firstDTS);
                    var nbNalu = 0;
                    var naluLen = 0;
                    for(var _i3 = 0; _i3 < nbSamples; _i3++){
                        // compute total/avc sample length and nb of NAL units
                        var _sample = inputSamples[_i3];
                        var units = _sample.units;
                        var nbUnits = units.length;
                        var sampleLen = 0;
                        for(var j = 0; j < nbUnits; j++)sampleLen += units[j].data.length;
                        naluLen += sampleLen;
                        nbNalu += nbUnits;
                        _sample.length = sampleLen; // normalize PTS/DTS
                        // ensure sample monotonic DTS
                        _sample.dts = Math.max(_sample.dts, firstDTS); // ensure that computed value is greater or equal than sample DTS
                        _sample.pts = Math.max(_sample.pts, _sample.dts, 0);
                        minPTS = Math.min(_sample.pts, minPTS);
                        maxPTS = Math.max(_sample.pts, maxPTS);
                    }
                    lastDTS = inputSamples[nbSamples - 1].dts;
                    /* concatenate the video data and construct the mdat in place
      (need 8 more bytes to fill length and mpdat type) */ var mdatSize = naluLen + 4 * nbNalu + 8;
                    try {
                        mdat = new Uint8Array(mdatSize);
                    } catch (err) {
                        this.observer.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].MUX_ERROR,
                            details: errors["ErrorDetails"].REMUX_ALLOC_ERROR,
                            fatal: false,
                            bytes: mdatSize,
                            reason: "fail allocating video mdat " + mdatSize
                        });
                        return;
                    }
                    var view = new DataView(mdat.buffer);
                    view.setUint32(0, mdatSize);
                    mdat.set(mp4_generator.types.mdat, 4);
                    for(var _i4 = 0; _i4 < nbSamples; _i4++){
                        var avcSample = inputSamples[_i4];
                        var avcSampleUnits = avcSample.units;
                        var mp4SampleLength = 0;
                        var compositionTimeOffset = void 0; // convert NALU bitstream to MP4 format (prepend NALU with size field)
                        for(var _j = 0, _nbUnits = avcSampleUnits.length; _j < _nbUnits; _j++){
                            var unit = avcSampleUnits[_j];
                            var unitData = unit.data;
                            var unitDataLen = unit.data.byteLength;
                            view.setUint32(offset, unitDataLen);
                            offset += 4;
                            mdat.set(unitData, offset);
                            offset += unitDataLen;
                            mp4SampleLength += 4 + unitDataLen;
                        } // expected sample duration is the Decoding Timestamp diff of consecutive samples
                        if (_i4 < nbSamples - 1) mp4SampleDuration = inputSamples[_i4 + 1].dts - avcSample.dts;
                        else {
                            var config = this.config;
                            var lastFrameDuration = avcSample.dts - inputSamples[_i4 > 0 ? _i4 - 1 : _i4].dts;
                            if (config.stretchShortVideoTrack) {
                                // In some cases, a segment's audio track duration may exceed the video track duration.
                                // Since we've already remuxed audio, and we know how long the audio track is, we look to
                                // see if the delta to the next segment is longer than maxBufferHole.
                                // If so, playback would potentially get stuck, so we artificially inflate
                                // the duration of the last frame to minimize any potential gap between segments.
                                var maxBufferHole = config.maxBufferHole;
                                var gapTolerance = Math.floor(maxBufferHole * timeScale);
                                var deltaToFrameEnd = (audioTrackLength ? minPTS + audioTrackLength * timeScale : this.nextAudioPts) - avcSample.pts;
                                if (deltaToFrameEnd > gapTolerance) {
                                    // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video
                                    // frame overlap. maxBufferHole should be >> lastFrameDuration anyway.
                                    mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;
                                    if (mp4SampleDuration < 0) mp4SampleDuration = lastFrameDuration;
                                    logger["logger"].log("It is approximately " + toMsFromMpegTsClock(deltaToFrameEnd, false) + " ms to the next segment; using duration " + toMsFromMpegTsClock(mp4SampleDuration, false) + " ms for the last video frame.");
                                } else mp4SampleDuration = lastFrameDuration;
                            } else mp4SampleDuration = lastFrameDuration;
                        }
                        compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts); // console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${avcSample.pts}/${avcSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(avcSample.pts/4294967296).toFixed(3)}');
                        outputSamples.push({
                            size: mp4SampleLength,
                            // constant duration
                            duration: mp4SampleDuration,
                            cts: compositionTimeOffset,
                            flags: {
                                isLeading: 0,
                                isDependedOn: 0,
                                hasRedundancy: 0,
                                degradPrio: 0,
                                dependsOn: avcSample.key ? 2 : 1,
                                isNonSync: avcSample.key ? 0 : 1
                            }
                        });
                    } // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)
                    this.nextAvcDts = lastDTS + mp4SampleDuration;
                    var dropped = track.dropped;
                    track.nbNalu = 0;
                    track.dropped = 0;
                    if (outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {
                        var flags = outputSamples[0].flags; // chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue
                        // https://code.google.com/p/chromium/issues/detail?id=229412
                        flags.dependsOn = 2;
                        flags.isNonSync = 0;
                    }
                    track.samples = outputSamples;
                    moof = mp4_generator.moof(track.sequenceNumber++, firstDTS, track);
                    track.samples = [];
                    var data = {
                        data1: moof,
                        data2: mdat,
                        startPTS: minPTS / timeScale,
                        endPTS: (maxPTS + mp4SampleDuration) / timeScale,
                        startDTS: firstDTS / timeScale,
                        endDTS: this.nextAvcDts / timeScale,
                        type: 'video',
                        hasAudio: false,
                        hasVideo: true,
                        nb: outputSamples.length,
                        dropped: dropped
                    };
                    this.observer.trigger(events["default"].FRAG_PARSING_DATA, data);
                    return data;
                };
                _proto.remuxAudio = function remuxAudio(track, timeOffset, contiguous, accurateTimeOffset) {
                    var inputTimeScale = track.inputTimeScale;
                    var mp4timeScale = track.timescale;
                    var scaleFactor = inputTimeScale / mp4timeScale;
                    var mp4SampleDuration = track.isAAC ? 1024 : 1152;
                    var inputSampleDuration = mp4SampleDuration * scaleFactor;
                    var initPTS = this._initPTS;
                    var rawMPEG = !track.isAAC && this.typeSupported.mpeg;
                    var mp4Sample;
                    var fillFrame;
                    var mdat;
                    var moof;
                    var firstPTS;
                    var lastPTS;
                    var offset = rawMPEG ? 0 : 8;
                    var inputSamples = track.samples;
                    var outputSamples = [];
                    var nextAudioPts = this.nextAudioPts; // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),
                    // for sake of clarity:
                    // consecutive fragments are frags with
                    //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR
                    //  - less than 20 audio frames distance
                    // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
                    // this helps ensuring audio continuity
                    // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame
                    contiguous |= inputSamples.length && nextAudioPts && (accurateTimeOffset && Math.abs(timeOffset - nextAudioPts / inputTimeScale) < 0.1 || Math.abs(inputSamples[0].pts - nextAudioPts - initPTS) < 20 * inputSampleDuration); // compute normalized PTS
                    inputSamples.forEach(function(sample) {
                        sample.pts = sample.dts = PTSNormalize(sample.pts - initPTS, timeOffset * inputTimeScale);
                    }); // filter out sample with negative PTS that are not playable anyway
                    // if we don't remove these negative samples, they will shift all audio samples forward.
                    // leading to audio overlap between current / next fragment
                    inputSamples = inputSamples.filter(function(sample) {
                        return sample.pts >= 0;
                    }); // in case all samples have negative PTS, and have been filtered out, return now
                    if (inputSamples.length === 0) return;
                    if (!contiguous) {
                        if (!accurateTimeOffset) // if frag are mot contiguous and if we cant trust time offset, let's use first sample PTS as next audio PTS
                        nextAudioPts = inputSamples[0].pts;
                        else // if timeOffset is accurate, let's use it as predicted next audio PTS
                        nextAudioPts = Math.max(0, timeOffset * inputTimeScale);
                    } // If the audio track is missing samples, the frames seem to get "left-shifted" within the
                    // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.
                    // In an effort to prevent this from happening, we inject frames here where there are gaps.
                    // When possible, we inject a silent frame; when that's not possible, we duplicate the last
                    // frame.
                    if (track.isAAC) {
                        var maxAudioFramesDrift = this.config.maxAudioFramesDrift;
                        for(var i = 0, nextPts = nextAudioPts; i < inputSamples.length;){
                            // First, let's see how far off this frame is from where we expect it to be
                            var sample = inputSamples[i];
                            var pts = sample.pts;
                            var delta = pts - nextPts; // If we're overlapping by more than a duration, drop this sample
                            if (delta <= -maxAudioFramesDrift * inputSampleDuration) {
                                if (contiguous || i > 0) {
                                    logger["logger"].warn("Dropping 1 audio frame @ " + toMsFromMpegTsClock(nextPts, true) / 1000 + "s due to " + toMsFromMpegTsClock(delta, true) + " ms overlap.");
                                    inputSamples.splice(i, 1); // Don't touch nextPtsNorm or i
                                } else {
                                    // When changing qualities we can't trust that audio has been appended up to nextAudioPts
                                    // Warn about the overlap but do not drop samples as that can introduce buffer gaps
                                    logger["logger"].warn("Audio frame @ " + toMsFromMpegTsClock(pts, true) / 1000 + "s overlaps nextAudioPts by " + toMsFromMpegTsClock(delta, true) + " ms.");
                                    nextPts = pts + inputSampleDuration;
                                    i++;
                                }
                            } else if (delta >= maxAudioFramesDrift * inputSampleDuration && delta < MAX_SILENT_FRAME_DURATION_90KHZ && nextPts) {
                                var missing = Math.round(delta / inputSampleDuration);
                                logger["logger"].warn("Injecting " + missing + " audio frames @ " + toMsFromMpegTsClock(nextPts, true) / 1000 + "s due to " + toMsFromMpegTsClock(delta, true) + " ms gap.");
                                for(var j = 0; j < missing; j++){
                                    var newStamp = Math.max(nextPts, 0);
                                    fillFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
                                    if (!fillFrame) {
                                        logger["logger"].log('Unable to get silent frame for given audio codec; duplicating last frame instead.');
                                        fillFrame = sample.unit.subarray();
                                    }
                                    inputSamples.splice(i, 0, {
                                        unit: fillFrame,
                                        pts: newStamp,
                                        dts: newStamp
                                    });
                                    nextPts += inputSampleDuration;
                                    i++;
                                } // Adjust sample to next expected pts
                                sample.pts = sample.dts = nextPts;
                                nextPts += inputSampleDuration;
                                i++;
                            } else {
                                sample.pts = sample.dts = nextPts;
                                nextPts += inputSampleDuration;
                                i++;
                            }
                        }
                    } // compute mdat size, as we eventually filtered/added some samples
                    var nbSamples = inputSamples.length;
                    var mdatSize = 0;
                    while(nbSamples--)mdatSize += inputSamples[nbSamples].unit.byteLength;
                    for(var _j2 = 0, _nbSamples = inputSamples.length; _j2 < _nbSamples; _j2++){
                        var audioSample = inputSamples[_j2];
                        var unit = audioSample.unit;
                        var _pts = audioSample.pts; // logger.log(`Audio/PTS:${toMsFromMpegTsClock(pts, true)}`);
                        // if not first sample
                        if (lastPTS !== undefined && mp4Sample) mp4Sample.duration = Math.round((_pts - lastPTS) / scaleFactor);
                        else {
                            var _delta = _pts - nextAudioPts;
                            var numMissingFrames = 0; // if fragment are contiguous, detect hole/overlapping between fragments
                            // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)
                            if (contiguous && track.isAAC) // log delta
                            {
                                if (_delta) {
                                    if (_delta > 0 && _delta < MAX_SILENT_FRAME_DURATION_90KHZ) {
                                        // Q: why do we have to round here, shouldn't this always result in an integer if timestamps are correct,
                                        // and if not, shouldn't we actually Math.ceil() instead?
                                        numMissingFrames = Math.round((_pts - nextAudioPts) / inputSampleDuration);
                                        logger["logger"].log(toMsFromMpegTsClock(_delta, true) + " ms hole between AAC samples detected,filling it");
                                        if (numMissingFrames > 0) {
                                            fillFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
                                            if (!fillFrame) fillFrame = unit.subarray();
                                            mdatSize += numMissingFrames * fillFrame.length;
                                        } // if we have frame overlap, overlapping for more than half a frame duraion
                                    } else if (_delta < -12) {
                                        // drop overlapping audio frames... browser will deal with it
                                        logger["logger"].log("drop overlapping AAC sample, expected/parsed/delta: " + toMsFromMpegTsClock(nextAudioPts, true) + " ms / " + toMsFromMpegTsClock(_pts, true) + " ms / " + toMsFromMpegTsClock(-_delta, true) + " ms");
                                        mdatSize -= unit.byteLength;
                                        continue;
                                    } // set PTS/DTS to expected PTS/DTS
                                    _pts = nextAudioPts;
                                }
                            } // remember first PTS of our audioSamples
                            firstPTS = _pts;
                            if (mdatSize > 0) {
                                mdatSize += offset;
                                try {
                                    mdat = new Uint8Array(mdatSize);
                                } catch (err) {
                                    this.observer.trigger(events["default"].ERROR, {
                                        type: errors["ErrorTypes"].MUX_ERROR,
                                        details: errors["ErrorDetails"].REMUX_ALLOC_ERROR,
                                        fatal: false,
                                        bytes: mdatSize,
                                        reason: "fail allocating audio mdat " + mdatSize
                                    });
                                    return;
                                }
                                if (!rawMPEG) {
                                    var view = new DataView(mdat.buffer);
                                    view.setUint32(0, mdatSize);
                                    mdat.set(mp4_generator.types.mdat, 4);
                                }
                            } else // no audio samples
                            return;
                            for(var _i5 = 0; _i5 < numMissingFrames; _i5++){
                                fillFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
                                if (!fillFrame) {
                                    logger["logger"].log('Unable to get silent frame for given audio codec; duplicating this frame instead.');
                                    fillFrame = unit.subarray();
                                }
                                mdat.set(fillFrame, offset);
                                offset += fillFrame.byteLength;
                                mp4Sample = {
                                    size: fillFrame.byteLength,
                                    cts: 0,
                                    duration: 1024,
                                    flags: {
                                        isLeading: 0,
                                        isDependedOn: 0,
                                        hasRedundancy: 0,
                                        degradPrio: 0,
                                        dependsOn: 1
                                    }
                                };
                                outputSamples.push(mp4Sample);
                            }
                        }
                        mdat.set(unit, offset);
                        var unitLen = unit.byteLength;
                        offset += unitLen; // console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${audioSample.pts}/${audioSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(audioSample.pts/4294967296).toFixed(3)}');
                        mp4Sample = {
                            size: unitLen,
                            cts: 0,
                            duration: 0,
                            flags: {
                                isLeading: 0,
                                isDependedOn: 0,
                                hasRedundancy: 0,
                                degradPrio: 0,
                                dependsOn: 1
                            }
                        };
                        outputSamples.push(mp4Sample);
                        lastPTS = _pts;
                    }
                    var lastSampleDuration = 0;
                    nbSamples = outputSamples.length; // set last sample duration as being identical to previous sample
                    if (nbSamples >= 2) {
                        lastSampleDuration = outputSamples[nbSamples - 2].duration;
                        mp4Sample.duration = lastSampleDuration;
                    }
                    if (nbSamples) {
                        // next audio sample PTS should be equal to last sample PTS + duration
                        this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSampleDuration; // logger.log('Audio/PTS/PTSend:' + audioSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));
                        track.samples = outputSamples;
                        if (rawMPEG) moof = new Uint8Array();
                        else moof = mp4_generator.moof(track.sequenceNumber++, firstPTS / scaleFactor, track);
                        track.samples = [];
                        var start = firstPTS / inputTimeScale;
                        var end = nextAudioPts / inputTimeScale;
                        var audioData = {
                            data1: moof,
                            data2: mdat,
                            startPTS: start,
                            endPTS: end,
                            startDTS: start,
                            endDTS: end,
                            type: 'audio',
                            hasAudio: true,
                            hasVideo: false,
                            nb: nbSamples
                        };
                        this.observer.trigger(events["default"].FRAG_PARSING_DATA, audioData);
                        return audioData;
                    }
                    return null;
                };
                _proto.remuxEmptyAudio = function remuxEmptyAudio(track, timeOffset, contiguous, videoData) {
                    var inputTimeScale = track.inputTimeScale;
                    var mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale;
                    var scaleFactor = inputTimeScale / mp4timeScale;
                    var nextAudioPts = this.nextAudioPts; // sync with video's timestamp
                    var startDTS = (nextAudioPts !== undefined ? nextAudioPts : videoData.startDTS * inputTimeScale) + this._initDTS;
                    var endDTS = videoData.endDTS * inputTimeScale + this._initDTS; // one sample's duration value
                    var sampleDuration = 1024;
                    var frameDuration = scaleFactor * sampleDuration; // samples count of this segment's duration
                    var nbSamples = Math.ceil((endDTS - startDTS) / frameDuration); // silent frame
                    var silentFrame = aac_helper.getSilentFrame(track.manifestCodec || track.codec, track.channelCount);
                    logger["logger"].warn('remux empty Audio'); // Can't remux if we can't generate a silent frame...
                    if (!silentFrame) {
                        logger["logger"].trace('Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');
                        return;
                    }
                    var samples = [];
                    for(var i = 0; i < nbSamples; i++){
                        var stamp = startDTS + i * frameDuration;
                        samples.push({
                            unit: silentFrame,
                            pts: stamp,
                            dts: stamp
                        });
                    }
                    track.samples = samples;
                    this.remuxAudio(track, timeOffset, contiguous);
                };
                _proto.remuxID3 = function remuxID3(track, timeOffset) {
                    var length = track.samples.length;
                    if (!length) return;
                    var inputTimeScale = track.inputTimeScale;
                    var initPTS = this._initPTS;
                    var initDTS = this._initDTS; // consume samples
                    for(var index = 0; index < length; index++){
                        var sample = track.samples[index]; // setting id3 pts, dts to relative time
                        // using this._initPTS and this._initDTS to calculate relative time
                        sample.pts = PTSNormalize(sample.pts - initPTS, timeOffset * inputTimeScale) / inputTimeScale;
                        sample.dts = PTSNormalize(sample.dts - initDTS, timeOffset * inputTimeScale) / inputTimeScale;
                    }
                    this.observer.trigger(events["default"].FRAG_PARSING_METADATA, {
                        samples: track.samples
                    });
                    track.samples = [];
                };
                _proto.remuxText = function remuxText(track, timeOffset) {
                    var length = track.samples.length;
                    var inputTimeScale = track.inputTimeScale;
                    var initPTS = this._initPTS; // consume samples
                    if (length) {
                        for(var index = 0; index < length; index++){
                            var sample = track.samples[index]; // setting text pts, dts to relative time
                            // using this._initPTS and this._initDTS to calculate relative time
                            sample.pts = PTSNormalize(sample.pts - initPTS, timeOffset * inputTimeScale) / inputTimeScale;
                        }
                        track.samples.sort(function(a, b) {
                            return a.pts - b.pts;
                        });
                        this.observer.trigger(events["default"].FRAG_PARSING_USERDATA, {
                            samples: track.samples
                        });
                    }
                    track.samples = [];
                };
                return MP4Remuxer;
            }();
            function PTSNormalize(value, reference) {
                var offset;
                if (reference === undefined) return value;
                if (reference < value) // - 2^33
                offset = -8589934592;
                else // + 2^33
                offset = 8589934592;
                /* PTS is 33bit (from 0 to 2^33 -1)
    if diff between value and reference is bigger than half of the amplitude (2^32) then it means that
    PTS looping occured. fill the gap */ while(Math.abs(value - reference) > 4294967296)value += offset;
                return value;
            }
            /* harmony default export */ var mp4_remuxer = mp4_remuxer_MP4Remuxer;
            // CONCATENATED MODULE: ./src/remux/passthrough-remuxer.js
            /**
 * passthrough remuxer
*/ var passthrough_remuxer_PassThroughRemuxer = /*#__PURE__*/ function() {
                function PassThroughRemuxer(observer) {
                    this.observer = observer;
                }
                var _proto = PassThroughRemuxer.prototype;
                _proto.destroy = function destroy() {
                };
                _proto.resetTimeStamp = function resetTimeStamp() {
                };
                _proto.resetInitSegment = function resetInitSegment() {
                };
                _proto.remux = function remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset, rawData) {
                    var observer = this.observer;
                    var streamType = '';
                    if (audioTrack) streamType += 'audio';
                    if (videoTrack) streamType += 'video';
                    observer.trigger(events["default"].FRAG_PARSING_DATA, {
                        data1: rawData,
                        startPTS: timeOffset,
                        startDTS: timeOffset,
                        type: streamType,
                        hasAudio: !!audioTrack,
                        hasVideo: !!videoTrack,
                        nb: 1,
                        dropped: 0
                    }); // notify end of parsing
                    observer.trigger(events["default"].FRAG_PARSED);
                };
                return PassThroughRemuxer;
            }();
            /* harmony default export */ var passthrough_remuxer = passthrough_remuxer_PassThroughRemuxer;
            // CONCATENATED MODULE: ./src/demux/demuxer-inline.js
            /**
 *
 * inline demuxer: probe fragments and instantiate
 * appropriate demuxer depending on content type (TSDemuxer, AACDemuxer, ...)
 *
 */ // see https://stackoverflow.com/a/11237259/589493
            var global = Object(get_self_scope["getSelfScope"])(); // safeguard for code that might run both on worker and main thread
            var now; // performance.now() not available on WebWorker, at least on Safari Desktop
            try {
                now = global.performance.now.bind(global.performance);
            } catch (err) {
                logger["logger"].debug('Unable to use Performance API on this environment');
                now = global.Date.now;
            }
            var demuxer_inline_DemuxerInline = /*#__PURE__*/ function() {
                function DemuxerInline(observer, typeSupported, config, vendor) {
                    this.observer = observer;
                    this.typeSupported = typeSupported;
                    this.config = config;
                    this.vendor = vendor;
                }
                var _proto = DemuxerInline.prototype;
                _proto.destroy = function destroy() {
                    var demuxer = this.demuxer;
                    if (demuxer) demuxer.destroy();
                };
                _proto.push = function push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {
                    var _this = this;
                    if (data.byteLength > 0 && decryptdata != null && decryptdata.key != null && decryptdata.method === 'AES-128') {
                        var decrypter = this.decrypter;
                        if (decrypter == null) decrypter = this.decrypter = new crypt_decrypter["default"](this.observer, this.config);
                        var startTime = now();
                        decrypter.decrypt(data, decryptdata.key.buffer, decryptdata.iv.buffer, function(decryptedData) {
                            var endTime = now();
                            _this.observer.trigger(events["default"].FRAG_DECRYPTED, {
                                stats: {
                                    tstart: startTime,
                                    tdecrypt: endTime
                                }
                            });
                            _this.pushDecrypted(new Uint8Array(decryptedData), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);
                        });
                    } else this.pushDecrypted(new Uint8Array(data), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);
                };
                _proto.pushDecrypted = function pushDecrypted(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {
                    var demuxer = this.demuxer;
                    var remuxer = this.remuxer;
                    if (!demuxer || // we might switch from content type (AAC container to TS container, or TS to fmp4 for example)
                    discontinuity || trackSwitch) {
                        var observer = this.observer;
                        var typeSupported = this.typeSupported;
                        var config = this.config; // probing order is TS/MP4/AAC/MP3
                        var muxConfig = [
                            {
                                demux: tsdemuxer,
                                remux: mp4_remuxer
                            },
                            {
                                demux: mp4demuxer["default"],
                                remux: passthrough_remuxer
                            },
                            {
                                demux: aacdemuxer,
                                remux: mp4_remuxer
                            },
                            {
                                demux: mp3demuxer,
                                remux: mp4_remuxer
                            }
                        ]; // probe for content type
                        var mux;
                        for(var i = 0, len = muxConfig.length; i < len; i++){
                            mux = muxConfig[i];
                            if (mux.demux.probe(data)) break;
                        }
                        if (!mux) {
                            observer.trigger(events["default"].ERROR, {
                                type: errors["ErrorTypes"].MEDIA_ERROR,
                                details: errors["ErrorDetails"].FRAG_PARSING_ERROR,
                                fatal: true,
                                reason: 'no demux matching with content found'
                            });
                            return;
                        } // so let's check that current remuxer and demuxer are still valid
                        if (!remuxer || !(remuxer instanceof mux.remux)) remuxer = new mux.remux(observer, config, typeSupported, this.vendor);
                        if (!demuxer || !(demuxer instanceof mux.demux)) {
                            demuxer = new mux.demux(observer, remuxer, config, typeSupported);
                            this.probe = mux.demux.probe;
                        }
                        this.demuxer = demuxer;
                        this.remuxer = remuxer;
                    }
                    if (discontinuity || trackSwitch) {
                        demuxer.resetInitSegment(initSegment, audioCodec, videoCodec, duration);
                        remuxer.resetInitSegment();
                    }
                    if (discontinuity) {
                        demuxer.resetTimeStamp(defaultInitPTS);
                        remuxer.resetTimeStamp(defaultInitPTS);
                    }
                    if (typeof demuxer.setDecryptData === 'function') demuxer.setDecryptData(decryptdata);
                    demuxer.append(data, timeOffset, contiguous, accurateTimeOffset);
                };
                return DemuxerInline;
            }();
            /* harmony default export */ var demuxer_inline = __webpack_exports__["default"] = demuxer_inline_DemuxerInline;
        /***/ },
        /***/ "./src/demux/demuxer-worker.js": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony import */ var _demux_demuxer_inline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../demux/demuxer-inline */ "./src/demux/demuxer-inline.js");
            /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.js");
            /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.js");
            /* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/eventemitter3/index.js");
            /* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_3__);
            /* demuxer web worker.
 *  - listen to worker message, and trigger DemuxerInline upon reception of Fragments.
 *  - provides MP4 Boxes back to main thread using [transferable objects](https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast) in order to minimize message passing overhead.
 */ var DemuxerWorker = function DemuxerWorker1(self) {
                // observer setup
                var observer = new eventemitter3__WEBPACK_IMPORTED_MODULE_3__["EventEmitter"]();
                observer.trigger = function trigger(event) {
                    for(var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)data[_key - 1] = arguments[_key];
                    observer.emit.apply(observer, [
                        event,
                        event
                    ].concat(data));
                };
                observer.off = function off(event) {
                    for(var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)data[_key2 - 1] = arguments[_key2];
                    observer.removeListener.apply(observer, [
                        event
                    ].concat(data));
                };
                var forwardMessage = function forwardMessage1(ev, data) {
                    self.postMessage({
                        event: ev,
                        data: data
                    });
                };
                self.addEventListener('message', function(ev) {
                    var data = ev.data; // console.log('demuxer cmd:' + data.cmd);
                    switch(data.cmd){
                        case 'init':
                            var config = JSON.parse(data.config);
                            self.demuxer = new _demux_demuxer_inline__WEBPACK_IMPORTED_MODULE_0__["default"](observer, data.typeSupported, config, data.vendor);
                            Object(_utils_logger__WEBPACK_IMPORTED_MODULE_2__["enableLogs"])(config.debug); // signal end of worker init
                            forwardMessage('init', null);
                            break;
                        case 'demux':
                            self.demuxer.push(data.data, data.decryptdata, data.initSegment, data.audioCodec, data.videoCodec, data.timeOffset, data.discontinuity, data.trackSwitch, data.contiguous, data.duration, data.accurateTimeOffset, data.defaultInitPTS);
                            break;
                        default:
                            break;
                    }
                }); // forward events to main thread
                observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_DECRYPTED, forwardMessage);
                observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSING_INIT_SEGMENT, forwardMessage);
                observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSED, forwardMessage);
                observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].ERROR, forwardMessage);
                observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSING_METADATA, forwardMessage);
                observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSING_USERDATA, forwardMessage);
                observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].INIT_PTS_FOUND, forwardMessage); // special case for FRAG_PARSING_DATA: pass data1/data2 as transferable object (no copy)
                observer.on(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSING_DATA, function(ev, data) {
                    var transferable = [];
                    var message = {
                        event: ev,
                        data: data
                    };
                    if (data.data1) {
                        message.data1 = data.data1.buffer;
                        transferable.push(data.data1.buffer);
                        delete data.data1;
                    }
                    if (data.data2) {
                        message.data2 = data.data2.buffer;
                        transferable.push(data.data2.buffer);
                        delete data.data2;
                    }
                    self.postMessage(message, transferable);
                });
            };
            /* harmony default export */ __webpack_exports__["default"] = DemuxerWorker;
        /***/ },
        /***/ "./src/demux/id3.js": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "utf8ArrayToStr", function() {
                return utf8ArrayToStr;
            });
            /* harmony import */ var _utils_get_self_scope__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/get-self-scope */ "./src/utils/get-self-scope.js");
            /**
 * ID3 parser
 */ var ID3 = /*#__PURE__*/ function() {
                function ID31() {
                }
                /**
   * Returns true if an ID3 header can be found at offset in data
   * @param {Uint8Array} data - The data to search in
   * @param {number} offset - The offset at which to start searching
   * @return {boolean} - True if an ID3 header is found
   */ ID31.isHeader = function isHeader(data, offset) {
                    /*
    * http://id3.org/id3v2.3.0
    * [0]     = 'I'
    * [1]     = 'D'
    * [2]     = '3'
    * [3,4]   = {Version}
    * [5]     = {Flags}
    * [6-9]   = {ID3 Size}
    *
    * An ID3v2 tag can be detected with the following pattern:
    *  $49 44 33 yy yy xx zz zz zz zz
    * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80
    */ if (offset + 10 <= data.length) {
                        // look for 'ID3' identifier
                        if (data[offset] === 73 && data[offset + 1] === 68 && data[offset + 2] === 51) // check version is within range
                        {
                            if (data[offset + 3] < 255 && data[offset + 4] < 255) {
                                // check size is within range
                                if (data[offset + 6] < 128 && data[offset + 7] < 128 && data[offset + 8] < 128 && data[offset + 9] < 128) return true;
                            }
                        }
                    }
                    return false;
                };
                ID31.isFooter = function isFooter(data, offset) {
                    /*
    * The footer is a copy of the header, but with a different identifier
    */ if (offset + 10 <= data.length) {
                        // look for '3DI' identifier
                        if (data[offset] === 51 && data[offset + 1] === 68 && data[offset + 2] === 73) // check version is within range
                        {
                            if (data[offset + 3] < 255 && data[offset + 4] < 255) {
                                // check size is within range
                                if (data[offset + 6] < 128 && data[offset + 7] < 128 && data[offset + 8] < 128 && data[offset + 9] < 128) return true;
                            }
                        }
                    }
                    return false;
                };
                ID31.getID3Data = function getID3Data(data, offset) {
                    var front = offset;
                    var length = 0;
                    while(ID31.isHeader(data, offset)){
                        // ID3 header is 10 bytes
                        length += 10;
                        var size = ID31._readSize(data, offset + 6);
                        length += size;
                        if (ID31.isFooter(data, offset + 10)) // ID3 footer is 10 bytes
                        length += 10;
                        offset += length;
                    }
                    if (length > 0) return data.subarray(front, front + length);
                    return undefined;
                };
                ID31._readSize = function _readSize(data, offset) {
                    var size = 0;
                    size = (data[offset] & 127) << 21;
                    size |= (data[offset + 1] & 127) << 14;
                    size |= (data[offset + 2] & 127) << 7;
                    size |= data[offset + 3] & 127;
                    return size;
                };
                ID31.getTimeStamp = function getTimeStamp(data) {
                    var frames = ID31.getID3Frames(data);
                    for(var i = 0; i < frames.length; i++){
                        var frame = frames[i];
                        if (ID31.isTimeStampFrame(frame)) return ID31._readTimeStamp(frame);
                    }
                    return undefined;
                };
                ID31.isTimeStampFrame = function isTimeStampFrame(frame) {
                    return frame && frame.key === 'PRIV' && frame.info === 'com.apple.streaming.transportStreamTimestamp';
                };
                ID31._getFrameData = function _getFrameData(data) {
                    /*
    Frame ID       $xx xx xx xx (four characters)
    Size           $xx xx xx xx
    Flags          $xx xx
    */ var type = String.fromCharCode(data[0], data[1], data[2], data[3]);
                    var size = ID31._readSize(data, 4); // skip frame id, size, and flags
                    var offset = 10;
                    return {
                        type: type,
                        size: size,
                        data: data.subarray(offset, offset + size)
                    };
                };
                ID31.getID3Frames = function getID3Frames(id3Data) {
                    var offset = 0;
                    var frames = [];
                    while(ID31.isHeader(id3Data, offset)){
                        var size = ID31._readSize(id3Data, offset + 6); // skip past ID3 header
                        offset += 10;
                        var end = offset + size; // loop through frames in the ID3 tag
                        while(offset + 8 < end){
                            var frameData = ID31._getFrameData(id3Data.subarray(offset));
                            var frame = ID31._decodeFrame(frameData);
                            if (frame) frames.push(frame);
                             // skip frame header and frame data
                            offset += frameData.size + 10;
                        }
                        if (ID31.isFooter(id3Data, offset)) offset += 10;
                    }
                    return frames;
                };
                ID31._decodeFrame = function _decodeFrame(frame) {
                    if (frame.type === 'PRIV') return ID31._decodePrivFrame(frame);
                    else if (frame.type[0] === 'W') return ID31._decodeURLFrame(frame);
                    return ID31._decodeTextFrame(frame);
                };
                ID31._readTimeStamp = function _readTimeStamp(timeStampFrame) {
                    if (timeStampFrame.data.byteLength === 8) {
                        var data = new Uint8Array(timeStampFrame.data); // timestamp is 33 bit expressed as a big-endian eight-octet number,
                        // with the upper 31 bits set to zero.
                        var pts33Bit = data[3] & 1;
                        var timestamp = (data[4] << 23) + (data[5] << 15) + (data[6] << 7) + data[7];
                        timestamp /= 45;
                        if (pts33Bit) timestamp += 47721858.84;
                         // 2^32 / 90
                        return Math.round(timestamp);
                    }
                    return undefined;
                };
                ID31._decodePrivFrame = function _decodePrivFrame(frame) {
                    /*
    Format: <text string>\0<binary data>
    */ if (frame.size < 2) return undefined;
                    var owner = ID31._utf8ArrayToStr(frame.data, true);
                    var privateData = new Uint8Array(frame.data.subarray(owner.length + 1));
                    return {
                        key: frame.type,
                        info: owner,
                        data: privateData.buffer
                    };
                };
                ID31._decodeTextFrame = function _decodeTextFrame(frame) {
                    if (frame.size < 2) return undefined;
                    if (frame.type === 'TXXX') {
                        /*
      Format:
      [0]   = {Text Encoding}
      [1-?] = {Description}\0{Value}
      */ var index = 1;
                        var description = ID31._utf8ArrayToStr(frame.data.subarray(index), true);
                        index += description.length + 1;
                        var value = ID31._utf8ArrayToStr(frame.data.subarray(index));
                        return {
                            key: frame.type,
                            info: description,
                            data: value
                        };
                    } else {
                        /*
      Format:
      [0]   = {Text Encoding}
      [1-?] = {Value}
      */ var text = ID31._utf8ArrayToStr(frame.data.subarray(1));
                        return {
                            key: frame.type,
                            data: text
                        };
                    }
                };
                ID31._decodeURLFrame = function _decodeURLFrame(frame) {
                    if (frame.type === 'WXXX') {
                        /*
      Format:
      [0]   = {Text Encoding}
      [1-?] = {Description}\0{URL}
      */ if (frame.size < 2) return undefined;
                        var index = 1;
                        var description = ID31._utf8ArrayToStr(frame.data.subarray(index), true);
                        index += description.length + 1;
                        var value = ID31._utf8ArrayToStr(frame.data.subarray(index));
                        return {
                            key: frame.type,
                            info: description,
                            data: value
                        };
                    } else {
                        /*
      Format:
      [0-?] = {URL}
      */ var url = ID31._utf8ArrayToStr(frame.data);
                        return {
                            key: frame.type,
                            data: url
                        };
                    }
                } // http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197
                ;
                ID31._utf8ArrayToStr = function _utf8ArrayToStr(array, exitOnNull) {
                    if (exitOnNull === void 0) exitOnNull = false;
                    var decoder = getTextDecoder();
                    if (decoder) {
                        var decoded = decoder.decode(array);
                        if (exitOnNull) {
                            // grab up to the first null
                            var idx = decoded.indexOf('\0');
                            return idx !== -1 ? decoded.substring(0, idx) : decoded;
                        } // remove any null characters
                        return decoded.replace(/\0/g, '');
                    }
                    var len = array.length;
                    var c;
                    var char2;
                    var char3;
                    var out = '';
                    var i = 0;
                    while(i < len){
                        c = array[i++];
                        if (c === 0 && exitOnNull) return out;
                        else if (c === 0 || c === 3) continue;
                        switch(c >> 4){
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                // 0xxxxxxx
                                out += String.fromCharCode(c);
                                break;
                            case 12:
                            case 13:
                                // 110x xxxx   10xx xxxx
                                char2 = array[i++];
                                out += String.fromCharCode((c & 31) << 6 | char2 & 63);
                                break;
                            case 14:
                                // 1110 xxxx  10xx xxxx  10xx xxxx
                                char2 = array[i++];
                                char3 = array[i++];
                                out += String.fromCharCode((c & 15) << 12 | (char2 & 63) << 6 | (char3 & 63) << 0);
                                break;
                            default:
                        }
                    }
                    return out;
                };
                return ID31;
            }();
            var decoder;
            function getTextDecoder() {
                var global = Object(_utils_get_self_scope__WEBPACK_IMPORTED_MODULE_0__["getSelfScope"])(); // safeguard for code that might run both on worker and main thread
                if (!decoder && typeof global.TextDecoder !== 'undefined') decoder = new global.TextDecoder('utf-8');
                return decoder;
            }
            var utf8ArrayToStr = ID3._utf8ArrayToStr;
            /* harmony default export */ __webpack_exports__["default"] = ID3;
        /***/ },
        /***/ "./src/demux/mp4demuxer.js": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony import */ var _utils_logger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/logger */ "./src/utils/logger.js");
            /* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events */ "./src/events.js");
            /**
 * MP4 demuxer
 */ var UINT32_MAX = Math.pow(2, 32) - 1;
            var MP4Demuxer = /*#__PURE__*/ function() {
                function MP4Demuxer1(observer, remuxer) {
                    this.observer = observer;
                    this.remuxer = remuxer;
                }
                var _proto = MP4Demuxer1.prototype;
                _proto.resetTimeStamp = function resetTimeStamp(initPTS) {
                    this.initPTS = initPTS;
                };
                _proto.resetInitSegment = function resetInitSegment(initSegment, audioCodec, videoCodec, duration) {
                    // jshint unused:false
                    if (initSegment && initSegment.byteLength) {
                        var initData = this.initData = MP4Demuxer1.parseInitSegment(initSegment); // default audio codec if nothing specified
                        // TODO : extract that from initsegment
                        if (audioCodec == null) audioCodec = 'mp4a.40.5';
                        if (videoCodec == null) videoCodec = 'avc1.42e01e';
                        var tracks = {
                        };
                        if (initData.audio && initData.video) tracks.audiovideo = {
                            container: 'video/mp4',
                            codec: audioCodec + ',' + videoCodec,
                            initSegment: duration ? initSegment : null
                        };
                        else {
                            if (initData.audio) tracks.audio = {
                                container: 'audio/mp4',
                                codec: audioCodec,
                                initSegment: duration ? initSegment : null
                            };
                            if (initData.video) tracks.video = {
                                container: 'video/mp4',
                                codec: videoCodec,
                                initSegment: duration ? initSegment : null
                            };
                        }
                        this.observer.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["default"].FRAG_PARSING_INIT_SEGMENT, {
                            tracks: tracks
                        });
                    } else {
                        if (audioCodec) this.audioCodec = audioCodec;
                        if (videoCodec) this.videoCodec = videoCodec;
                    }
                };
                MP4Demuxer1.probe = function probe(data) {
                    // ensure we find a moof box in the first 16 kB
                    return MP4Demuxer1.findBox({
                        data: data,
                        start: 0,
                        end: Math.min(data.length, 16384)
                    }, [
                        'moof'
                    ]).length > 0;
                };
                MP4Demuxer1.bin2str = function bin2str(buffer) {
                    return String.fromCharCode.apply(null, buffer);
                };
                MP4Demuxer1.readUint16 = function readUint16(buffer, offset) {
                    if (buffer.data) {
                        offset += buffer.start;
                        buffer = buffer.data;
                    }
                    var val = buffer[offset] << 8 | buffer[offset + 1];
                    return val < 0 ? 65536 + val : val;
                };
                MP4Demuxer1.readUint32 = function readUint32(buffer, offset) {
                    if (buffer.data) {
                        offset += buffer.start;
                        buffer = buffer.data;
                    }
                    var val = buffer[offset] << 24 | buffer[offset + 1] << 16 | buffer[offset + 2] << 8 | buffer[offset + 3];
                    return val < 0 ? 4294967296 + val : val;
                };
                MP4Demuxer1.writeUint32 = function writeUint32(buffer, offset, value) {
                    if (buffer.data) {
                        offset += buffer.start;
                        buffer = buffer.data;
                    }
                    buffer[offset] = value >> 24;
                    buffer[offset + 1] = value >> 16 & 255;
                    buffer[offset + 2] = value >> 8 & 255;
                    buffer[offset + 3] = value & 255;
                } // Find the data for a box specified by its path
                ;
                MP4Demuxer1.findBox = function findBox(data, path) {
                    var results = [], i, size, type, end, subresults, start, endbox;
                    if (data.data) {
                        start = data.start;
                        end = data.end;
                        data = data.data;
                    } else {
                        start = 0;
                        end = data.byteLength;
                    }
                    if (!path.length) // short-circuit the search for empty paths
                    return null;
                    for(i = start; i < end;){
                        size = MP4Demuxer1.readUint32(data, i);
                        type = MP4Demuxer1.bin2str(data.subarray(i + 4, i + 8));
                        endbox = size > 1 ? i + size : end;
                        if (type === path[0]) {
                            if (path.length === 1) // this is the end of the path and we've found the box we were
                            // looking for
                            results.push({
                                data: data,
                                start: i + 8,
                                end: endbox
                            });
                            else {
                                // recursively search for the next box along the path
                                subresults = MP4Demuxer1.findBox({
                                    data: data,
                                    start: i + 8,
                                    end: endbox
                                }, path.slice(1));
                                if (subresults.length) results = results.concat(subresults);
                            }
                        }
                        i = endbox;
                    } // we've finished searching all of data
                    return results;
                };
                MP4Demuxer1.parseSegmentIndex = function parseSegmentIndex(initSegment) {
                    var moov = MP4Demuxer1.findBox(initSegment, [
                        'moov'
                    ])[0];
                    var moovEndOffset = moov ? moov.end : null; // we need this in case we need to chop of garbage of the end of current data
                    var index = 0;
                    var sidx = MP4Demuxer1.findBox(initSegment, [
                        'sidx'
                    ]);
                    var references;
                    if (!sidx || !sidx[0]) return null;
                    references = [];
                    sidx = sidx[0];
                    var version = sidx.data[0]; // set initial offset, we skip the reference ID (not needed)
                    index = version === 0 ? 8 : 16;
                    var timescale = MP4Demuxer1.readUint32(sidx, index);
                    index += 4; // TODO: parse earliestPresentationTime and firstOffset
                    // usually zero in our case
                    var earliestPresentationTime = 0;
                    var firstOffset = 0;
                    if (version === 0) index += 8;
                    else index += 16;
                     // skip reserved
                    index += 2;
                    var startByte = sidx.end + firstOffset;
                    var referencesCount = MP4Demuxer1.readUint16(sidx, index);
                    index += 2;
                    for(var i = 0; i < referencesCount; i++){
                        var referenceIndex = index;
                        var referenceInfo = MP4Demuxer1.readUint32(sidx, referenceIndex);
                        referenceIndex += 4;
                        var referenceSize = referenceInfo & 2147483647;
                        var referenceType = (referenceInfo & 2147483648) >>> 31;
                        if (referenceType === 1) {
                            console.warn('SIDX has hierarchical references (not supported)');
                            return;
                        }
                        var subsegmentDuration = MP4Demuxer1.readUint32(sidx, referenceIndex);
                        referenceIndex += 4;
                        references.push({
                            referenceSize: referenceSize,
                            subsegmentDuration: subsegmentDuration,
                            // unscaled
                            info: {
                                duration: subsegmentDuration / timescale,
                                start: startByte,
                                end: startByte + referenceSize - 1
                            }
                        });
                        startByte += referenceSize; // Skipping 1 bit for |startsWithSap|, 3 bits for |sapType|, and 28 bits
                        // for |sapDelta|.
                        referenceIndex += 4; // skip to next ref
                        index = referenceIndex;
                    }
                    return {
                        earliestPresentationTime: earliestPresentationTime,
                        timescale: timescale,
                        version: version,
                        referencesCount: referencesCount,
                        references: references,
                        moovEndOffset: moovEndOffset
                    };
                };
                MP4Demuxer1.parseInitSegment = function parseInitSegment(initSegment) {
                    var result = [];
                    var traks = MP4Demuxer1.findBox(initSegment, [
                        'moov',
                        'trak'
                    ]);
                    traks.forEach(function(trak) {
                        var tkhd = MP4Demuxer1.findBox(trak, [
                            'tkhd'
                        ])[0];
                        if (tkhd) {
                            var version = tkhd.data[tkhd.start];
                            var index = version === 0 ? 12 : 20;
                            var trackId = MP4Demuxer1.readUint32(tkhd, index);
                            var mdhd = MP4Demuxer1.findBox(trak, [
                                'mdia',
                                'mdhd'
                            ])[0];
                            if (mdhd) {
                                version = mdhd.data[mdhd.start];
                                index = version === 0 ? 12 : 20;
                                var timescale = MP4Demuxer1.readUint32(mdhd, index);
                                var hdlr = MP4Demuxer1.findBox(trak, [
                                    'mdia',
                                    'hdlr'
                                ])[0];
                                if (hdlr) {
                                    var hdlrType = MP4Demuxer1.bin2str(hdlr.data.subarray(hdlr.start + 8, hdlr.start + 12));
                                    var type = {
                                        'soun': 'audio',
                                        'vide': 'video'
                                    }[hdlrType];
                                    if (type) {
                                        // extract codec info. TODO : parse codec details to be able to build MIME type
                                        var codecBox = MP4Demuxer1.findBox(trak, [
                                            'mdia',
                                            'minf',
                                            'stbl',
                                            'stsd'
                                        ]);
                                        if (codecBox.length) {
                                            codecBox = codecBox[0];
                                            var codecType = MP4Demuxer1.bin2str(codecBox.data.subarray(codecBox.start + 12, codecBox.start + 16));
                                            _utils_logger__WEBPACK_IMPORTED_MODULE_0__["logger"].log("MP4Demuxer:" + type + ":" + codecType + " found");
                                        }
                                        result[trackId] = {
                                            timescale: timescale,
                                            type: type
                                        };
                                        result[type] = {
                                            timescale: timescale,
                                            id: trackId
                                        };
                                    }
                                }
                            }
                        }
                    });
                    return result;
                };
                MP4Demuxer1.getStartDTS = function getStartDTS(initData, fragment) {
                    var trafs, baseTimes, result; // we need info from two childrend of each track fragment box
                    trafs = MP4Demuxer1.findBox(fragment, [
                        'moof',
                        'traf'
                    ]); // determine the start times for each track
                    baseTimes = [].concat.apply([], trafs.map(function(traf) {
                        return MP4Demuxer1.findBox(traf, [
                            'tfhd'
                        ]).map(function(tfhd) {
                            var id, scale, baseTime; // get the track id from the tfhd
                            id = MP4Demuxer1.readUint32(tfhd, 4); // assume a 90kHz clock if no timescale was specified
                            scale = initData[id].timescale || 90000; // get the base media decode time from the tfdt
                            baseTime = MP4Demuxer1.findBox(traf, [
                                'tfdt'
                            ]).map(function(tfdt) {
                                var version, result1;
                                version = tfdt.data[tfdt.start];
                                result1 = MP4Demuxer1.readUint32(tfdt, 4);
                                if (version === 1) {
                                    result1 *= Math.pow(2, 32);
                                    result1 += MP4Demuxer1.readUint32(tfdt, 8);
                                }
                                return result1;
                            })[0]; // convert base time to seconds
                            return baseTime / scale;
                        });
                    })); // return the minimum
                    result = Math.min.apply(null, baseTimes);
                    return isFinite(result) ? result : 0;
                };
                MP4Demuxer1.offsetStartDTS = function offsetStartDTS(initData, fragment, timeOffset) {
                    MP4Demuxer1.findBox(fragment, [
                        'moof',
                        'traf'
                    ]).map(function(traf) {
                        return MP4Demuxer1.findBox(traf, [
                            'tfhd'
                        ]).map(function(tfhd) {
                            // get the track id from the tfhd
                            var id = MP4Demuxer1.readUint32(tfhd, 4); // assume a 90kHz clock if no timescale was specified
                            var timescale = initData[id].timescale || 90000; // get the base media decode time from the tfdt
                            MP4Demuxer1.findBox(traf, [
                                'tfdt'
                            ]).map(function(tfdt) {
                                var version = tfdt.data[tfdt.start];
                                var baseMediaDecodeTime = MP4Demuxer1.readUint32(tfdt, 4);
                                if (version === 0) MP4Demuxer1.writeUint32(tfdt, 4, baseMediaDecodeTime - timeOffset * timescale);
                                else {
                                    baseMediaDecodeTime *= Math.pow(2, 32);
                                    baseMediaDecodeTime += MP4Demuxer1.readUint32(tfdt, 8);
                                    baseMediaDecodeTime -= timeOffset * timescale;
                                    baseMediaDecodeTime = Math.max(baseMediaDecodeTime, 0);
                                    var upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));
                                    var lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));
                                    MP4Demuxer1.writeUint32(tfdt, 4, upper);
                                    MP4Demuxer1.writeUint32(tfdt, 8, lower);
                                }
                            });
                        });
                    });
                } // feed incoming data to the front of the parsing pipeline
                ;
                _proto.append = function append(data, timeOffset, contiguous, accurateTimeOffset) {
                    var initData = this.initData;
                    if (!initData) {
                        this.resetInitSegment(data, this.audioCodec, this.videoCodec, false);
                        initData = this.initData;
                    }
                    var startDTS, initPTS = this.initPTS;
                    if (initPTS === undefined) {
                        var _startDTS = MP4Demuxer1.getStartDTS(initData, data);
                        this.initPTS = initPTS = _startDTS - timeOffset;
                        this.observer.trigger(_events__WEBPACK_IMPORTED_MODULE_1__["default"].INIT_PTS_FOUND, {
                            initPTS: initPTS
                        });
                    }
                    MP4Demuxer1.offsetStartDTS(initData, data, initPTS);
                    startDTS = MP4Demuxer1.getStartDTS(initData, data);
                    this.remuxer.remux(initData.audio, initData.video, null, null, startDTS, contiguous, accurateTimeOffset, data);
                };
                _proto.destroy = function destroy() {
                };
                return MP4Demuxer1;
            }();
            /* harmony default export */ __webpack_exports__["default"] = MP4Demuxer;
        /***/ },
        /***/ "./src/errors.ts": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorTypes", function() {
                return ErrorTypes;
            });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorDetails", function() {
                return ErrorDetails;
            });
            var ErrorTypes;
            /**
 * @enum {ErrorDetails}
 * @typedef {string} ErrorDetail
 */ (function(ErrorTypes1) {
                ErrorTypes1["NETWORK_ERROR"] = "networkError";
                ErrorTypes1["MEDIA_ERROR"] = "mediaError";
                ErrorTypes1["KEY_SYSTEM_ERROR"] = "keySystemError";
                ErrorTypes1["MUX_ERROR"] = "muxError";
                ErrorTypes1["OTHER_ERROR"] = "otherError";
            })(ErrorTypes || (ErrorTypes = {
            }));
            var ErrorDetails;
            (function(ErrorDetails1) {
                ErrorDetails1["KEY_SYSTEM_NO_KEYS"] = "keySystemNoKeys";
                ErrorDetails1["KEY_SYSTEM_NO_ACCESS"] = "keySystemNoAccess";
                ErrorDetails1["KEY_SYSTEM_NO_SESSION"] = "keySystemNoSession";
                ErrorDetails1["KEY_SYSTEM_LICENSE_REQUEST_FAILED"] = "keySystemLicenseRequestFailed";
                ErrorDetails1["KEY_SYSTEM_NO_INIT_DATA"] = "keySystemNoInitData";
                ErrorDetails1["MANIFEST_LOAD_ERROR"] = "manifestLoadError";
                ErrorDetails1["MANIFEST_LOAD_TIMEOUT"] = "manifestLoadTimeOut";
                ErrorDetails1["MANIFEST_PARSING_ERROR"] = "manifestParsingError";
                ErrorDetails1["MANIFEST_INCOMPATIBLE_CODECS_ERROR"] = "manifestIncompatibleCodecsError";
                ErrorDetails1["LEVEL_EMPTY_ERROR"] = "levelEmptyError";
                ErrorDetails1["LEVEL_LOAD_ERROR"] = "levelLoadError";
                ErrorDetails1["LEVEL_LOAD_TIMEOUT"] = "levelLoadTimeOut";
                ErrorDetails1["LEVEL_SWITCH_ERROR"] = "levelSwitchError";
                ErrorDetails1["AUDIO_TRACK_LOAD_ERROR"] = "audioTrackLoadError";
                ErrorDetails1["AUDIO_TRACK_LOAD_TIMEOUT"] = "audioTrackLoadTimeOut";
                ErrorDetails1["FRAG_LOAD_ERROR"] = "fragLoadError";
                ErrorDetails1["FRAG_LOAD_TIMEOUT"] = "fragLoadTimeOut";
                ErrorDetails1["FRAG_DECRYPT_ERROR"] = "fragDecryptError";
                ErrorDetails1["FRAG_PARSING_ERROR"] = "fragParsingError";
                ErrorDetails1["REMUX_ALLOC_ERROR"] = "remuxAllocError";
                ErrorDetails1["KEY_LOAD_ERROR"] = "keyLoadError";
                ErrorDetails1["KEY_LOAD_TIMEOUT"] = "keyLoadTimeOut";
                ErrorDetails1["BUFFER_ADD_CODEC_ERROR"] = "bufferAddCodecError";
                ErrorDetails1["BUFFER_APPEND_ERROR"] = "bufferAppendError";
                ErrorDetails1["BUFFER_APPENDING_ERROR"] = "bufferAppendingError";
                ErrorDetails1["BUFFER_STALLED_ERROR"] = "bufferStalledError";
                ErrorDetails1["BUFFER_FULL_ERROR"] = "bufferFullError";
                ErrorDetails1["BUFFER_SEEK_OVER_HOLE"] = "bufferSeekOverHole";
                ErrorDetails1["BUFFER_NUDGE_ON_STALL"] = "bufferNudgeOnStall";
                ErrorDetails1["INTERNAL_EXCEPTION"] = "internalException";
            })(ErrorDetails || (ErrorDetails = {
            }));
        /***/ },
        /***/ "./src/events.js": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /**
 * @readonly
 * @enum {string}
 */ var HlsEvents = {
                // fired before MediaSource is attaching to media element - data: { media }
                MEDIA_ATTACHING: 'hlsMediaAttaching',
                // fired when MediaSource has been succesfully attached to media element - data: { }
                MEDIA_ATTACHED: 'hlsMediaAttached',
                // fired before detaching MediaSource from media element - data: { }
                MEDIA_DETACHING: 'hlsMediaDetaching',
                // fired when MediaSource has been detached from media element - data: { }
                MEDIA_DETACHED: 'hlsMediaDetached',
                // fired when we buffer is going to be reset - data: { }
                BUFFER_RESET: 'hlsBufferReset',
                // fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}
                BUFFER_CODECS: 'hlsBufferCodecs',
                // fired when sourcebuffers have been created - data: { tracks : tracks }
                BUFFER_CREATED: 'hlsBufferCreated',
                // fired when we append a segment to the buffer - data: { segment: segment object }
                BUFFER_APPENDING: 'hlsBufferAppending',
                // fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}
                BUFFER_APPENDED: 'hlsBufferAppended',
                // fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }
                BUFFER_EOS: 'hlsBufferEos',
                // fired when the media buffer should be flushed - data { startOffset, endOffset }
                BUFFER_FLUSHING: 'hlsBufferFlushing',
                // fired when the media buffer has been flushed - data: { }
                BUFFER_FLUSHED: 'hlsBufferFlushed',
                // fired to signal that a manifest loading starts - data: { url : manifestURL}
                MANIFEST_LOADING: 'hlsManifestLoading',
                // fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks], url : manifestURL, stats : { trequest, tfirst, tload, mtime}}
                MANIFEST_LOADED: 'hlsManifestLoaded',
                // fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}
                MANIFEST_PARSED: 'hlsManifestParsed',
                // fired when a level switch is requested - data: { level : id of new level }
                LEVEL_SWITCHING: 'hlsLevelSwitching',
                // fired when a level switch is effective - data: { level : id of new level }
                LEVEL_SWITCHED: 'hlsLevelSwitched',
                // fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}
                LEVEL_LOADING: 'hlsLevelLoading',
                // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : { trequest, tfirst, tload, mtime} }
                LEVEL_LOADED: 'hlsLevelLoaded',
                // fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }
                LEVEL_UPDATED: 'hlsLevelUpdated',
                // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }
                LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',
                // fired to notify that levels have changed after removing a level - data: { levels : [available quality levels] }
                LEVELS_UPDATED: 'hlsLevelsUpdated',
                // fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }
                AUDIO_TRACKS_UPDATED: 'hlsAudioTracksUpdated',
                // fired when an audio track switching is requested - data: { id : audio track id }
                AUDIO_TRACK_SWITCHING: 'hlsAudioTrackSwitching',
                // fired when an audio track switch actually occurs - data: { id : audio track id }
                AUDIO_TRACK_SWITCHED: 'hlsAudioTrackSwitched',
                // fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }
                AUDIO_TRACK_LOADING: 'hlsAudioTrackLoading',
                // fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : { trequest, tfirst, tload, mtime } }
                AUDIO_TRACK_LOADED: 'hlsAudioTrackLoaded',
                // fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }
                SUBTITLE_TRACKS_UPDATED: 'hlsSubtitleTracksUpdated',
                // fired when an subtitle track switch occurs - data: { id : subtitle track id }
                SUBTITLE_TRACK_SWITCH: 'hlsSubtitleTrackSwitch',
                // fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }
                SUBTITLE_TRACK_LOADING: 'hlsSubtitleTrackLoading',
                // fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : { trequest, tfirst, tload, mtime } }
                SUBTITLE_TRACK_LOADED: 'hlsSubtitleTrackLoaded',
                // fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }
                SUBTITLE_FRAG_PROCESSED: 'hlsSubtitleFragProcessed',
                // fired when a set of VTTCues to be managed externally has been parsed - data: { type: string, track: string, cues: [ VTTCue ] }
                CUES_PARSED: 'hlsCuesParsed',
                // fired when a text track to be managed externally is found - data: { tracks: [ { label: string, kind: string, default: boolean } ] }
                NON_NATIVE_TEXT_TRACKS_FOUND: 'hlsNonNativeTextTracksFound',
                // fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, frag : fragment object }
                INIT_PTS_FOUND: 'hlsInitPtsFound',
                // fired when a fragment loading starts - data: { frag : fragment object }
                FRAG_LOADING: 'hlsFragLoading',
                // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }
                FRAG_LOAD_PROGRESS: 'hlsFragLoadProgress',
                // Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }
                FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',
                // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : { trequest, tfirst, tload, length } }
                FRAG_LOADED: 'hlsFragLoaded',
                // fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, payload : fragment payload, stats : { tstart, tdecrypt } }
                FRAG_DECRYPTED: 'hlsFragDecrypted',
                // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }
                FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',
                // fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }
                FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',
                // fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }
                FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',
                // fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}
                FRAG_PARSING_DATA: 'hlsFragParsingData',
                // fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }
                FRAG_PARSED: 'hlsFragParsed',
                // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : { trequest, tfirst, tload, tparsed, tbuffered, length, bwEstimate } }
                FRAG_BUFFERED: 'hlsFragBuffered',
                // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }
                FRAG_CHANGED: 'hlsFragChanged',
                // Identifier for a FPS drop event - data: { curentDropped, currentDecoded, totalDroppedFrames }
                FPS_DROP: 'hlsFpsDrop',
                // triggered when FPS drop triggers auto level capping - data: { level, droppedlevel }
                FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',
                // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }
                ERROR: 'hlsError',
                // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }
                DESTROYING: 'hlsDestroying',
                // fired when a decrypt key loading starts - data: { frag : fragment object }
                KEY_LOADING: 'hlsKeyLoading',
                // fired when a decrypt key loading is completed - data: { frag : fragment object, payload : key payload, stats : { trequest, tfirst, tload, length } }
                KEY_LOADED: 'hlsKeyLoaded',
                // fired upon stream controller state transitions - data: { previousState, nextState }
                STREAM_STATE_TRANSITION: 'hlsStreamStateTransition',
                // fired when the live back buffer is reached defined by the liveBackBufferLength config option - data : { bufferEnd: number }
                LIVE_BACK_BUFFER_REACHED: 'hlsLiveBackBufferReached'
            };
            /* harmony default export */ __webpack_exports__["default"] = HlsEvents;
        /***/ },
        /***/ "./src/hls.ts": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            // ESM COMPAT FLAG
            __webpack_require__.r(__webpack_exports__);
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, "default", function() {
                return(/* binding */ hls_Hls);
            });
            // NAMESPACE OBJECT: ./src/utils/cues.ts
            var cues_namespaceObject = {
            };
            __webpack_require__.r(cues_namespaceObject);
            __webpack_require__.d(cues_namespaceObject, "newCue", function() {
                return newCue;
            });
            // EXTERNAL MODULE: ./node_modules/url-toolkit/src/url-toolkit.js
            var url_toolkit = __webpack_require__("./node_modules/url-toolkit/src/url-toolkit.js");
            // EXTERNAL MODULE: ./src/errors.ts
            var errors = __webpack_require__("./src/errors.ts");
            // EXTERNAL MODULE: ./src/polyfills/number.js
            var number = __webpack_require__("./src/polyfills/number.js");
            // EXTERNAL MODULE: ./src/events.js
            var events = __webpack_require__("./src/events.js");
            // EXTERNAL MODULE: ./src/utils/logger.js
            var logger = __webpack_require__("./src/utils/logger.js");
            // CONCATENATED MODULE: ./src/event-handler.ts
            /*
*
* All objects in the event handling chain should inherit from this class
*
*/ var FORBIDDEN_EVENT_NAMES = {
                'hlsEventGeneric': true,
                'hlsHandlerDestroying': true,
                'hlsHandlerDestroyed': true
            };
            var event_handler_EventHandler = /*#__PURE__*/ function() {
                function EventHandler(hls) {
                    this.hls = void 0;
                    this.handledEvents = void 0;
                    this.useGenericHandler = void 0;
                    this.hls = hls;
                    this.onEvent = this.onEvent.bind(this);
                    for(var _len = arguments.length, events1 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)events1[_key - 1] = arguments[_key];
                    this.handledEvents = events1;
                    this.useGenericHandler = true;
                    this.registerListeners();
                }
                var _proto = EventHandler.prototype;
                _proto.destroy = function destroy() {
                    this.onHandlerDestroying();
                    this.unregisterListeners();
                    this.onHandlerDestroyed();
                };
                _proto.onHandlerDestroying = function onHandlerDestroying() {
                };
                _proto.onHandlerDestroyed = function onHandlerDestroyed() {
                };
                _proto.isEventHandler = function isEventHandler() {
                    return typeof this.handledEvents === 'object' && this.handledEvents.length && typeof this.onEvent === 'function';
                };
                _proto.registerListeners = function registerListeners() {
                    if (this.isEventHandler()) this.handledEvents.forEach(function(event) {
                        if (FORBIDDEN_EVENT_NAMES[event]) throw new Error('Forbidden event-name: ' + event);
                        this.hls.on(event, this.onEvent);
                    }, this);
                };
                _proto.unregisterListeners = function unregisterListeners() {
                    if (this.isEventHandler()) this.handledEvents.forEach(function(event) {
                        this.hls.off(event, this.onEvent);
                    }, this);
                };
                _proto.onEvent = function onEvent(event, data) {
                    this.onEventGeneric(event, data);
                };
                _proto.onEventGeneric = function onEventGeneric(event, data) {
                    var eventToFunction = function eventToFunction1(event1, data1) {
                        var funcName = 'on' + event1.replace('hls', '');
                        if (typeof this[funcName] !== 'function') throw new Error("Event " + event1 + " has no generic handler in this " + this.constructor.name + " class (tried " + funcName + ")");
                        return this[funcName].bind(this, data1);
                    };
                    try {
                        eventToFunction.call(this, event, data).call();
                    } catch (err) {
                        logger["logger"].error("An internal error happened while handling event " + event + ". Error message: \"" + err.message + "\". Here is a stacktrace:", err);
                        this.hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].OTHER_ERROR,
                            details: errors["ErrorDetails"].INTERNAL_EXCEPTION,
                            fatal: false,
                            event: event,
                            err: err
                        });
                    }
                };
                return EventHandler;
            }();
            /* harmony default export */ var event_handler = event_handler_EventHandler;
            // CONCATENATED MODULE: ./src/types/loader.ts
            /**
 * `type` property values for this loaders' context object
 * @enum
 *
 */ var PlaylistContextType;
            /**
 * @enum {string}
 */ (function(PlaylistContextType1) {
                PlaylistContextType1["MANIFEST"] = "manifest";
                PlaylistContextType1["LEVEL"] = "level";
                PlaylistContextType1["AUDIO_TRACK"] = "audioTrack";
                PlaylistContextType1["SUBTITLE_TRACK"] = "subtitleTrack";
            })(PlaylistContextType || (PlaylistContextType = {
            }));
            var PlaylistLevelType;
            (function(PlaylistLevelType1) {
                PlaylistLevelType1["MAIN"] = "main";
                PlaylistLevelType1["AUDIO"] = "audio";
                PlaylistLevelType1["SUBTITLE"] = "subtitle";
            })(PlaylistLevelType || (PlaylistLevelType = {
            }));
            // EXTERNAL MODULE: ./src/demux/mp4demuxer.js
            var mp4demuxer = __webpack_require__("./src/demux/mp4demuxer.js");
            // CONCATENATED MODULE: ./src/loader/level-key.ts
            function _defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function _createClass(Constructor, protoProps, staticProps) {
                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                if (staticProps) _defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var level_key_LevelKey = /*#__PURE__*/ function() {
                function LevelKey(baseURI, relativeURI) {
                    this._uri = null;
                    this.baseuri = void 0;
                    this.reluri = void 0;
                    this.method = null;
                    this.key = null;
                    this.iv = null;
                    this.baseuri = baseURI;
                    this.reluri = relativeURI;
                }
                _createClass(LevelKey, [
                    {
                        key: "uri",
                        get: function get() {
                            if (!this._uri && this.reluri) this._uri = Object(url_toolkit["buildAbsoluteURL"])(this.baseuri, this.reluri, {
                                alwaysNormalize: true
                            });
                            return this._uri;
                        }
                    }
                ]);
                return LevelKey;
            }();
            // CONCATENATED MODULE: ./src/loader/fragment.ts
            function fragment_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function fragment_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) fragment_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) fragment_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var ElementaryStreamTypes;
            (function(ElementaryStreamTypes1) {
                ElementaryStreamTypes1["AUDIO"] = "audio";
                ElementaryStreamTypes1["VIDEO"] = "video";
            })(ElementaryStreamTypes || (ElementaryStreamTypes = {
            }));
            var fragment_Fragment = /*#__PURE__*/ function() {
                function Fragment() {
                    var _this$_elementaryStre;
                    this._url = null;
                    this._byteRange = null;
                    this._decryptdata = null;
                    this._elementaryStreams = (_this$_elementaryStre = {
                    }, _this$_elementaryStre[ElementaryStreamTypes.AUDIO] = false, _this$_elementaryStre[ElementaryStreamTypes.VIDEO] = false, _this$_elementaryStre);
                    this.deltaPTS = 0;
                    this.rawProgramDateTime = null;
                    this.programDateTime = null;
                    this.title = null;
                    this.tagList = [];
                    this.cc = void 0;
                    this.type = void 0;
                    this.relurl = void 0;
                    this.baseurl = void 0;
                    this.duration = void 0;
                    this.start = void 0;
                    this.sn = 0;
                    this.urlId = 0;
                    this.level = 0;
                    this.levelkey = void 0;
                    this.loader = void 0;
                }
                var _proto = Fragment.prototype;
                // setByteRange converts a EXT-X-BYTERANGE attribute into a two element array
                _proto.setByteRange = function setByteRange(value, previousFrag) {
                    var params = value.split('@', 2);
                    var byteRange = [];
                    if (params.length === 1) byteRange[0] = previousFrag ? previousFrag.byteRangeEndOffset : 0;
                    else byteRange[0] = parseInt(params[1]);
                    byteRange[1] = parseInt(params[0]) + byteRange[0];
                    this._byteRange = byteRange;
                };
                /**
   * @param {ElementaryStreamTypes} type
   */ _proto.addElementaryStream = function addElementaryStream(type) {
                    this._elementaryStreams[type] = true;
                };
                _proto.hasElementaryStream = function hasElementaryStream(type) {
                    return this._elementaryStreams[type] === true;
                };
                _proto.createInitializationVector = function createInitializationVector(segmentNumber) {
                    var uint8View = new Uint8Array(16);
                    for(var i = 12; i < 16; i++)uint8View[i] = segmentNumber >> 8 * (15 - i) & 255;
                    return uint8View;
                };
                _proto.setDecryptDataFromLevelKey = function setDecryptDataFromLevelKey(levelkey, segmentNumber) {
                    var decryptdata = levelkey;
                    if ((levelkey === null || levelkey === void 0 ? void 0 : levelkey.method) && levelkey.uri && !levelkey.iv) {
                        decryptdata = new level_key_LevelKey(levelkey.baseuri, levelkey.reluri);
                        decryptdata.method = levelkey.method;
                        decryptdata.iv = this.createInitializationVector(segmentNumber);
                    }
                    return decryptdata;
                };
                fragment_createClass(Fragment, [
                    {
                        key: "url",
                        get: function get() {
                            if (!this._url && this.relurl) this._url = Object(url_toolkit["buildAbsoluteURL"])(this.baseurl, this.relurl, {
                                alwaysNormalize: true
                            });
                            return this._url;
                        },
                        set: function set(value) {
                            this._url = value;
                        }
                    },
                    {
                        key: "byteRange",
                        get: function get() {
                            if (!this._byteRange) return [];
                            return this._byteRange;
                        }
                    },
                    {
                        key: "byteRangeStartOffset",
                        get: function get() {
                            return this.byteRange[0];
                        }
                    },
                    {
                        key: "byteRangeEndOffset",
                        get: function get() {
                            return this.byteRange[1];
                        }
                    },
                    {
                        key: "decryptdata",
                        get: function get() {
                            if (!this.levelkey && !this._decryptdata) return null;
                            if (!this._decryptdata && this.levelkey) {
                                var sn = this.sn;
                                if (typeof sn !== 'number') {
                                    // We are fetching decryption data for a initialization segment
                                    // If the segment was encrypted with AES-128
                                    // It must have an IV defined. We cannot substitute the Segment Number in.
                                    if (this.levelkey && this.levelkey.method === 'AES-128' && !this.levelkey.iv) logger["logger"].warn("missing IV for initialization segment with method=\"" + this.levelkey.method + "\" - compliance issue");
                                    /*
          Be converted to a Number.
          'initSegment' will become NaN.
          NaN, which when converted through ToInt32() -> +0.
          ---
          Explicitly set sn to resulting value from implicit conversions 'initSegment' values for IV generation.
          */ sn = 0;
                                }
                                this._decryptdata = this.setDecryptDataFromLevelKey(this.levelkey, sn);
                            }
                            return this._decryptdata;
                        }
                    },
                    {
                        key: "endProgramDateTime",
                        get: function get() {
                            if (this.programDateTime === null) return null;
                            if (!Object(number["isFiniteNumber"])(this.programDateTime)) return null;
                            var duration = !Object(number["isFiniteNumber"])(this.duration) ? 0 : this.duration;
                            return this.programDateTime + duration * 1000;
                        }
                    },
                    {
                        key: "encrypted",
                        get: function get() {
                            return !!(this.decryptdata && this.decryptdata.uri !== null && this.decryptdata.key === null);
                        }
                    }
                ]);
                return Fragment;
            }();
            // CONCATENATED MODULE: ./src/loader/level.js
            function level_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function level_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) level_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) level_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            var level_Level = /*#__PURE__*/ function() {
                function Level(baseUrl) {
                    // Please keep properties in alphabetical order
                    this.endCC = 0;
                    this.endSN = 0;
                    this.fragments = [];
                    this.initSegment = null;
                    this.live = true;
                    this.needSidxRanges = false;
                    this.startCC = 0;
                    this.startSN = 0;
                    this.startTimeOffset = null;
                    this.targetduration = 0;
                    this.totalduration = 0;
                    this.type = null;
                    this.url = baseUrl;
                    this.version = null;
                }
                level_createClass(Level, [
                    {
                        key: "hasProgramDateTime",
                        get: function get() {
                            return !!(this.fragments[0] && Object(number["isFiniteNumber"])(this.fragments[0].programDateTime));
                        }
                    }
                ]);
                return Level;
            }();
            // CONCATENATED MODULE: ./src/utils/attr-list.js
            var DECIMAL_RESOLUTION_REGEX = /^(\d+)x(\d+)$/; // eslint-disable-line no-useless-escape
            var ATTR_LIST_REGEX = /\s*(.+?)\s*=((?:\".*?\")|.*?)(?:,|$)/g; // eslint-disable-line no-useless-escape
            // adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js
            var AttrList = /*#__PURE__*/ function() {
                function AttrList1(attrs) {
                    if (typeof attrs === 'string') attrs = AttrList1.parseAttrList(attrs);
                    for(var attr in attrs)if (attrs.hasOwnProperty(attr)) this[attr] = attrs[attr];
                }
                var _proto = AttrList1.prototype;
                _proto.decimalInteger = function decimalInteger(attrName) {
                    var intValue = parseInt(this[attrName], 10);
                    if (intValue > Number.MAX_SAFE_INTEGER) return Infinity;
                    return intValue;
                };
                _proto.hexadecimalInteger = function hexadecimalInteger(attrName) {
                    if (this[attrName]) {
                        var stringValue = (this[attrName] || '0x').slice(2);
                        stringValue = (stringValue.length & 1 ? '0' : '') + stringValue;
                        var value = new Uint8Array(stringValue.length / 2);
                        for(var i = 0; i < stringValue.length / 2; i++)value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);
                        return value;
                    } else return null;
                };
                _proto.hexadecimalIntegerAsNumber = function hexadecimalIntegerAsNumber(attrName) {
                    var intValue = parseInt(this[attrName], 16);
                    if (intValue > Number.MAX_SAFE_INTEGER) return Infinity;
                    return intValue;
                };
                _proto.decimalFloatingPoint = function decimalFloatingPoint(attrName) {
                    return parseFloat(this[attrName]);
                };
                _proto.enumeratedString = function enumeratedString(attrName) {
                    return this[attrName];
                };
                _proto.decimalResolution = function decimalResolution(attrName) {
                    var res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);
                    if (res === null) return undefined;
                    return {
                        width: parseInt(res[1], 10),
                        height: parseInt(res[2], 10)
                    };
                };
                AttrList1.parseAttrList = function parseAttrList(input) {
                    var match, attrs = {
                    };
                    ATTR_LIST_REGEX.lastIndex = 0;
                    while((match = ATTR_LIST_REGEX.exec(input)) !== null){
                        var value = match[2], quote = '"';
                        if (value.indexOf(quote) === 0 && value.lastIndexOf(quote) === value.length - 1) value = value.slice(1, -1);
                        attrs[match[1]] = value;
                    }
                    return attrs;
                };
                return AttrList1;
            }();
            /* harmony default export */ var attr_list = AttrList;
            // CONCATENATED MODULE: ./src/utils/codecs.ts
            // from http://mp4ra.org/codecs.html
            var sampleEntryCodesISO = {
                audio: {
                    'a3ds': true,
                    'ac-3': true,
                    'ac-4': true,
                    'alac': true,
                    'alaw': true,
                    'dra1': true,
                    'dts+': true,
                    'dts-': true,
                    'dtsc': true,
                    'dtse': true,
                    'dtsh': true,
                    'ec-3': true,
                    'enca': true,
                    'g719': true,
                    'g726': true,
                    'm4ae': true,
                    'mha1': true,
                    'mha2': true,
                    'mhm1': true,
                    'mhm2': true,
                    'mlpa': true,
                    'mp4a': true,
                    'raw ': true,
                    'Opus': true,
                    'samr': true,
                    'sawb': true,
                    'sawp': true,
                    'sevc': true,
                    'sqcp': true,
                    'ssmv': true,
                    'twos': true,
                    'ulaw': true
                },
                video: {
                    'avc1': true,
                    'avc2': true,
                    'avc3': true,
                    'avc4': true,
                    'avcp': true,
                    'drac': true,
                    'dvav': true,
                    'dvhe': true,
                    'encv': true,
                    'hev1': true,
                    'hvc1': true,
                    'mjp2': true,
                    'mp4v': true,
                    'mvc1': true,
                    'mvc2': true,
                    'mvc3': true,
                    'mvc4': true,
                    'resv': true,
                    'rv60': true,
                    's263': true,
                    'svc1': true,
                    'svc2': true,
                    'vc-1': true,
                    'vp08': true,
                    'vp09': true
                }
            };
            function isCodecType(codec, type) {
                var typeCodes = sampleEntryCodesISO[type];
                return !!typeCodes && typeCodes[codec.slice(0, 4)] === true;
            }
            function isCodecSupportedInMp4(codec, type) {
                return MediaSource.isTypeSupported((type || 'video') + "/mp4;codecs=\"" + codec + "\"");
            }
            // CONCATENATED MODULE: ./src/loader/m3u8-parser.ts
            /**
 * M3U8 parser
 * @module
 */ // https://regex101.com is your friend
            var MASTER_PLAYLIST_REGEX = /(?:#EXT-X-STREAM-INF:([^\n\r]*)[\r\n]+([^\r\n]+)|#EXT-X-SESSION-DATA:([^\n\r]*)[\r\n]+)/g;
            var MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;
            var LEVEL_PLAYLIST_REGEX_FAST = new RegExp([
                /#EXTINF:\s*(\d*(?:\.\d+)?)(?:,(.*)\s+)?/.source,
                /|(?!#)([\S+ ?]+)/.source,
                /|#EXT-X-BYTERANGE:*(.+)/.source,
                /|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,
                /|#.*/.source // All other non-segment oriented tags will match with all groups empty
            ].join(''), 'g');
            var LEVEL_PLAYLIST_REGEX_SLOW = /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\d+))|(?:#EXT-X-(TARGETDURATION): *(\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)([^:]*):(.*))|(?:(#)(.*))(?:.*)\r?\n?/;
            var MP4_REGEX_SUFFIX = /\.(mp4|m4s|m4v|m4a)$/i;
            var m3u8_parser_M3U8Parser = /*#__PURE__*/ function() {
                function M3U8Parser() {
                }
                M3U8Parser.findGroup = function findGroup(groups, mediaGroupId) {
                    for(var i = 0; i < groups.length; i++){
                        var group = groups[i];
                        if (group.id === mediaGroupId) return group;
                    }
                };
                M3U8Parser.convertAVC1ToAVCOTI = function convertAVC1ToAVCOTI(codec) {
                    var avcdata = codec.split('.');
                    var result;
                    if (avcdata.length > 2) {
                        result = avcdata.shift() + '.';
                        result += parseInt(avcdata.shift()).toString(16);
                        result += ('000' + parseInt(avcdata.shift()).toString(16)).substr(-4);
                    } else result = codec;
                    return result;
                };
                M3U8Parser.resolve = function resolve(url, baseUrl) {
                    return url_toolkit["buildAbsoluteURL"](baseUrl, url, {
                        alwaysNormalize: true
                    });
                };
                M3U8Parser.parseMasterPlaylist = function parseMasterPlaylist(string, baseurl) {
                    // TODO(typescript-level)
                    var levels = [];
                    var sessionData = {
                    };
                    var hasSessionData = false;
                    MASTER_PLAYLIST_REGEX.lastIndex = 0; // TODO(typescript-level)
                    function setCodecs(codecs, level) {
                        [
                            'video',
                            'audio'
                        ].forEach(function(type) {
                            var filtered = codecs.filter(function(codec) {
                                return isCodecType(codec, type);
                            });
                            if (filtered.length) {
                                var preferred = filtered.filter(function(codec) {
                                    return codec.lastIndexOf('avc1', 0) === 0 || codec.lastIndexOf('mp4a', 0) === 0;
                                });
                                level[type + "Codec"] = preferred.length > 0 ? preferred[0] : filtered[0]; // remove from list
                                codecs = codecs.filter(function(codec) {
                                    return filtered.indexOf(codec) === -1;
                                });
                            }
                        });
                        level.unknownCodecs = codecs;
                    }
                    var result;
                    while((result = MASTER_PLAYLIST_REGEX.exec(string)) != null){
                        if (result[1]) {
                            // '#EXT-X-STREAM-INF' is found, parse level tag  in group 1
                            // TODO(typescript-level)
                            var level = {
                            };
                            var attrs = level.attrs = new attr_list(result[1]);
                            level.url = M3U8Parser.resolve(result[2], baseurl);
                            var resolution = attrs.decimalResolution('RESOLUTION');
                            if (resolution) {
                                level.width = resolution.width;
                                level.height = resolution.height;
                            }
                            level.bitrate = attrs.decimalInteger('AVERAGE-BANDWIDTH') || attrs.decimalInteger('BANDWIDTH');
                            level.name = attrs.NAME;
                            setCodecs([].concat((attrs.CODECS || '').split(/[ ,]+/)), level);
                            if (level.videoCodec && level.videoCodec.indexOf('avc1') !== -1) level.videoCodec = M3U8Parser.convertAVC1ToAVCOTI(level.videoCodec);
                            levels.push(level);
                        } else if (result[3]) {
                            // '#EXT-X-SESSION-DATA' is found, parse session data in group 3
                            var sessionAttrs = new attr_list(result[3]);
                            if (sessionAttrs['DATA-ID']) {
                                hasSessionData = true;
                                sessionData[sessionAttrs['DATA-ID']] = sessionAttrs;
                            }
                        }
                    }
                    return {
                        levels: levels,
                        sessionData: hasSessionData ? sessionData : null
                    };
                };
                M3U8Parser.parseMasterPlaylistMedia = function parseMasterPlaylistMedia(string, baseurl, type, audioGroups) {
                    if (audioGroups === void 0) audioGroups = [];
                    var result;
                    var medias = [];
                    var id = 0;
                    MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;
                    while((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null){
                        var attrs = new attr_list(result[1]);
                        if (attrs.TYPE === type) {
                            var media = {
                                attrs: attrs,
                                id: id++,
                                groupId: attrs['GROUP-ID'],
                                instreamId: attrs['INSTREAM-ID'],
                                name: attrs.NAME || attrs.LANGUAGE,
                                type: type,
                                default: attrs.DEFAULT === 'YES',
                                autoselect: attrs.AUTOSELECT === 'YES',
                                forced: attrs.FORCED === 'YES',
                                lang: attrs.LANGUAGE
                            };
                            if (attrs.URI) media.url = M3U8Parser.resolve(attrs.URI, baseurl);
                            if (audioGroups.length) {
                                // If there are audio groups signalled in the manifest, let's look for a matching codec string for this track
                                var groupCodec = M3U8Parser.findGroup(audioGroups, media.groupId); // If we don't find the track signalled, lets use the first audio groups codec we have
                                // Acting as a best guess
                                media.audioCodec = groupCodec ? groupCodec.codec : audioGroups[0].codec;
                            }
                            medias.push(media);
                        }
                    }
                    return medias;
                };
                M3U8Parser.parseLevelPlaylist = function parseLevelPlaylist(string, baseurl, id, type, levelUrlId) {
                    var currentSN = 0;
                    var totalduration = 0;
                    var level = new level_Level(baseurl);
                    var discontinuityCounter = 0;
                    var prevFrag = null;
                    var frag = new fragment_Fragment();
                    var result;
                    var i;
                    var levelkey;
                    var firstPdtIndex = null;
                    LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;
                    while((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null){
                        var duration = result[1];
                        if (duration) {
                            // INF
                            frag.duration = parseFloat(duration); // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
                            var title = (' ' + result[2]).slice(1);
                            frag.title = title || null;
                            frag.tagList.push(title ? [
                                'INF',
                                duration,
                                title
                            ] : [
                                'INF',
                                duration
                            ]);
                        } else if (result[3]) // url
                        {
                            if (Object(number["isFiniteNumber"])(frag.duration)) {
                                var sn = currentSN++;
                                frag.type = type;
                                frag.start = totalduration;
                                if (levelkey) frag.levelkey = levelkey;
                                frag.sn = sn;
                                frag.level = id;
                                frag.cc = discontinuityCounter;
                                frag.urlId = levelUrlId;
                                frag.baseurl = baseurl; // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
                                frag.relurl = (' ' + result[3]).slice(1);
                                assignProgramDateTime(frag, prevFrag);
                                level.fragments.push(frag);
                                prevFrag = frag;
                                totalduration += frag.duration;
                                frag = new fragment_Fragment();
                            }
                        } else if (result[4]) {
                            // X-BYTERANGE
                            var data = (' ' + result[4]).slice(1);
                            if (prevFrag) frag.setByteRange(data, prevFrag);
                            else frag.setByteRange(data);
                        } else if (result[5]) {
                            // PROGRAM-DATE-TIME
                            // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
                            frag.rawProgramDateTime = (' ' + result[5]).slice(1);
                            frag.tagList.push([
                                'PROGRAM-DATE-TIME',
                                frag.rawProgramDateTime
                            ]);
                            if (firstPdtIndex === null) firstPdtIndex = level.fragments.length;
                        } else {
                            result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);
                            if (!result) {
                                logger["logger"].warn('No matches on slow regex match for level playlist!');
                                continue;
                            }
                            for(i = 1; i < result.length; i++){
                                if (typeof result[i] !== 'undefined') break;
                            } // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939
                            var value1 = (' ' + result[i + 1]).slice(1);
                            var value2 = (' ' + result[i + 2]).slice(1);
                            switch(result[i]){
                                case '#':
                                    frag.tagList.push(value2 ? [
                                        value1,
                                        value2
                                    ] : [
                                        value1
                                    ]);
                                    break;
                                case 'PLAYLIST-TYPE':
                                    level.type = value1.toUpperCase();
                                    break;
                                case 'MEDIA-SEQUENCE':
                                    currentSN = level.startSN = parseInt(value1);
                                    break;
                                case 'TARGETDURATION':
                                    level.targetduration = parseFloat(value1);
                                    break;
                                case 'VERSION':
                                    level.version = parseInt(value1);
                                    break;
                                case 'EXTM3U':
                                    break;
                                case 'ENDLIST':
                                    level.live = false;
                                    break;
                                case 'DIS':
                                    discontinuityCounter++;
                                    frag.tagList.push([
                                        'DIS'
                                    ]);
                                    break;
                                case 'DISCONTINUITY-SEQ':
                                    discontinuityCounter = parseInt(value1);
                                    break;
                                case 'KEY':
                                    // https://tools.ietf.org/html/rfc8216#section-4.3.2.4
                                    var decryptparams = value1;
                                    var keyAttrs = new attr_list(decryptparams);
                                    var decryptmethod = keyAttrs.enumeratedString('METHOD');
                                    var decrypturi = keyAttrs.URI;
                                    var decryptiv = keyAttrs.hexadecimalInteger('IV'); // From RFC: This attribute is OPTIONAL; its absence indicates an implicit value of "identity".
                                    var decryptkeyformat = keyAttrs.KEYFORMAT || 'identity';
                                    if (decryptkeyformat === 'com.apple.streamingkeydelivery') {
                                        logger["logger"].warn('Keyformat com.apple.streamingkeydelivery is not supported');
                                        continue;
                                    }
                                    if (decryptmethod) {
                                        levelkey = new level_key_LevelKey(baseurl, decrypturi);
                                        if (decrypturi && [
                                            'AES-128',
                                            'SAMPLE-AES',
                                            'SAMPLE-AES-CENC'
                                        ].indexOf(decryptmethod) >= 0) {
                                            levelkey.method = decryptmethod;
                                            levelkey.key = null; // Initialization Vector (IV)
                                            levelkey.iv = decryptiv;
                                        }
                                    }
                                    break;
                                case 'START':
                                    var startAttrs = new attr_list(value1);
                                    var startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET'); // TIME-OFFSET can be 0
                                    if (Object(number["isFiniteNumber"])(startTimeOffset)) level.startTimeOffset = startTimeOffset;
                                    break;
                                case 'MAP':
                                    var mapAttrs = new attr_list(value1);
                                    frag.relurl = mapAttrs.URI;
                                    if (mapAttrs.BYTERANGE) frag.setByteRange(mapAttrs.BYTERANGE);
                                    frag.baseurl = baseurl;
                                    frag.level = id;
                                    frag.type = type;
                                    frag.sn = 'initSegment';
                                    level.initSegment = frag;
                                    frag = new fragment_Fragment();
                                    frag.rawProgramDateTime = level.initSegment.rawProgramDateTime;
                                    break;
                                default:
                                    logger["logger"].warn("line parsed but not handled: " + result);
                                    break;
                            }
                        }
                    }
                    frag = prevFrag; // logger.log('found ' + level.fragments.length + ' fragments');
                    if (frag && !frag.relurl) {
                        level.fragments.pop();
                        totalduration -= frag.duration;
                    }
                    level.totalduration = totalduration;
                    level.averagetargetduration = totalduration / level.fragments.length;
                    level.endSN = currentSN - 1;
                    level.startCC = level.fragments[0] ? level.fragments[0].cc : 0;
                    level.endCC = discontinuityCounter;
                    if (!level.initSegment && level.fragments.length) // this is a bit lurky but HLS really has no other way to tell us
                    // if the fragments are TS or MP4, except if we download them :/
                    // but this is to be able to handle SIDX.
                    {
                        if (level.fragments.every(function(frag1) {
                            return MP4_REGEX_SUFFIX.test(frag1.relurl);
                        })) {
                            logger["logger"].warn('MP4 fragments found but no init segment (probably no MAP, incomplete M3U8), trying to fetch SIDX');
                            frag = new fragment_Fragment();
                            frag.relurl = level.fragments[0].relurl;
                            frag.baseurl = baseurl;
                            frag.level = id;
                            frag.type = type;
                            frag.sn = 'initSegment';
                            level.initSegment = frag;
                            level.needSidxRanges = true;
                        }
                    }
                    /**
     * Backfill any missing PDT values
       "If the first EXT-X-PROGRAM-DATE-TIME tag in a Playlist appears after
       one or more Media Segment URIs, the client SHOULD extrapolate
       backward from that tag (using EXTINF durations and/or media
       timestamps) to associate dates with those segments."
     * We have already extrapolated forward, but all fragments up to the first instance of PDT do not have their PDTs
     * computed.
     */ if (firstPdtIndex) backfillProgramDateTimes(level.fragments, firstPdtIndex);
                    return level;
                };
                return M3U8Parser;
            }();
            function backfillProgramDateTimes(fragments, startIndex) {
                var fragPrev = fragments[startIndex];
                for(var i = startIndex - 1; i >= 0; i--){
                    var frag = fragments[i];
                    frag.programDateTime = fragPrev.programDateTime - frag.duration * 1000;
                    fragPrev = frag;
                }
            }
            function assignProgramDateTime(frag, prevFrag) {
                if (frag.rawProgramDateTime) frag.programDateTime = Date.parse(frag.rawProgramDateTime);
                else if (prevFrag === null || prevFrag === void 0 ? void 0 : prevFrag.programDateTime) frag.programDateTime = prevFrag.endProgramDateTime;
                if (!Object(number["isFiniteNumber"])(frag.programDateTime)) {
                    frag.programDateTime = null;
                    frag.rawProgramDateTime = null;
                }
            }
            // CONCATENATED MODULE: ./src/loader/playlist-loader.ts
            function _inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /**
 * PlaylistLoader - delegate for media manifest/playlist loading tasks. Takes care of parsing media to internal data-models.
 *
 * Once loaded, dispatches events with parsed data-models of manifest/levels/audio/subtitle tracks.
 *
 * Uses loader(s) set in config to do actual internal loading of resource tasks.
 *
 * @module
 *
 */ var _window = window, performance = _window.performance;
            /**
 * @constructor
 */ var playlist_loader_PlaylistLoader = /*#__PURE__*/ function(_EventHandler) {
                _inheritsLoose(PlaylistLoader, _EventHandler);
                /**
   * @constructs
   * @param {Hls} hls
   */ function PlaylistLoader(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].MANIFEST_LOADING, events["default"].LEVEL_LOADING, events["default"].AUDIO_TRACK_LOADING, events["default"].SUBTITLE_TRACK_LOADING) || this;
                    _this.loaders = {
                    };
                    return _this;
                }
                /**
   * @param {PlaylistContextType} type
   * @returns {boolean}
   */ PlaylistLoader.canHaveQualityLevels = function canHaveQualityLevels(type) {
                    return type !== PlaylistContextType.AUDIO_TRACK && type !== PlaylistContextType.SUBTITLE_TRACK;
                };
                PlaylistLoader.mapContextToLevelType = function mapContextToLevelType(context) {
                    var type = context.type;
                    switch(type){
                        case PlaylistContextType.AUDIO_TRACK:
                            return PlaylistLevelType.AUDIO;
                        case PlaylistContextType.SUBTITLE_TRACK:
                            return PlaylistLevelType.SUBTITLE;
                        default:
                            return PlaylistLevelType.MAIN;
                    }
                };
                PlaylistLoader.getResponseUrl = function getResponseUrl(response, context) {
                    var url = response.url; // responseURL not supported on some browsers (it is used to detect URL redirection)
                    // data-uri mode also not supported (but no need to detect redirection)
                    if (url === undefined || url.indexOf('data:') === 0) // fallback to initial URL
                    url = context.url;
                    return url;
                };
                var _proto = PlaylistLoader.prototype;
                _proto.createInternalLoader = function createInternalLoader(context) {
                    var config = this.hls.config;
                    var PLoader = config.pLoader;
                    var Loader = config.loader; // TODO(typescript-config): Verify once config is typed that InternalLoader always returns a Loader
                    var InternalLoader = PLoader || Loader;
                    var loader = new InternalLoader(config); // TODO - Do we really need to assign the instance or if the dep has been lost
                    context.loader = loader;
                    this.loaders[context.type] = loader;
                    return loader;
                };
                _proto.getInternalLoader = function getInternalLoader(context) {
                    return this.loaders[context.type];
                };
                _proto.resetInternalLoader = function resetInternalLoader(contextType) {
                    if (this.loaders[contextType]) delete this.loaders[contextType];
                };
                _proto.destroyInternalLoaders = function destroyInternalLoaders() {
                    for(var contextType in this.loaders){
                        var loader = this.loaders[contextType];
                        if (loader) loader.destroy();
                        this.resetInternalLoader(contextType);
                    }
                };
                _proto.destroy = function destroy() {
                    this.destroyInternalLoaders();
                    _EventHandler.prototype.destroy.call(this);
                };
                _proto.onManifestLoading = function onManifestLoading(data) {
                    this.load({
                        url: data.url,
                        type: PlaylistContextType.MANIFEST,
                        level: 0,
                        id: null,
                        responseType: 'text'
                    });
                };
                _proto.onLevelLoading = function onLevelLoading(data) {
                    this.load({
                        url: data.url,
                        type: PlaylistContextType.LEVEL,
                        level: data.level,
                        id: data.id,
                        responseType: 'text'
                    });
                };
                _proto.onAudioTrackLoading = function onAudioTrackLoading(data) {
                    this.load({
                        url: data.url,
                        type: PlaylistContextType.AUDIO_TRACK,
                        level: null,
                        id: data.id,
                        responseType: 'text'
                    });
                };
                _proto.onSubtitleTrackLoading = function onSubtitleTrackLoading(data) {
                    this.load({
                        url: data.url,
                        type: PlaylistContextType.SUBTITLE_TRACK,
                        level: null,
                        id: data.id,
                        responseType: 'text'
                    });
                };
                _proto.load = function load(context) {
                    var config = this.hls.config;
                    logger["logger"].debug("Loading playlist of type " + context.type + ", level: " + context.level + ", id: " + context.id); // Check if a loader for this context already exists
                    var loader = this.getInternalLoader(context);
                    if (loader) {
                        var loaderContext = loader.context;
                        if (loaderContext && loaderContext.url === context.url) {
                            // same URL can't overlap
                            logger["logger"].trace('playlist request ongoing');
                            return false;
                        } else {
                            logger["logger"].warn("aborting previous loader for type: " + context.type);
                            loader.abort();
                        }
                    }
                    var maxRetry;
                    var timeout;
                    var retryDelay;
                    var maxRetryDelay; // apply different configs for retries depending on
                    // context (manifest, level, audio/subs playlist)
                    switch(context.type){
                        case PlaylistContextType.MANIFEST:
                            maxRetry = config.manifestLoadingMaxRetry;
                            timeout = config.manifestLoadingTimeOut;
                            retryDelay = config.manifestLoadingRetryDelay;
                            maxRetryDelay = config.manifestLoadingMaxRetryTimeout;
                            break;
                        case PlaylistContextType.LEVEL:
                            // Disable internal loader retry logic, since we are managing retries in Level Controller
                            maxRetry = 0;
                            maxRetryDelay = 0;
                            retryDelay = 0;
                            timeout = config.levelLoadingTimeOut; // TODO Introduce retry settings for audio-track and subtitle-track, it should not use level retry config
                            break;
                        default:
                            maxRetry = config.levelLoadingMaxRetry;
                            timeout = config.levelLoadingTimeOut;
                            retryDelay = config.levelLoadingRetryDelay;
                            maxRetryDelay = config.levelLoadingMaxRetryTimeout;
                            break;
                    }
                    loader = this.createInternalLoader(context);
                    var loaderConfig = {
                        timeout: timeout,
                        maxRetry: maxRetry,
                        retryDelay: retryDelay,
                        maxRetryDelay: maxRetryDelay
                    };
                    var loaderCallbacks = {
                        onSuccess: this.loadsuccess.bind(this),
                        onError: this.loaderror.bind(this),
                        onTimeout: this.loadtimeout.bind(this)
                    };
                    logger["logger"].debug("Calling internal loader delegate for URL: " + context.url);
                    loader.load(context, loaderConfig, loaderCallbacks);
                    return true;
                };
                _proto.loadsuccess = function loadsuccess(response, stats, context, networkDetails) {
                    if (networkDetails === void 0) networkDetails = null;
                    if (context.isSidxRequest) {
                        this._handleSidxRequest(response, context);
                        this._handlePlaylistLoaded(response, stats, context, networkDetails);
                        return;
                    }
                    this.resetInternalLoader(context.type);
                    if (typeof response.data !== 'string') throw new Error('expected responseType of "text" for PlaylistLoader');
                    var string = response.data;
                    stats.tload = performance.now(); // stats.mtime = new Date(target.getResponseHeader('Last-Modified'));
                    // Validate if it is an M3U8 at all
                    if (string.indexOf('#EXTM3U') !== 0) {
                        this._handleManifestParsingError(response, context, 'no EXTM3U delimiter', networkDetails);
                        return;
                    } // Check if chunk-list or master. handle empty chunk list case (first EXTINF not signaled, but TARGETDURATION present)
                    if (string.indexOf('#EXTINF:') > 0 || string.indexOf('#EXT-X-TARGETDURATION:') > 0) this._handleTrackOrLevelPlaylist(response, stats, context, networkDetails);
                    else this._handleMasterPlaylist(response, stats, context, networkDetails);
                };
                _proto.loaderror = function loaderror(response, context, networkDetails) {
                    if (networkDetails === void 0) networkDetails = null;
                    this._handleNetworkError(context, networkDetails, false, response);
                };
                _proto.loadtimeout = function loadtimeout(stats, context, networkDetails) {
                    if (networkDetails === void 0) networkDetails = null;
                    this._handleNetworkError(context, networkDetails, true);
                } // TODO(typescript-config): networkDetails can currently be a XHR or Fetch impl,
                ;
                _proto._handleMasterPlaylist = function _handleMasterPlaylist(response, stats, context, networkDetails) {
                    var hls = this.hls;
                    var string = response.data;
                    var url = PlaylistLoader.getResponseUrl(response, context);
                    var _M3U8Parser$parseMast = m3u8_parser_M3U8Parser.parseMasterPlaylist(string, url), levels = _M3U8Parser$parseMast.levels, sessionData = _M3U8Parser$parseMast.sessionData;
                    if (!levels.length) {
                        this._handleManifestParsingError(response, context, 'no level found in manifest', networkDetails);
                        return;
                    } // multi level playlist, parse level info
                    var audioGroups = levels.map(function(level) {
                        return {
                            id: level.attrs.AUDIO,
                            codec: level.audioCodec
                        };
                    });
                    var audioTracks = m3u8_parser_M3U8Parser.parseMasterPlaylistMedia(string, url, 'AUDIO', audioGroups);
                    var subtitles = m3u8_parser_M3U8Parser.parseMasterPlaylistMedia(string, url, 'SUBTITLES');
                    var captions = m3u8_parser_M3U8Parser.parseMasterPlaylistMedia(string, url, 'CLOSED-CAPTIONS');
                    if (audioTracks.length) {
                        // check if we have found an audio track embedded in main playlist (audio track without URI attribute)
                        var embeddedAudioFound = false;
                        audioTracks.forEach(function(audioTrack) {
                            if (!audioTrack.url) embeddedAudioFound = true;
                        }); // if no embedded audio track defined, but audio codec signaled in quality level,
                        // we need to signal this main audio track this could happen with playlists with
                        // alt audio rendition in which quality levels (main)
                        // contains both audio+video. but with mixed audio track not signaled
                        if (embeddedAudioFound === false && levels[0].audioCodec && !levels[0].attrs.AUDIO) {
                            logger["logger"].log('audio codec signaled in quality level, but no embedded audio track signaled, create one');
                            audioTracks.unshift({
                                type: 'main',
                                name: 'main',
                                default: false,
                                autoselect: false,
                                forced: false,
                                id: -1,
                                attrs: {
                                },
                                url: ''
                            });
                        }
                    }
                    hls.trigger(events["default"].MANIFEST_LOADED, {
                        levels: levels,
                        audioTracks: audioTracks,
                        subtitles: subtitles,
                        captions: captions,
                        url: url,
                        stats: stats,
                        networkDetails: networkDetails,
                        sessionData: sessionData
                    });
                };
                _proto._handleTrackOrLevelPlaylist = function _handleTrackOrLevelPlaylist(response, stats, context, networkDetails) {
                    var hls = this.hls;
                    var id = context.id, level = context.level, type = context.type;
                    var url = PlaylistLoader.getResponseUrl(response, context); // if the values are null, they will result in the else conditional
                    var levelUrlId = Object(number["isFiniteNumber"])(id) ? id : 0;
                    var levelId = Object(number["isFiniteNumber"])(level) ? level : levelUrlId;
                    var levelType = PlaylistLoader.mapContextToLevelType(context);
                    var levelDetails = m3u8_parser_M3U8Parser.parseLevelPlaylist(response.data, url, levelId, levelType, levelUrlId); // set stats on level structure
                    // TODO(jstackhouse): why? mixing concerns, is it just treated as value bag?
                    levelDetails.tload = stats.tload;
                    if (!levelDetails.fragments.length) {
                        hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].NETWORK_ERROR,
                            details: errors["ErrorDetails"].LEVEL_EMPTY_ERROR,
                            fatal: false,
                            url: url,
                            reason: 'no fragments found in level',
                            level: typeof context.level === 'number' ? context.level : undefined
                        });
                        return;
                    } // We have done our first request (Manifest-type) and receive
                    // not a master playlist but a chunk-list (track/level)
                    // We fire the manifest-loaded event anyway with the parsed level-details
                    // by creating a single-level structure for it.
                    if (type === PlaylistContextType.MANIFEST) {
                        var singleLevel = {
                            url: url,
                            details: levelDetails
                        };
                        hls.trigger(events["default"].MANIFEST_LOADED, {
                            levels: [
                                singleLevel
                            ],
                            audioTracks: [],
                            url: url,
                            stats: stats,
                            networkDetails: networkDetails,
                            sessionData: null
                        });
                    } // save parsing time
                    stats.tparsed = performance.now(); // in case we need SIDX ranges
                    // return early after calling load for
                    // the SIDX box.
                    if (levelDetails.needSidxRanges) {
                        var sidxUrl = levelDetails.initSegment.url;
                        this.load({
                            url: sidxUrl,
                            isSidxRequest: true,
                            type: type,
                            level: level,
                            levelDetails: levelDetails,
                            id: id,
                            rangeStart: 0,
                            rangeEnd: 2048,
                            responseType: 'arraybuffer'
                        });
                        return;
                    } // extend the context with the new levelDetails property
                    context.levelDetails = levelDetails;
                    this._handlePlaylistLoaded(response, stats, context, networkDetails);
                };
                _proto._handleSidxRequest = function _handleSidxRequest(response, context) {
                    if (typeof response.data === 'string') throw new Error('sidx request must be made with responseType of array buffer');
                    var sidxInfo = mp4demuxer["default"].parseSegmentIndex(new Uint8Array(response.data)); // if provided fragment does not contain sidx, early return
                    if (!sidxInfo) return;
                    var sidxReferences = sidxInfo.references;
                    var levelDetails = context.levelDetails;
                    sidxReferences.forEach(function(segmentRef, index) {
                        var segRefInfo = segmentRef.info;
                        if (!levelDetails) return;
                        var frag = levelDetails.fragments[index];
                        if (frag.byteRange.length === 0) frag.setByteRange(String(1 + segRefInfo.end - segRefInfo.start) + '@' + String(segRefInfo.start));
                    });
                    if (levelDetails) levelDetails.initSegment.setByteRange(String(sidxInfo.moovEndOffset) + '@0');
                };
                _proto._handleManifestParsingError = function _handleManifestParsingError(response, context, reason, networkDetails) {
                    this.hls.trigger(events["default"].ERROR, {
                        type: errors["ErrorTypes"].NETWORK_ERROR,
                        details: errors["ErrorDetails"].MANIFEST_PARSING_ERROR,
                        fatal: true,
                        url: response.url,
                        reason: reason,
                        networkDetails: networkDetails
                    });
                };
                _proto._handleNetworkError = function _handleNetworkError(context, networkDetails, timeout, response) {
                    if (timeout === void 0) timeout = false;
                    if (response === void 0) response = null;
                    logger["logger"].info("A network error occured while loading a " + context.type + "-type playlist");
                    var details;
                    var fatal;
                    var loader = this.getInternalLoader(context);
                    switch(context.type){
                        case PlaylistContextType.MANIFEST:
                            details = timeout ? errors["ErrorDetails"].MANIFEST_LOAD_TIMEOUT : errors["ErrorDetails"].MANIFEST_LOAD_ERROR;
                            fatal = true;
                            break;
                        case PlaylistContextType.LEVEL:
                            details = timeout ? errors["ErrorDetails"].LEVEL_LOAD_TIMEOUT : errors["ErrorDetails"].LEVEL_LOAD_ERROR;
                            fatal = false;
                            break;
                        case PlaylistContextType.AUDIO_TRACK:
                            details = timeout ? errors["ErrorDetails"].AUDIO_TRACK_LOAD_TIMEOUT : errors["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR;
                            fatal = false;
                            break;
                        default:
                            // details = ...?
                            fatal = false;
                    }
                    if (loader) {
                        loader.abort();
                        this.resetInternalLoader(context.type);
                    } // TODO(typescript-events): when error events are handled, type this
                    var errorData = {
                        type: errors["ErrorTypes"].NETWORK_ERROR,
                        details: details,
                        fatal: fatal,
                        url: context.url,
                        loader: loader,
                        context: context,
                        networkDetails: networkDetails
                    };
                    if (response) errorData.response = response;
                    this.hls.trigger(events["default"].ERROR, errorData);
                };
                _proto._handlePlaylistLoaded = function _handlePlaylistLoaded(response, stats, context, networkDetails) {
                    var type = context.type, level = context.level, id = context.id, levelDetails = context.levelDetails;
                    if (!levelDetails || !levelDetails.targetduration) {
                        this._handleManifestParsingError(response, context, 'invalid target duration', networkDetails);
                        return;
                    }
                    var canHaveLevels = PlaylistLoader.canHaveQualityLevels(context.type);
                    if (canHaveLevels) this.hls.trigger(events["default"].LEVEL_LOADED, {
                        details: levelDetails,
                        level: level || 0,
                        id: id || 0,
                        stats: stats,
                        networkDetails: networkDetails
                    });
                    else switch(type){
                        case PlaylistContextType.AUDIO_TRACK:
                            this.hls.trigger(events["default"].AUDIO_TRACK_LOADED, {
                                details: levelDetails,
                                id: id,
                                stats: stats,
                                networkDetails: networkDetails
                            });
                            break;
                        case PlaylistContextType.SUBTITLE_TRACK:
                            this.hls.trigger(events["default"].SUBTITLE_TRACK_LOADED, {
                                details: levelDetails,
                                id: id,
                                stats: stats,
                                networkDetails: networkDetails
                            });
                            break;
                    }
                };
                return PlaylistLoader;
            }(event_handler);
            /* harmony default export */ var playlist_loader = playlist_loader_PlaylistLoader;
            // CONCATENATED MODULE: ./src/loader/fragment-loader.js
            function fragment_loader_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /*
 * Fragment Loader
*/ var fragment_loader_FragmentLoader = /*#__PURE__*/ function(_EventHandler) {
                fragment_loader_inheritsLoose(FragmentLoader, _EventHandler);
                function FragmentLoader(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].FRAG_LOADING) || this;
                    _this.loaders = {
                    };
                    return _this;
                }
                var _proto = FragmentLoader.prototype;
                _proto.destroy = function destroy() {
                    var loaders = this.loaders;
                    for(var loaderName in loaders){
                        var loader = loaders[loaderName];
                        if (loader) loader.destroy();
                    }
                    this.loaders = {
                    };
                    _EventHandler.prototype.destroy.call(this);
                };
                _proto.onFragLoading = function onFragLoading(data) {
                    var frag = data.frag, type = frag.type, loaders = this.loaders, config = this.hls.config, FragmentILoader = config.fLoader, DefaultILoader = config.loader; // reset fragment state
                    frag.loaded = 0;
                    var loader = loaders[type];
                    if (loader) {
                        logger["logger"].warn("abort previous fragment loader for type: " + type);
                        loader.abort();
                    }
                    loader = loaders[type] = frag.loader = config.fLoader ? new FragmentILoader(config) : new DefaultILoader(config);
                    var loaderContext, loaderConfig, loaderCallbacks;
                    loaderContext = {
                        url: frag.url,
                        frag: frag,
                        responseType: 'arraybuffer',
                        progressData: false
                    };
                    var start = frag.byteRangeStartOffset, end = frag.byteRangeEndOffset;
                    if (Object(number["isFiniteNumber"])(start) && Object(number["isFiniteNumber"])(end)) {
                        loaderContext.rangeStart = start;
                        loaderContext.rangeEnd = end;
                    }
                    loaderConfig = {
                        timeout: config.fragLoadingTimeOut,
                        maxRetry: 0,
                        retryDelay: 0,
                        maxRetryDelay: config.fragLoadingMaxRetryTimeout
                    };
                    loaderCallbacks = {
                        onSuccess: this.loadsuccess.bind(this),
                        onError: this.loaderror.bind(this),
                        onTimeout: this.loadtimeout.bind(this),
                        onProgress: this.loadprogress.bind(this)
                    };
                    loader.load(loaderContext, loaderConfig, loaderCallbacks);
                };
                _proto.loadsuccess = function loadsuccess(response, stats, context, networkDetails) {
                    if (networkDetails === void 0) networkDetails = null;
                    var payload = response.data, frag = context.frag; // detach fragment loader on load success
                    frag.loader = undefined;
                    this.loaders[frag.type] = undefined;
                    this.hls.trigger(events["default"].FRAG_LOADED, {
                        payload: payload,
                        frag: frag,
                        stats: stats,
                        networkDetails: networkDetails
                    });
                };
                _proto.loaderror = function loaderror(response, context, networkDetails) {
                    if (networkDetails === void 0) networkDetails = null;
                    var frag = context.frag;
                    var loader = frag.loader;
                    if (loader) loader.abort();
                    this.loaders[frag.type] = undefined;
                    this.hls.trigger(events["default"].ERROR, {
                        type: errors["ErrorTypes"].NETWORK_ERROR,
                        details: errors["ErrorDetails"].FRAG_LOAD_ERROR,
                        fatal: false,
                        frag: context.frag,
                        response: response,
                        networkDetails: networkDetails
                    });
                };
                _proto.loadtimeout = function loadtimeout(stats, context, networkDetails) {
                    if (networkDetails === void 0) networkDetails = null;
                    var frag = context.frag;
                    var loader = frag.loader;
                    if (loader) loader.abort();
                    this.loaders[frag.type] = undefined;
                    this.hls.trigger(events["default"].ERROR, {
                        type: errors["ErrorTypes"].NETWORK_ERROR,
                        details: errors["ErrorDetails"].FRAG_LOAD_TIMEOUT,
                        fatal: false,
                        frag: context.frag,
                        networkDetails: networkDetails
                    });
                } // data will be used for progressive parsing
                ;
                _proto.loadprogress = function loadprogress(stats, context, data, networkDetails) {
                    if (networkDetails === void 0) networkDetails = null;
                    // jshint ignore:line
                    var frag = context.frag;
                    frag.loaded = stats.loaded;
                    this.hls.trigger(events["default"].FRAG_LOAD_PROGRESS, {
                        frag: frag,
                        stats: stats,
                        networkDetails: networkDetails
                    });
                };
                return FragmentLoader;
            }(event_handler);
            /* harmony default export */ var fragment_loader = fragment_loader_FragmentLoader;
            // CONCATENATED MODULE: ./src/loader/key-loader.ts
            function key_loader_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /*
 * Decrypt key Loader
*/ var key_loader_KeyLoader = /*#__PURE__*/ function(_EventHandler) {
                key_loader_inheritsLoose(KeyLoader, _EventHandler);
                function KeyLoader(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].KEY_LOADING) || this;
                    _this.loaders = {
                    };
                    _this.decryptkey = null;
                    _this.decrypturl = null;
                    return _this;
                }
                var _proto = KeyLoader.prototype;
                _proto.destroy = function destroy() {
                    for(var loaderName in this.loaders){
                        var loader = this.loaders[loaderName];
                        if (loader) loader.destroy();
                    }
                    this.loaders = {
                    };
                    _EventHandler.prototype.destroy.call(this);
                };
                _proto.onKeyLoading = function onKeyLoading(data) {
                    var frag = data.frag;
                    var type = frag.type;
                    var loader = this.loaders[type];
                    if (!frag.decryptdata) {
                        logger["logger"].warn('Missing decryption data on fragment in onKeyLoading');
                        return;
                    } // Load the key if the uri is different from previous one, or if the decrypt key has not yet been retrieved
                    var uri = frag.decryptdata.uri;
                    if (uri !== this.decrypturl || this.decryptkey === null) {
                        var config = this.hls.config;
                        if (loader) {
                            logger["logger"].warn("abort previous key loader for type:" + type);
                            loader.abort();
                        }
                        if (!uri) {
                            logger["logger"].warn('key uri is falsy');
                            return;
                        }
                        frag.loader = this.loaders[type] = new config.loader(config);
                        this.decrypturl = uri;
                        this.decryptkey = null;
                        var loaderContext = {
                            url: uri,
                            frag: frag,
                            responseType: 'arraybuffer'
                        }; // maxRetry is 0 so that instead of retrying the same key on the same variant multiple times,
                        // key-loader will trigger an error and rely on stream-controller to handle retry logic.
                        // this will also align retry logic with fragment-loader
                        var loaderConfig = {
                            timeout: config.fragLoadingTimeOut,
                            maxRetry: 0,
                            retryDelay: config.fragLoadingRetryDelay,
                            maxRetryDelay: config.fragLoadingMaxRetryTimeout
                        };
                        var loaderCallbacks = {
                            onSuccess: this.loadsuccess.bind(this),
                            onError: this.loaderror.bind(this),
                            onTimeout: this.loadtimeout.bind(this)
                        };
                        frag.loader.load(loaderContext, loaderConfig, loaderCallbacks);
                    } else if (this.decryptkey) {
                        // Return the key if it's already been loaded
                        frag.decryptdata.key = this.decryptkey;
                        this.hls.trigger(events["default"].KEY_LOADED, {
                            frag: frag
                        });
                    }
                };
                _proto.loadsuccess = function loadsuccess(response, stats, context) {
                    var frag = context.frag;
                    if (!frag.decryptdata) {
                        logger["logger"].error('after key load, decryptdata unset');
                        return;
                    }
                    this.decryptkey = frag.decryptdata.key = new Uint8Array(response.data); // detach fragment loader on load success
                    frag.loader = undefined;
                    delete this.loaders[frag.type];
                    this.hls.trigger(events["default"].KEY_LOADED, {
                        frag: frag
                    });
                };
                _proto.loaderror = function loaderror(response, context) {
                    var frag = context.frag;
                    var loader = frag.loader;
                    if (loader) loader.abort();
                    delete this.loaders[frag.type];
                    this.hls.trigger(events["default"].ERROR, {
                        type: errors["ErrorTypes"].NETWORK_ERROR,
                        details: errors["ErrorDetails"].KEY_LOAD_ERROR,
                        fatal: false,
                        frag: frag,
                        response: response
                    });
                };
                _proto.loadtimeout = function loadtimeout(stats, context) {
                    var frag = context.frag;
                    var loader = frag.loader;
                    if (loader) loader.abort();
                    delete this.loaders[frag.type];
                    this.hls.trigger(events["default"].ERROR, {
                        type: errors["ErrorTypes"].NETWORK_ERROR,
                        details: errors["ErrorDetails"].KEY_LOAD_TIMEOUT,
                        fatal: false,
                        frag: frag
                    });
                };
                return KeyLoader;
            }(event_handler);
            /* harmony default export */ var key_loader = key_loader_KeyLoader;
            // CONCATENATED MODULE: ./src/controller/fragment-tracker.js
            function fragment_tracker_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            var FragmentState = {
                NOT_LOADED: 'NOT_LOADED',
                APPENDING: 'APPENDING',
                PARTIAL: 'PARTIAL',
                OK: 'OK'
            };
            var fragment_tracker_FragmentTracker = /*#__PURE__*/ function(_EventHandler) {
                fragment_tracker_inheritsLoose(FragmentTracker, _EventHandler);
                function FragmentTracker(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].BUFFER_APPENDED, events["default"].FRAG_BUFFERED, events["default"].FRAG_LOADED) || this;
                    _this.bufferPadding = 0.2;
                    _this.fragments = Object.create(null);
                    _this.timeRanges = Object.create(null);
                    _this.config = hls.config;
                    return _this;
                }
                var _proto = FragmentTracker.prototype;
                _proto.destroy = function destroy() {
                    this.fragments = Object.create(null);
                    this.timeRanges = Object.create(null);
                    this.config = null;
                    event_handler.prototype.destroy.call(this);
                    _EventHandler.prototype.destroy.call(this);
                };
                _proto.getBufferedFrag = function getBufferedFrag(position, levelType) {
                    var fragments = this.fragments;
                    var bufferedFrags = Object.keys(fragments).filter(function(key) {
                        var fragmentEntity = fragments[key];
                        if (fragmentEntity.body.type !== levelType) return false;
                        if (!fragmentEntity.buffered) return false;
                        var frag = fragmentEntity.body;
                        return frag.startPTS <= position && position <= frag.endPTS;
                    });
                    if (bufferedFrags.length === 0) return null;
                    else {
                        // https://github.com/video-dev/hls.js/pull/1545#discussion_r166229566
                        var bufferedFragKey = bufferedFrags.pop();
                        return fragments[bufferedFragKey].body;
                    }
                };
                _proto.detectEvictedFragments = function detectEvictedFragments(elementaryStream, timeRange) {
                    var _this2 = this;
                    // Check if any flagged fragments have been unloaded
                    Object.keys(this.fragments).forEach(function(key) {
                        var fragmentEntity = _this2.fragments[key];
                        if (!fragmentEntity || !fragmentEntity.buffered) return;
                        var esData = fragmentEntity.range[elementaryStream];
                        if (!esData) return;
                        var fragmentTimes = esData.time;
                        for(var i = 0; i < fragmentTimes.length; i++){
                            var time = fragmentTimes[i];
                            if (!_this2.isTimeBuffered(time.startPTS, time.endPTS, timeRange)) {
                                // Unregister partial fragment as it needs to load again to be reused
                                _this2.removeFragment(fragmentEntity.body);
                                break;
                            }
                        }
                    });
                };
                _proto.detectPartialFragments = function detectPartialFragments(fragment) {
                    var _this3 = this;
                    var fragKey = this.getFragmentKey(fragment);
                    var fragmentEntity = this.fragments[fragKey];
                    if (fragmentEntity) {
                        fragmentEntity.buffered = true;
                        Object.keys(this.timeRanges).forEach(function(elementaryStream) {
                            if (fragment.hasElementaryStream(elementaryStream)) {
                                var timeRange = _this3.timeRanges[elementaryStream]; // Check for malformed fragments
                                // Gaps need to be calculated for each elementaryStream
                                fragmentEntity.range[elementaryStream] = _this3.getBufferedTimes(fragment.startPTS, fragment.endPTS, timeRange);
                            }
                        });
                    }
                };
                _proto.getBufferedTimes = function getBufferedTimes(startPTS, endPTS, timeRange) {
                    var fragmentTimes = [];
                    var startTime, endTime;
                    var fragmentPartial = false;
                    for(var i = 0; i < timeRange.length; i++){
                        startTime = timeRange.start(i) - this.bufferPadding;
                        endTime = timeRange.end(i) + this.bufferPadding;
                        if (startPTS >= startTime && endPTS <= endTime) {
                            // Fragment is entirely contained in buffer
                            // No need to check the other timeRange times since it's completely playable
                            fragmentTimes.push({
                                startPTS: Math.max(startPTS, timeRange.start(i)),
                                endPTS: Math.min(endPTS, timeRange.end(i))
                            });
                            break;
                        } else if (startPTS < endTime && endPTS > startTime) {
                            // Check for intersection with buffer
                            // Get playable sections of the fragment
                            fragmentTimes.push({
                                startPTS: Math.max(startPTS, timeRange.start(i)),
                                endPTS: Math.min(endPTS, timeRange.end(i))
                            });
                            fragmentPartial = true;
                        } else if (endPTS <= startTime) break;
                    }
                    return {
                        time: fragmentTimes,
                        partial: fragmentPartial
                    };
                };
                _proto.getFragmentKey = function getFragmentKey(fragment) {
                    return fragment.type + "_" + fragment.level + "_" + fragment.urlId + "_" + fragment.sn;
                };
                _proto.getPartialFragment = function getPartialFragment(time) {
                    var _this4 = this;
                    var timePadding, startTime, endTime;
                    var bestFragment = null;
                    var bestOverlap = 0;
                    Object.keys(this.fragments).forEach(function(key) {
                        var fragmentEntity = _this4.fragments[key];
                        if (_this4.isPartial(fragmentEntity)) {
                            startTime = fragmentEntity.body.startPTS - _this4.bufferPadding;
                            endTime = fragmentEntity.body.endPTS + _this4.bufferPadding;
                            if (time >= startTime && time <= endTime) {
                                // Use the fragment that has the most padding from start and end time
                                timePadding = Math.min(time - startTime, endTime - time);
                                if (bestOverlap <= timePadding) {
                                    bestFragment = fragmentEntity.body;
                                    bestOverlap = timePadding;
                                }
                            }
                        }
                    });
                    return bestFragment;
                };
                _proto.getState = function getState(fragment) {
                    var fragKey = this.getFragmentKey(fragment);
                    var fragmentEntity = this.fragments[fragKey];
                    var state = FragmentState.NOT_LOADED;
                    if (fragmentEntity !== undefined) {
                        if (!fragmentEntity.buffered) state = FragmentState.APPENDING;
                        else if (this.isPartial(fragmentEntity) === true) state = FragmentState.PARTIAL;
                        else state = FragmentState.OK;
                    }
                    return state;
                };
                _proto.isPartial = function isPartial(fragmentEntity) {
                    return fragmentEntity.buffered === true && (fragmentEntity.range.video !== undefined && fragmentEntity.range.video.partial === true || fragmentEntity.range.audio !== undefined && fragmentEntity.range.audio.partial === true);
                };
                _proto.isTimeBuffered = function isTimeBuffered(startPTS, endPTS, timeRange) {
                    var startTime, endTime;
                    for(var i = 0; i < timeRange.length; i++){
                        startTime = timeRange.start(i) - this.bufferPadding;
                        endTime = timeRange.end(i) + this.bufferPadding;
                        if (startPTS >= startTime && endPTS <= endTime) return true;
                        if (endPTS <= startTime) // No need to check the rest of the timeRange as it is in order
                        return false;
                    }
                    return false;
                };
                _proto.onFragLoaded = function onFragLoaded(e) {
                    var fragment = e.frag; // don't track initsegment (for which sn is not a number)
                    // don't track frags used for bitrateTest, they're irrelevant.
                    if (!Object(number["isFiniteNumber"])(fragment.sn) || fragment.bitrateTest) return;
                    this.fragments[this.getFragmentKey(fragment)] = {
                        body: fragment,
                        range: Object.create(null),
                        buffered: false
                    };
                };
                _proto.onBufferAppended = function onBufferAppended(e) {
                    var _this5 = this;
                    // Store the latest timeRanges loaded in the buffer
                    this.timeRanges = e.timeRanges;
                    Object.keys(this.timeRanges).forEach(function(elementaryStream) {
                        var timeRange = _this5.timeRanges[elementaryStream];
                        _this5.detectEvictedFragments(elementaryStream, timeRange);
                    });
                };
                _proto.onFragBuffered = function onFragBuffered(e) {
                    this.detectPartialFragments(e.frag);
                };
                _proto.hasFragment = function hasFragment(fragment) {
                    var fragKey = this.getFragmentKey(fragment);
                    return this.fragments[fragKey] !== undefined;
                };
                _proto.removeFragment = function removeFragment(fragment) {
                    var fragKey = this.getFragmentKey(fragment);
                    delete this.fragments[fragKey];
                };
                _proto.removeAllFragments = function removeAllFragments() {
                    this.fragments = Object.create(null);
                };
                return FragmentTracker;
            }(event_handler);
            // CONCATENATED MODULE: ./src/utils/binary-search.ts
            var BinarySearch = {
                /**
   * Searches for an item in an array which matches a certain condition.
   * This requires the condition to only match one item in the array,
   * and for the array to be ordered.
   *
   * @param {Array<T>} list The array to search.
   * @param {BinarySearchComparison<T>} comparisonFn
   *      Called and provided a candidate item as the first argument.
   *      Should return:
   *          > -1 if the item should be located at a lower index than the provided item.
   *          > 1 if the item should be located at a higher index than the provided item.
   *          > 0 if the item is the item you're looking for.
   *
   * @return {T | null} The object if it is found or null otherwise.
   */ search: function search(list, comparisonFn) {
                    var minIndex = 0;
                    var maxIndex = list.length - 1;
                    var currentIndex = null;
                    var currentElement = null;
                    while(minIndex <= maxIndex){
                        currentIndex = (minIndex + maxIndex) / 2 | 0;
                        currentElement = list[currentIndex];
                        var comparisonResult = comparisonFn(currentElement);
                        if (comparisonResult > 0) minIndex = currentIndex + 1;
                        else if (comparisonResult < 0) maxIndex = currentIndex - 1;
                        else return currentElement;
                    }
                    return null;
                }
            };
            /* harmony default export */ var binary_search = BinarySearch;
            // CONCATENATED MODULE: ./src/utils/buffer-helper.ts
            /**
 * @module BufferHelper
 *
 * Providing methods dealing with buffer length retrieval for example.
 *
 * In general, a helper around HTML5 MediaElement TimeRanges gathered from `buffered` property.
 *
 * Also @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered
*/ var BufferHelper = /*#__PURE__*/ function() {
                function BufferHelper1() {
                }
                /**
   * Return true if `media`'s buffered include `position`
   * @param {Bufferable} media
   * @param {number} position
   * @returns {boolean}
   */ BufferHelper1.isBuffered = function isBuffered(media, position) {
                    try {
                        if (media) {
                            var buffered = media.buffered;
                            for(var i = 0; i < buffered.length; i++){
                                if (position >= buffered.start(i) && position <= buffered.end(i)) return true;
                            }
                        }
                    } catch (error) {
                    // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':
                    // This SourceBuffer has been removed from the parent media source
                    }
                    return false;
                };
                BufferHelper1.bufferInfo = function bufferInfo(media, pos, maxHoleDuration) {
                    try {
                        if (media) {
                            var vbuffered = media.buffered;
                            var buffered = [];
                            var i;
                            for(i = 0; i < vbuffered.length; i++)buffered.push({
                                start: vbuffered.start(i),
                                end: vbuffered.end(i)
                            });
                            return this.bufferedInfo(buffered, pos, maxHoleDuration);
                        }
                    } catch (error) {
                    // InvalidStateError: Failed to read the 'buffered' property from 'SourceBuffer':
                    // This SourceBuffer has been removed from the parent media source
                    }
                    return {
                        len: 0,
                        start: pos,
                        end: pos,
                        nextStart: undefined
                    };
                };
                BufferHelper1.bufferedInfo = function bufferedInfo(buffered, pos, maxHoleDuration) {
                    // sort on buffer.start/smaller end (IE does not always return sorted buffered range)
                    buffered.sort(function(a, b) {
                        var diff = a.start - b.start;
                        if (diff) return diff;
                        else return b.end - a.end;
                    });
                    var buffered2 = [];
                    if (maxHoleDuration) // there might be some small holes between buffer time range
                    // consider that holes smaller than maxHoleDuration are irrelevant and build another
                    // buffer time range representations that discards those holes
                    for(var i = 0; i < buffered.length; i++){
                        var buf2len = buffered2.length;
                        if (buf2len) {
                            var buf2end = buffered2[buf2len - 1].end; // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)
                            if (buffered[i].start - buf2end < maxHoleDuration) // merge overlapping time ranges
                            // update lastRange.end only if smaller than item.end
                            // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)
                            // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])
                            {
                                if (buffered[i].end > buf2end) buffered2[buf2len - 1].end = buffered[i].end;
                            } else // big hole
                            buffered2.push(buffered[i]);
                        } else // first value
                        buffered2.push(buffered[i]);
                    }
                    else buffered2 = buffered;
                    var bufferLen = 0; // bufferStartNext can possibly be undefined based on the conditional logic below
                    var bufferStartNext; // bufferStart and bufferEnd are buffer boundaries around current video position
                    var bufferStart = pos;
                    var bufferEnd = pos;
                    for(var _i = 0; _i < buffered2.length; _i++){
                        var start = buffered2[_i].start, end = buffered2[_i].end; // logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));
                        if (pos + maxHoleDuration >= start && pos < end) {
                            // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length
                            bufferStart = start;
                            bufferEnd = end;
                            bufferLen = bufferEnd - pos;
                        } else if (pos + maxHoleDuration < start) {
                            bufferStartNext = start;
                            break;
                        }
                    }
                    return {
                        len: bufferLen,
                        start: bufferStart,
                        end: bufferEnd,
                        nextStart: bufferStartNext
                    };
                };
                return BufferHelper1;
            }();
            // EXTERNAL MODULE: ./node_modules/eventemitter3/index.js
            var eventemitter3 = __webpack_require__("./node_modules/eventemitter3/index.js");
            // EXTERNAL MODULE: ./node_modules/webworkify-webpack/index.js
            var webworkify_webpack = __webpack_require__("./node_modules/webworkify-webpack/index.js");
            // EXTERNAL MODULE: ./src/demux/demuxer-inline.js + 12 modules
            var demuxer_inline = __webpack_require__("./src/demux/demuxer-inline.js");
            // CONCATENATED MODULE: ./src/utils/mediasource-helper.ts
            /**
 * MediaSource helper
 */ function getMediaSource() {
                return window.MediaSource || window.WebKitMediaSource;
            }
            // EXTERNAL MODULE: ./src/utils/get-self-scope.js
            var get_self_scope = __webpack_require__("./src/utils/get-self-scope.js");
            // CONCATENATED MODULE: ./src/observer.ts
            function observer_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /**
 * Simple adapter sub-class of Nodejs-like EventEmitter.
 */ var Observer1 = /*#__PURE__*/ function(_EventEmitter) {
                observer_inheritsLoose(Observer2, _EventEmitter);
                function Observer2() {
                    return _EventEmitter.apply(this, arguments) || this;
                }
                var _proto = Observer2.prototype;
                /**
   * We simply want to pass along the event-name itself
   * in every call to a handler, which is the purpose of our `trigger` method
   * extending the standard API.
   */ _proto.trigger = function trigger(event) {
                    for(var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)data[_key - 1] = arguments[_key];
                    this.emit.apply(this, [
                        event,
                        event
                    ].concat(data));
                };
                return Observer2;
            }(eventemitter3["EventEmitter"]);
            // CONCATENATED MODULE: ./src/demux/demuxer.js
            // see https://stackoverflow.com/a/11237259/589493
            var global = Object(get_self_scope["getSelfScope"])(); // safeguard for code that might run both on worker and main thread
            var demuxer_MediaSource = getMediaSource() || {
                isTypeSupported: function isTypeSupported() {
                    return false;
                }
            };
            var demuxer_Demuxer = /*#__PURE__*/ function() {
                function Demuxer(hls, id) {
                    var _this = this;
                    this.hls = hls;
                    this.id = id;
                    var observer = this.observer = new Observer1();
                    var config = hls.config;
                    var forwardMessage = function forwardMessage1(ev, data) {
                        data = data || {
                        };
                        data.frag = _this.frag;
                        data.id = _this.id;
                        hls.trigger(ev, data);
                    }; // forward events to main thread
                    observer.on(events["default"].FRAG_DECRYPTED, forwardMessage);
                    observer.on(events["default"].FRAG_PARSING_INIT_SEGMENT, forwardMessage);
                    observer.on(events["default"].FRAG_PARSING_DATA, forwardMessage);
                    observer.on(events["default"].FRAG_PARSED, forwardMessage);
                    observer.on(events["default"].ERROR, forwardMessage);
                    observer.on(events["default"].FRAG_PARSING_METADATA, forwardMessage);
                    observer.on(events["default"].FRAG_PARSING_USERDATA, forwardMessage);
                    observer.on(events["default"].INIT_PTS_FOUND, forwardMessage);
                    var typeSupported = {
                        mp4: demuxer_MediaSource.isTypeSupported('video/mp4'),
                        mpeg: demuxer_MediaSource.isTypeSupported('audio/mpeg'),
                        mp3: demuxer_MediaSource.isTypeSupported('audio/mp4; codecs="mp3"')
                    }; // navigator.vendor is not always available in Web Worker
                    // refer to https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator
                    var vendor = navigator.vendor;
                    if (config.enableWorker && typeof Worker !== 'undefined') {
                        logger["logger"].log('demuxing in webworker');
                        var w;
                        try {
                            w = this.w = webworkify_webpack(/*! ../demux/demuxer-worker.js */ "./src/demux/demuxer-worker.js");
                            this.onwmsg = this.onWorkerMessage.bind(this);
                            w.addEventListener('message', this.onwmsg);
                            w.onerror = function(event) {
                                hls.trigger(events["default"].ERROR, {
                                    type: errors["ErrorTypes"].OTHER_ERROR,
                                    details: errors["ErrorDetails"].INTERNAL_EXCEPTION,
                                    fatal: true,
                                    event: 'demuxerWorker',
                                    err: {
                                        message: event.message + ' (' + event.filename + ':' + event.lineno + ')'
                                    }
                                });
                            };
                            w.postMessage({
                                cmd: 'init',
                                typeSupported: typeSupported,
                                vendor: vendor,
                                id: id,
                                config: JSON.stringify(config)
                            });
                        } catch (err) {
                            logger["logger"].warn('Error in worker:', err);
                            logger["logger"].error('Error while initializing DemuxerWorker, fallback on DemuxerInline');
                            if (w) // revoke the Object URL that was used to create demuxer worker, so as not to leak it
                            global.URL.revokeObjectURL(w.objectURL);
                            this.demuxer = new demuxer_inline["default"](observer, typeSupported, config, vendor);
                            this.w = undefined;
                        }
                    } else this.demuxer = new demuxer_inline["default"](observer, typeSupported, config, vendor);
                }
                var _proto = Demuxer.prototype;
                _proto.destroy = function destroy() {
                    var w = this.w;
                    if (w) {
                        w.removeEventListener('message', this.onwmsg);
                        w.terminate();
                        this.w = null;
                    } else {
                        var demuxer = this.demuxer;
                        if (demuxer) {
                            demuxer.destroy();
                            this.demuxer = null;
                        }
                    }
                    var observer = this.observer;
                    if (observer) {
                        observer.removeAllListeners();
                        this.observer = null;
                    }
                };
                _proto.push = function push(data, initSegment, audioCodec, videoCodec, frag, duration, accurateTimeOffset, defaultInitPTS) {
                    var w = this.w;
                    var timeOffset = Object(number["isFiniteNumber"])(frag.startPTS) ? frag.startPTS : frag.start;
                    var decryptdata = frag.decryptdata;
                    var lastFrag = this.frag;
                    var discontinuity = !(lastFrag && frag.cc === lastFrag.cc);
                    var trackSwitch = !(lastFrag && frag.level === lastFrag.level);
                    var nextSN = lastFrag && frag.sn === lastFrag.sn + 1;
                    var contiguous = !trackSwitch && nextSN;
                    if (discontinuity) logger["logger"].log(this.id + ":discontinuity detected");
                    if (trackSwitch) logger["logger"].log(this.id + ":switch detected");
                    this.frag = frag;
                    if (w) // post fragment payload as transferable objects for ArrayBuffer (no copy)
                    w.postMessage({
                        cmd: 'demux',
                        data: data,
                        decryptdata: decryptdata,
                        initSegment: initSegment,
                        audioCodec: audioCodec,
                        videoCodec: videoCodec,
                        timeOffset: timeOffset,
                        discontinuity: discontinuity,
                        trackSwitch: trackSwitch,
                        contiguous: contiguous,
                        duration: duration,
                        accurateTimeOffset: accurateTimeOffset,
                        defaultInitPTS: defaultInitPTS
                    }, data instanceof ArrayBuffer ? [
                        data
                    ] : []);
                    else {
                        var demuxer = this.demuxer;
                        if (demuxer) demuxer.push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);
                    }
                };
                _proto.onWorkerMessage = function onWorkerMessage(ev) {
                    var data = ev.data, hls = this.hls;
                    switch(data.event){
                        case 'init':
                            // revoke the Object URL that was used to create demuxer worker, so as not to leak it
                            global.URL.revokeObjectURL(this.w.objectURL);
                            break;
                        // special case for FRAG_PARSING_DATA: data1 and data2 are transferable objects
                        case events["default"].FRAG_PARSING_DATA:
                            data.data.data1 = new Uint8Array(data.data1);
                            if (data.data2) data.data.data2 = new Uint8Array(data.data2);
                        /* falls through */ default:
                            data.data = data.data || {
                            };
                            data.data.frag = this.frag;
                            data.data.id = this.id;
                            hls.trigger(data.event, data.data);
                            break;
                    }
                };
                return Demuxer;
            }();
            /* harmony default export */ var demux_demuxer = demuxer_Demuxer;
            // CONCATENATED MODULE: ./src/controller/level-helper.js
            /**
 * @module LevelHelper
 *
 * Providing methods dealing with playlist sliding and drift
 *
 * TODO: Create an actual `Level` class/model that deals with all this logic in an object-oriented-manner.
 *
 * */ function addGroupId(level, type, id) {
                switch(type){
                    case 'audio':
                        if (!level.audioGroupIds) level.audioGroupIds = [];
                        level.audioGroupIds.push(id);
                        break;
                    case 'text':
                        if (!level.textGroupIds) level.textGroupIds = [];
                        level.textGroupIds.push(id);
                        break;
                }
            }
            function updatePTS(fragments, fromIdx, toIdx) {
                var fragFrom = fragments[fromIdx], fragTo = fragments[toIdx], fragToPTS = fragTo.startPTS; // if we know startPTS[toIdx]
                if (Object(number["isFiniteNumber"])(fragToPTS)) {
                    // update fragment duration.
                    // it helps to fix drifts between playlist reported duration and fragment real duration
                    if (toIdx > fromIdx) {
                        fragFrom.duration = fragToPTS - fragFrom.start;
                        if (fragFrom.duration < 0) logger["logger"].warn("negative duration computed for frag " + fragFrom.sn + ",level " + fragFrom.level + ", there should be some duration drift between playlist and fragment!");
                    } else {
                        fragTo.duration = fragFrom.start - fragToPTS;
                        if (fragTo.duration < 0) logger["logger"].warn("negative duration computed for frag " + fragTo.sn + ",level " + fragTo.level + ", there should be some duration drift between playlist and fragment!");
                    }
                } else // we dont know startPTS[toIdx]
                if (toIdx > fromIdx) {
                    var contiguous = fragFrom.cc === fragTo.cc;
                    fragTo.start = fragFrom.start + (contiguous && fragFrom.minEndPTS ? fragFrom.minEndPTS - fragFrom.start : fragFrom.duration);
                } else fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);
            }
            function updateFragPTSDTS(details, frag, startPTS, endPTS, startDTS, endDTS) {
                // update frag PTS/DTS
                var maxStartPTS = startPTS;
                var minEndPTS = endPTS;
                if (Object(number["isFiniteNumber"])(frag.startPTS)) {
                    // delta PTS between audio and video
                    var deltaPTS = Math.abs(frag.startPTS - startPTS);
                    if (!Object(number["isFiniteNumber"])(frag.deltaPTS)) frag.deltaPTS = deltaPTS;
                    else frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);
                    maxStartPTS = Math.max(startPTS, frag.startPTS);
                    startPTS = Math.min(startPTS, frag.startPTS);
                    minEndPTS = Math.min(endPTS, frag.endPTS);
                    endPTS = Math.max(endPTS, frag.endPTS);
                    startDTS = Math.min(startDTS, frag.startDTS);
                    endDTS = Math.max(endDTS, frag.endDTS);
                }
                var drift = startPTS - frag.start;
                frag.start = frag.startPTS = startPTS;
                frag.maxStartPTS = maxStartPTS;
                frag.endPTS = endPTS;
                frag.minEndPTS = minEndPTS;
                frag.startDTS = startDTS;
                frag.endDTS = endDTS;
                frag.duration = endPTS - startPTS;
                var sn = frag.sn; // exit if sn out of range
                if (!details || sn < details.startSN || sn > details.endSN) return 0;
                var fragIdx, fragments, i;
                fragIdx = sn - details.startSN;
                fragments = details.fragments; // update frag reference in fragments array
                // rationale is that fragments array might not contain this frag object.
                // this will happen if playlist has been refreshed between frag loading and call to updateFragPTSDTS()
                // if we don't update frag, we won't be able to propagate PTS info on the playlist
                // resulting in invalid sliding computation
                fragments[fragIdx] = frag; // adjust fragment PTS/duration from seqnum-1 to frag 0
                for(i = fragIdx; i > 0; i--)updatePTS(fragments, i, i - 1);
                 // adjust fragment PTS/duration from seqnum to last frag
                for(i = fragIdx; i < fragments.length - 1; i++)updatePTS(fragments, i, i + 1);
                details.PTSKnown = true;
                return drift;
            }
            function mergeDetails(oldDetails, newDetails) {
                // potentially retrieve cached initsegment
                if (newDetails.initSegment && oldDetails.initSegment) newDetails.initSegment = oldDetails.initSegment;
                 // check if old/new playlists have fragments in common
                // loop through overlapping SN and update startPTS , cc, and duration if any found
                var ccOffset = 0;
                var PTSFrag;
                mapFragmentIntersection(oldDetails, newDetails, function(oldFrag, newFrag) {
                    ccOffset = oldFrag.cc - newFrag.cc;
                    if (Object(number["isFiniteNumber"])(oldFrag.startPTS)) {
                        newFrag.start = newFrag.startPTS = oldFrag.startPTS;
                        newFrag.endPTS = oldFrag.endPTS;
                        newFrag.duration = oldFrag.duration;
                        newFrag.backtracked = oldFrag.backtracked;
                        newFrag.dropped = oldFrag.dropped;
                        PTSFrag = newFrag;
                    } // PTS is known when there are overlapping segments
                    newDetails.PTSKnown = true;
                });
                if (!newDetails.PTSKnown) return;
                if (ccOffset) {
                    logger["logger"].log('discontinuity sliding from playlist, take drift into account');
                    var newFragments = newDetails.fragments;
                    for(var i = 0; i < newFragments.length; i++)newFragments[i].cc += ccOffset;
                } // if at least one fragment contains PTS info, recompute PTS information for all fragments
                if (PTSFrag) updateFragPTSDTS(newDetails, PTSFrag, PTSFrag.startPTS, PTSFrag.endPTS, PTSFrag.startDTS, PTSFrag.endDTS);
                else // ensure that delta is within oldFragments range
                // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])
                // in that case we also need to adjust start offset of all fragments
                adjustSliding(oldDetails, newDetails);
                 // if we are here, it means we have fragments overlapping between
                // old and new level. reliable PTS info is thus relying on old level
                newDetails.PTSKnown = oldDetails.PTSKnown;
            }
            function mergeSubtitlePlaylists(oldPlaylist, newPlaylist, referenceStart) {
                if (referenceStart === void 0) referenceStart = 0;
                var lastIndex = -1;
                mapFragmentIntersection(oldPlaylist, newPlaylist, function(oldFrag, newFrag, index) {
                    newFrag.start = oldFrag.start;
                    lastIndex = index;
                });
                var frags = newPlaylist.fragments;
                if (lastIndex < 0) {
                    frags.forEach(function(frag) {
                        frag.start += referenceStart;
                    });
                    return;
                }
                for(var i = lastIndex + 1; i < frags.length; i++)frags[i].start = frags[i - 1].start + frags[i - 1].duration;
            }
            function mapFragmentIntersection(oldPlaylist, newPlaylist, intersectionFn) {
                if (!oldPlaylist || !newPlaylist) return;
                var start = Math.max(oldPlaylist.startSN, newPlaylist.startSN) - newPlaylist.startSN;
                var end = Math.min(oldPlaylist.endSN, newPlaylist.endSN) - newPlaylist.startSN;
                var delta = newPlaylist.startSN - oldPlaylist.startSN;
                for(var i = start; i <= end; i++){
                    var oldFrag = oldPlaylist.fragments[delta + i];
                    var newFrag = newPlaylist.fragments[i];
                    if (!oldFrag || !newFrag) break;
                    intersectionFn(oldFrag, newFrag, i);
                }
            }
            function adjustSliding(oldPlaylist, newPlaylist) {
                var delta = newPlaylist.startSN - oldPlaylist.startSN;
                var oldFragments = oldPlaylist.fragments;
                var newFragments = newPlaylist.fragments;
                if (delta < 0 || delta > oldFragments.length) return;
                for(var i = 0; i < newFragments.length; i++)newFragments[i].start += oldFragments[delta].start;
            }
            function computeReloadInterval(currentPlaylist, newPlaylist, lastRequestTime) {
                var reloadInterval = 1000 * (newPlaylist.averagetargetduration ? newPlaylist.averagetargetduration : newPlaylist.targetduration);
                var minReloadInterval = reloadInterval / 2;
                if (currentPlaylist && newPlaylist.endSN === currentPlaylist.endSN) // follow HLS Spec, If the client reloads a Playlist file and finds that it has not
                // changed then it MUST wait for a period of one-half the target
                // duration before retrying.
                reloadInterval = minReloadInterval;
                if (lastRequestTime) reloadInterval = Math.max(minReloadInterval, reloadInterval - (window.performance.now() - lastRequestTime));
                 // in any case, don't reload more than half of target duration
                return Math.round(reloadInterval);
            }
            // CONCATENATED MODULE: ./src/utils/time-ranges.ts
            /**
 *  TimeRanges to string helper
 */ var TimeRanges1 = {
                toString: function toString(r) {
                    var log = '';
                    var len = r.length;
                    for(var i = 0; i < len; i++)log += '[' + r.start(i).toFixed(3) + ',' + r.end(i).toFixed(3) + ']';
                    return log;
                }
            };
            /* harmony default export */ var time_ranges = TimeRanges1;
            // CONCATENATED MODULE: ./src/utils/discontinuities.js
            function findFirstFragWithCC(fragments, cc) {
                var firstFrag = null;
                for(var i = 0; i < fragments.length; i += 1){
                    var currentFrag = fragments[i];
                    if (currentFrag && currentFrag.cc === cc) {
                        firstFrag = currentFrag;
                        break;
                    }
                }
                return firstFrag;
            }
            function findFragWithCC(fragments, CC) {
                return binary_search.search(fragments, function(candidate) {
                    if (candidate.cc < CC) return 1;
                    else if (candidate.cc > CC) return -1;
                    else return 0;
                });
            }
            function shouldAlignOnDiscontinuities(lastFrag, lastLevel, details) {
                var shouldAlign = false;
                if (lastLevel && lastLevel.details && details) {
                    if (details.endCC > details.startCC || lastFrag && lastFrag.cc < details.startCC) shouldAlign = true;
                }
                return shouldAlign;
            } // Find the first frag in the previous level which matches the CC of the first frag of the new level
            function findDiscontinuousReferenceFrag(prevDetails, curDetails) {
                var prevFrags = prevDetails.fragments;
                var curFrags = curDetails.fragments;
                if (!curFrags.length || !prevFrags.length) {
                    logger["logger"].log('No fragments to align');
                    return;
                }
                var prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);
                if (!prevStartFrag || prevStartFrag && !prevStartFrag.startPTS) {
                    logger["logger"].log('No frag in previous level to align on');
                    return;
                }
                return prevStartFrag;
            }
            function adjustPts(sliding, details) {
                details.fragments.forEach(function(frag) {
                    if (frag) {
                        var start = frag.start + sliding;
                        frag.start = frag.startPTS = start;
                        frag.endPTS = start + frag.duration;
                    }
                });
                details.PTSKnown = true;
            }
            /**
 * Using the parameters of the last level, this function computes PTS' of the new fragments so that they form a
 * contiguous stream with the last fragments.
 * The PTS of a fragment lets Hls.js know where it fits into a stream - by knowing every PTS, we know which fragment to
 * download at any given time. PTS is normally computed when the fragment is demuxed, so taking this step saves us time
 * and an extra download.
 * @param lastFrag
 * @param lastLevel
 * @param details
 */ function alignStream(lastFrag, lastLevel, details) {
                alignDiscontinuities(lastFrag, details, lastLevel);
                if (!details.PTSKnown && lastLevel) // If the PTS wasn't figured out via discontinuity sequence that means there was no CC increase within the level.
                // Aligning via Program Date Time should therefore be reliable, since PDT should be the same within the same
                // discontinuity sequence.
                alignPDT(details, lastLevel.details);
            }
            /**
 * Computes the PTS if a new level's fragments using the PTS of a fragment in the last level which shares the same
 * discontinuity sequence.
 * @param lastLevel - The details of the last loaded level
 * @param details - The details of the new level
 */ function alignDiscontinuities(lastFrag, details, lastLevel) {
                if (shouldAlignOnDiscontinuities(lastFrag, lastLevel, details)) {
                    var referenceFrag = findDiscontinuousReferenceFrag(lastLevel.details, details);
                    if (referenceFrag) {
                        logger["logger"].log('Adjusting PTS using last level due to CC increase within current level');
                        adjustPts(referenceFrag.start, details);
                    }
                }
            }
            /**
 * Computes the PTS of a new level's fragments using the difference in Program Date Time from the last level.
 * @param details - The details of the new level
 * @param lastDetails - The details of the last loaded level
 */ function alignPDT(details, lastDetails) {
                if (lastDetails && lastDetails.fragments.length) {
                    if (!details.hasProgramDateTime || !lastDetails.hasProgramDateTime) return;
                     // if last level sliding is 1000 and its first frag PROGRAM-DATE-TIME is 2017-08-20 1:10:00 AM
                    // and if new details first frag PROGRAM DATE-TIME is 2017-08-20 1:10:08 AM
                    // then we can deduce that playlist B sliding is 1000+8 = 1008s
                    var lastPDT = lastDetails.fragments[0].programDateTime;
                    var newPDT = details.fragments[0].programDateTime; // date diff is in ms. frag.start is in seconds
                    var sliding = (newPDT - lastPDT) / 1000 + lastDetails.fragments[0].start;
                    if (Object(number["isFiniteNumber"])(sliding)) {
                        logger["logger"].log("adjusting PTS using programDateTime delta, sliding:" + sliding.toFixed(3));
                        adjustPts(sliding, details);
                    }
                }
            }
            // CONCATENATED MODULE: ./src/controller/fragment-finders.ts
            /**
 * Returns first fragment whose endPdt value exceeds the given PDT.
 * @param {Array<Fragment>} fragments - The array of candidate fragments
 * @param {number|null} [PDTValue = null] - The PDT value which must be exceeded
 * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start/end can be within in order to be considered contiguous
 * @returns {*|null} fragment - The best matching fragment
 */ function findFragmentByPDT(fragments, PDTValue, maxFragLookUpTolerance) {
                if (PDTValue === null || !Array.isArray(fragments) || !fragments.length || !Object(number["isFiniteNumber"])(PDTValue)) return null;
                 // if less than start
                var startPDT = fragments[0].programDateTime;
                if (PDTValue < (startPDT || 0)) return null;
                var endPDT = fragments[fragments.length - 1].endProgramDateTime;
                if (PDTValue >= (endPDT || 0)) return null;
                maxFragLookUpTolerance = maxFragLookUpTolerance || 0;
                for(var seg = 0; seg < fragments.length; ++seg){
                    var frag = fragments[seg];
                    if (pdtWithinToleranceTest(PDTValue, maxFragLookUpTolerance, frag)) return frag;
                }
                return null;
            }
            /**
 * Finds a fragment based on the SN of the previous fragment; or based on the needs of the current buffer.
 * This method compensates for small buffer gaps by applying a tolerance to the start of any candidate fragment, thus
 * breaking any traps which would cause the same fragment to be continuously selected within a small range.
 * @param {*} fragPrevious - The last frag successfully appended
 * @param {Array<Fragment>} fragments - The array of candidate fragments
 * @param {number} [bufferEnd = 0] - The end of the contiguous buffered range the playhead is currently within
 * @param {number} maxFragLookUpTolerance - The amount of time that a fragment's start/end can be within in order to be considered contiguous
 * @returns {*} foundFrag - The best matching fragment
 */ function findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance) {
                if (bufferEnd === void 0) bufferEnd = 0;
                if (maxFragLookUpTolerance === void 0) maxFragLookUpTolerance = 0;
                var fragNext = null;
                if (fragPrevious) fragNext = fragments[fragPrevious.sn - fragments[0].sn + 1];
                else if (bufferEnd === 0 && fragments[0].start === 0) fragNext = fragments[0];
                 // Prefer the next fragment if it's within tolerance
                if (fragNext && fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext) === 0) return fragNext;
                 // We might be seeking past the tolerance so find the best match
                var foundFragment = binary_search.search(fragments, fragmentWithinToleranceTest.bind(null, bufferEnd, maxFragLookUpTolerance));
                if (foundFragment) return foundFragment;
                 // If no match was found return the next fragment after fragPrevious, or null
                return fragNext;
            }
            /**
 * The test function used by the findFragmentBySn's BinarySearch to look for the best match to the current buffer conditions.
 * @param {*} candidate - The fragment to test
 * @param {number} [bufferEnd = 0] - The end of the current buffered range the playhead is currently within
 * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous
 * @returns {number} - 0 if it matches, 1 if too low, -1 if too high
 */ function fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, candidate) {
                if (bufferEnd === void 0) bufferEnd = 0;
                if (maxFragLookUpTolerance === void 0) maxFragLookUpTolerance = 0;
                // offset should be within fragment boundary - config.maxFragLookUpTolerance
                // this is to cope with situations like
                // bufferEnd = 9.991
                // frag[Ø] : [0,10]
                // frag[1] : [10,20]
                // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here
                //              frag start               frag start+duration
                //                  |-----------------------------|
                //              <--->                         <--->
                //  ...--------><-----------------------------><---------....
                // previous frag         matching fragment         next frag
                //  return -1             return 0                 return 1
                // logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);
                // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments
                var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0));
                if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) return 1;
                else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) // if maxFragLookUpTolerance will have negative value then don't return -1 for first element
                return -1;
                return 0;
            }
            /**
 * The test function used by the findFragmentByPdt's BinarySearch to look for the best match to the current buffer conditions.
 * This function tests the candidate's program date time values, as represented in Unix time
 * @param {*} candidate - The fragment to test
 * @param {number} [pdtBufferEnd = 0] - The Unix time representing the end of the current buffered range
 * @param {number} [maxFragLookUpTolerance = 0] - The amount of time that a fragment's start can be within in order to be considered contiguous
 * @returns {boolean} True if contiguous, false otherwise
 */ function pdtWithinToleranceTest(pdtBufferEnd, maxFragLookUpTolerance, candidate) {
                var candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration + (candidate.deltaPTS ? candidate.deltaPTS : 0)) * 1000; // endProgramDateTime can be null, default to zero
                var endProgramDateTime = candidate.endProgramDateTime || 0;
                return endProgramDateTime - candidateLookupTolerance > pdtBufferEnd;
            }
            // CONCATENATED MODULE: ./src/controller/gap-controller.js
            var STALL_MINIMUM_DURATION_MS = 250;
            var MAX_START_GAP_JUMP = 2;
            var SKIP_BUFFER_HOLE_STEP_SECONDS = 0.1;
            var SKIP_BUFFER_RANGE_START = 0.05;
            var gap_controller_GapController = /*#__PURE__*/ function() {
                function GapController(config, media, fragmentTracker, hls) {
                    this.config = config;
                    this.media = media;
                    this.fragmentTracker = fragmentTracker;
                    this.hls = hls;
                    this.nudgeRetry = 0;
                    this.stallReported = false;
                    this.stalled = null;
                    this.moved = false;
                    this.seeking = false;
                }
                /**
   * Checks if the playhead is stuck within a gap, and if so, attempts to free it.
   * A gap is an unbuffered range between two buffered ranges (or the start and the first buffered range).
   *
   * @param {number} lastCurrentTime Previously read playhead position
   */ var _proto = GapController.prototype;
                _proto.poll = function poll(lastCurrentTime) {
                    var config = this.config, media = this.media, stalled = this.stalled;
                    var currentTime = media.currentTime, seeking = media.seeking;
                    var seeked = this.seeking && !seeking;
                    var beginSeek = !this.seeking && seeking;
                    this.seeking = seeking; // The playhead is moving, no-op
                    if (currentTime !== lastCurrentTime) {
                        this.moved = true;
                        if (stalled !== null) {
                            // The playhead is now moving, but was previously stalled
                            if (this.stallReported) {
                                var _stalledDuration = self.performance.now() - stalled;
                                logger["logger"].warn("playback not stuck anymore @" + currentTime + ", after " + Math.round(_stalledDuration) + "ms");
                                this.stallReported = false;
                            }
                            this.stalled = null;
                            this.nudgeRetry = 0;
                        }
                        return;
                    } // Clear stalled state when beginning or finishing seeking so that we don't report stalls coming out of a seek
                    if (beginSeek || seeked) this.stalled = null;
                     // The playhead should not be moving
                    if (media.paused || media.ended || media.playbackRate === 0 || !media.buffered.length) return;
                    var bufferInfo = BufferHelper.bufferInfo(media, currentTime, 0);
                    var isBuffered = bufferInfo.len > 0;
                    var nextStart = bufferInfo.nextStart || 0; // There is no playable buffer (waiting for buffer append)
                    if (!isBuffered && !nextStart) return;
                    if (seeking) {
                        // Waiting for seeking in a buffered range to complete
                        var hasEnoughBuffer = bufferInfo.len > MAX_START_GAP_JUMP; // Next buffered range is too far ahead to jump to while still seeking
                        var noBufferGap = !nextStart || nextStart - currentTime > MAX_START_GAP_JUMP && !this.fragmentTracker.getPartialFragment(currentTime);
                        if (hasEnoughBuffer || noBufferGap) return;
                         // Reset moved state when seeking to a point in or before a gap
                        this.moved = false;
                    } // Skip start gaps if we haven't played, but the last poll detected the start of a stall
                    // The addition poll gives the browser a chance to jump the gap for us
                    if (!this.moved && this.stalled) {
                        // Jump start gaps within jump threshold
                        var startJump = Math.max(nextStart, bufferInfo.start || 0) - currentTime;
                        if (startJump > 0 && startJump <= MAX_START_GAP_JUMP) {
                            this._trySkipBufferHole(null);
                            return;
                        }
                    } // Start tracking stall time
                    var tnow = self.performance.now();
                    if (stalled === null) {
                        this.stalled = tnow;
                        return;
                    }
                    var stalledDuration = tnow - stalled;
                    if (!seeking && stalledDuration >= STALL_MINIMUM_DURATION_MS) // Report stalling after trying to fix
                    this._reportStall(bufferInfo.len);
                    var bufferedWithHoles = BufferHelper.bufferInfo(media, currentTime, config.maxBufferHole);
                    this._tryFixBufferStall(bufferedWithHoles, stalledDuration);
                };
                _proto._tryFixBufferStall = function _tryFixBufferStall(bufferInfo, stalledDurationMs) {
                    var config = this.config, fragmentTracker = this.fragmentTracker, media = this.media;
                    var currentTime = media.currentTime;
                    var partial = fragmentTracker.getPartialFragment(currentTime);
                    if (partial) {
                        // Try to skip over the buffer hole caused by a partial fragment
                        // This method isn't limited by the size of the gap between buffered ranges
                        var targetTime = this._trySkipBufferHole(partial); // we return here in this case, meaning
                        // the branch below only executes when we don't handle a partial fragment
                        if (targetTime) return;
                    } // if we haven't had to skip over a buffer hole of a partial fragment
                    // we may just have to "nudge" the playlist as the browser decoding/rendering engine
                    // needs to cross some sort of threshold covering all source-buffers content
                    // to start playing properly.
                    if (bufferInfo.len > config.maxBufferHole && stalledDurationMs > config.highBufferWatchdogPeriod * 1000) {
                        logger["logger"].warn('Trying to nudge playhead over buffer-hole'); // Try to nudge currentTime over a buffer hole if we've been stalling for the configured amount of seconds
                        // We only try to jump the hole if it's under the configured size
                        // Reset stalled so to rearm watchdog timer
                        this.stalled = null;
                        this._tryNudgeBuffer();
                    }
                };
                _proto._reportStall = function _reportStall(bufferLen) {
                    var hls = this.hls, media = this.media, stallReported = this.stallReported;
                    if (!stallReported) {
                        // Report stalled error once
                        this.stallReported = true;
                        logger["logger"].warn("Playback stalling at @" + media.currentTime + " due to low buffer (buffer=" + bufferLen + ")");
                        hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].MEDIA_ERROR,
                            details: errors["ErrorDetails"].BUFFER_STALLED_ERROR,
                            fatal: false,
                            buffer: bufferLen
                        });
                    }
                };
                _proto._trySkipBufferHole = function _trySkipBufferHole(partial) {
                    var config = this.config, hls = this.hls, media = this.media;
                    var currentTime = media.currentTime;
                    var lastEndTime = 0; // Check if currentTime is between unbuffered regions of partial fragments
                    for(var i = 0; i < media.buffered.length; i++){
                        var startTime = media.buffered.start(i);
                        if (currentTime + config.maxBufferHole >= lastEndTime && currentTime < startTime) {
                            var targetTime = Math.max(startTime + SKIP_BUFFER_RANGE_START, media.currentTime + SKIP_BUFFER_HOLE_STEP_SECONDS);
                            logger["logger"].warn("skipping hole, adjusting currentTime from " + currentTime + " to " + targetTime);
                            this.moved = true;
                            this.stalled = null;
                            media.currentTime = targetTime;
                            if (partial) hls.trigger(events["default"].ERROR, {
                                type: errors["ErrorTypes"].MEDIA_ERROR,
                                details: errors["ErrorDetails"].BUFFER_SEEK_OVER_HOLE,
                                fatal: false,
                                reason: "fragment loaded with buffer holes, seeking from " + currentTime + " to " + targetTime,
                                frag: partial
                            });
                            return targetTime;
                        }
                        lastEndTime = media.buffered.end(i);
                    }
                    return 0;
                };
                _proto._tryNudgeBuffer = function _tryNudgeBuffer() {
                    var config = this.config, hls = this.hls, media = this.media;
                    var currentTime = media.currentTime;
                    var nudgeRetry = (this.nudgeRetry || 0) + 1;
                    this.nudgeRetry = nudgeRetry;
                    if (nudgeRetry < config.nudgeMaxRetry) {
                        var targetTime = currentTime + nudgeRetry * config.nudgeOffset; // playback stalled in buffered area ... let's nudge currentTime to try to overcome this
                        logger["logger"].warn("Nudging 'currentTime' from " + currentTime + " to " + targetTime);
                        media.currentTime = targetTime;
                        hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].MEDIA_ERROR,
                            details: errors["ErrorDetails"].BUFFER_NUDGE_ON_STALL,
                            fatal: false
                        });
                    } else {
                        logger["logger"].error("Playhead still not moving while enough data buffered @" + currentTime + " after " + config.nudgeMaxRetry + " nudges");
                        hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].MEDIA_ERROR,
                            details: errors["ErrorDetails"].BUFFER_STALLED_ERROR,
                            fatal: true
                        });
                    }
                };
                return GapController;
            }();
            // CONCATENATED MODULE: ./src/task-loop.ts
            function _assertThisInitialized(self) {
                if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return self;
            }
            function task_loop_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /**
 * Sub-class specialization of EventHandler base class.
 *
 * TaskLoop allows to schedule a task function being called (optionnaly repeatedly) on the main loop,
 * scheduled asynchroneously, avoiding recursive calls in the same tick.
 *
 * The task itself is implemented in `doTick`. It can be requested and called for single execution
 * using the `tick` method.
 *
 * It will be assured that the task execution method (`tick`) only gets called once per main loop "tick",
 * no matter how often it gets requested for execution. Execution in further ticks will be scheduled accordingly.
 *
 * If further execution requests have already been scheduled on the next tick, it can be checked with `hasNextTick`,
 * and cancelled with `clearNextTick`.
 *
 * The task can be scheduled as an interval repeatedly with a period as parameter (see `setInterval`, `clearInterval`).
 *
 * Sub-classes need to implement the `doTick` method which will effectively have the task execution routine.
 *
 * Further explanations:
 *
 * The baseclass has a `tick` method that will schedule the doTick call. It may be called synchroneously
 * only for a stack-depth of one. On re-entrant calls, sub-sequent calls are scheduled for next main loop ticks.
 *
 * When the task execution (`tick` method) is called in re-entrant way this is detected and
 * we are limiting the task execution per call stack to exactly one, but scheduling/post-poning further
 * task processing on the next main loop iteration (also known as "next tick" in the Node/JS runtime lingo).
 */ var TaskLoop1 = /*#__PURE__*/ function(_EventHandler) {
                task_loop_inheritsLoose(TaskLoop2, _EventHandler);
                function TaskLoop2(hls) {
                    var _this;
                    for(var _len = arguments.length, events1 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)events1[_key - 1] = arguments[_key];
                    _this = _EventHandler.call.apply(_EventHandler, [
                        this,
                        hls
                    ].concat(events1)) || this;
                    _this._boundTick = void 0;
                    _this._tickTimer = null;
                    _this._tickInterval = null;
                    _this._tickCallCount = 0;
                    _this._boundTick = _this.tick.bind(_assertThisInitialized(_this));
                    return _this;
                }
                /**
   * @override
   */ var _proto = TaskLoop2.prototype;
                _proto.onHandlerDestroying = function onHandlerDestroying() {
                    // clear all timers before unregistering from event bus
                    this.clearNextTick();
                    this.clearInterval();
                };
                _proto.hasInterval = function hasInterval() {
                    return !!this._tickInterval;
                };
                _proto.hasNextTick = function hasNextTick() {
                    return !!this._tickTimer;
                };
                _proto.setInterval = function setInterval(millis) {
                    if (!this._tickInterval) {
                        this._tickInterval = self.setInterval(this._boundTick, millis);
                        return true;
                    }
                    return false;
                };
                _proto.clearInterval = function clearInterval() {
                    if (this._tickInterval) {
                        self.clearInterval(this._tickInterval);
                        this._tickInterval = null;
                        return true;
                    }
                    return false;
                };
                _proto.clearNextTick = function clearNextTick() {
                    if (this._tickTimer) {
                        self.clearTimeout(this._tickTimer);
                        this._tickTimer = null;
                        return true;
                    }
                    return false;
                };
                _proto.tick = function tick() {
                    this._tickCallCount++;
                    if (this._tickCallCount === 1) {
                        this.doTick(); // re-entrant call to tick from previous doTick call stack
                        // -> schedule a call on the next main loop iteration to process this task processing request
                        if (this._tickCallCount > 1) {
                            // make sure only one timer exists at any time at max
                            this.clearNextTick();
                            this._tickTimer = self.setTimeout(this._boundTick, 0);
                        }
                        this._tickCallCount = 0;
                    }
                };
                _proto.doTick = function doTick() {
                };
                return TaskLoop2;
            }(event_handler);
            // CONCATENATED MODULE: ./src/controller/base-stream-controller.js
            function base_stream_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            var State = {
                STOPPED: 'STOPPED',
                STARTING: 'STARTING',
                IDLE: 'IDLE',
                PAUSED: 'PAUSED',
                KEY_LOADING: 'KEY_LOADING',
                FRAG_LOADING: 'FRAG_LOADING',
                FRAG_LOADING_WAITING_RETRY: 'FRAG_LOADING_WAITING_RETRY',
                WAITING_TRACK: 'WAITING_TRACK',
                PARSING: 'PARSING',
                PARSED: 'PARSED',
                BUFFER_FLUSHING: 'BUFFER_FLUSHING',
                ENDED: 'ENDED',
                ERROR: 'ERROR',
                WAITING_INIT_PTS: 'WAITING_INIT_PTS',
                WAITING_LEVEL: 'WAITING_LEVEL'
            };
            var base_stream_controller_BaseStreamController = /*#__PURE__*/ function(_TaskLoop) {
                base_stream_controller_inheritsLoose(BaseStreamController, _TaskLoop);
                function BaseStreamController() {
                    return _TaskLoop.apply(this, arguments) || this;
                }
                var _proto = BaseStreamController.prototype;
                _proto.doTick = function doTick() {
                };
                _proto.startLoad = function startLoad() {
                };
                _proto.stopLoad = function stopLoad() {
                    var frag = this.fragCurrent;
                    if (frag) {
                        if (frag.loader) frag.loader.abort();
                        this.fragmentTracker.removeFragment(frag);
                    }
                    if (this.demuxer) {
                        this.demuxer.destroy();
                        this.demuxer = null;
                    }
                    this.fragCurrent = null;
                    this.fragPrevious = null;
                    this.clearInterval();
                    this.clearNextTick();
                    this.state = State.STOPPED;
                };
                _proto._streamEnded = function _streamEnded(bufferInfo, levelDetails) {
                    var fragCurrent = this.fragCurrent, fragmentTracker = this.fragmentTracker; // we just got done loading the final fragment and there is no other buffered range after ...
                    // rationale is that in case there are any buffered ranges after, it means that there are unbuffered portion in between
                    // so we should not switch to ENDED in that case, to be able to buffer them
                    // dont switch to ENDED if we need to backtrack last fragment
                    if (!levelDetails.live && fragCurrent && !fragCurrent.backtracked && fragCurrent.sn === levelDetails.endSN && !bufferInfo.nextStart) {
                        var fragState = fragmentTracker.getState(fragCurrent);
                        return fragState === FragmentState.PARTIAL || fragState === FragmentState.OK;
                    }
                    return false;
                };
                _proto.onMediaSeeking = function onMediaSeeking() {
                    var config = this.config, media = this.media, mediaBuffer = this.mediaBuffer, state = this.state;
                    var currentTime = media ? media.currentTime : null;
                    var bufferInfo = BufferHelper.bufferInfo(mediaBuffer || media, currentTime, this.config.maxBufferHole);
                    logger["logger"].log("media seeking to " + (Object(number["isFiniteNumber"])(currentTime) ? currentTime.toFixed(3) : currentTime));
                    if (state === State.FRAG_LOADING) {
                        var fragCurrent = this.fragCurrent; // check if we are seeking to a unbuffered area AND if frag loading is in progress
                        if (bufferInfo.len === 0 && fragCurrent) {
                            var tolerance = config.maxFragLookUpTolerance;
                            var fragStartOffset = fragCurrent.start - tolerance;
                            var fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance; // check if we seek position will be out of currently loaded frag range : if out cancel frag load, if in, don't do anything
                            if (currentTime < fragStartOffset || currentTime > fragEndOffset) {
                                if (fragCurrent.loader) {
                                    logger["logger"].log('seeking outside of buffer while fragment load in progress, cancel fragment load');
                                    fragCurrent.loader.abort();
                                }
                                this.fragCurrent = null;
                                this.fragPrevious = null; // switch to IDLE state to load new fragment
                                this.state = State.IDLE;
                            } else logger["logger"].log('seeking outside of buffer but within currently loaded fragment range');
                        }
                    } else if (state === State.ENDED) {
                        // if seeking to unbuffered area, clean up fragPrevious
                        if (bufferInfo.len === 0) {
                            this.fragPrevious = null;
                            this.fragCurrent = null;
                        } // switch to IDLE state to check for potential new fragment
                        this.state = State.IDLE;
                    }
                    if (media) this.lastCurrentTime = currentTime;
                     // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target
                    if (!this.loadedmetadata) this.nextLoadPosition = this.startPosition = currentTime;
                     // tick to speed up processing
                    this.tick();
                };
                _proto.onMediaEnded = function onMediaEnded() {
                    // reset startPosition and lastCurrentTime to restart playback @ stream beginning
                    this.startPosition = this.lastCurrentTime = 0;
                };
                _proto.onHandlerDestroying = function onHandlerDestroying() {
                    this.stopLoad();
                    _TaskLoop.prototype.onHandlerDestroying.call(this);
                };
                _proto.onHandlerDestroyed = function onHandlerDestroyed() {
                    this.state = State.STOPPED;
                    this.fragmentTracker = null;
                };
                _proto.computeLivePosition = function computeLivePosition(sliding, levelDetails) {
                    var targetLatency = this.config.liveSyncDuration !== undefined ? this.config.liveSyncDuration : this.config.liveSyncDurationCount * levelDetails.targetduration;
                    return sliding + Math.max(0, levelDetails.totalduration - targetLatency);
                };
                return BaseStreamController;
            }(TaskLoop1);
            // CONCATENATED MODULE: ./src/controller/stream-controller.js
            function stream_controller_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function stream_controller_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) stream_controller_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) stream_controller_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            function stream_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /*
 * Stream Controller
*/ var TICK_INTERVAL = 100; // how often to tick in ms
            var stream_controller_StreamController = /*#__PURE__*/ function(_BaseStreamController) {
                stream_controller_inheritsLoose(StreamController, _BaseStreamController);
                function StreamController(hls, fragmentTracker) {
                    var _this;
                    _this = _BaseStreamController.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHING, events["default"].MANIFEST_LOADING, events["default"].MANIFEST_PARSED, events["default"].LEVEL_LOADED, events["default"].LEVELS_UPDATED, events["default"].KEY_LOADED, events["default"].FRAG_LOADED, events["default"].FRAG_LOAD_EMERGENCY_ABORTED, events["default"].FRAG_PARSING_INIT_SEGMENT, events["default"].FRAG_PARSING_DATA, events["default"].FRAG_PARSED, events["default"].ERROR, events["default"].AUDIO_TRACK_SWITCHING, events["default"].AUDIO_TRACK_SWITCHED, events["default"].BUFFER_CREATED, events["default"].BUFFER_APPENDED, events["default"].BUFFER_FLUSHED) || this;
                    _this.fragmentTracker = fragmentTracker;
                    _this.config = hls.config;
                    _this.audioCodecSwap = false;
                    _this._state = State.STOPPED;
                    _this.stallReported = false;
                    _this.gapController = null;
                    _this.altAudio = false;
                    _this.audioOnly = false;
                    _this.bitrateTest = false;
                    return _this;
                }
                var _proto = StreamController.prototype;
                _proto.startLoad = function startLoad(startPosition) {
                    if (this.levels) {
                        var lastCurrentTime = this.lastCurrentTime, hls = this.hls;
                        this.stopLoad();
                        this.setInterval(TICK_INTERVAL);
                        this.level = -1;
                        this.fragLoadError = 0;
                        if (!this.startFragRequested) {
                            // determine load level
                            var startLevel = hls.startLevel;
                            if (startLevel === -1) {
                                if (hls.config.testBandwidth) {
                                    // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level
                                    startLevel = 0;
                                    this.bitrateTest = true;
                                } else startLevel = hls.nextAutoLevel;
                            } // set new level to playlist loader : this will trigger start level load
                            // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded
                            this.level = hls.nextLoadLevel = startLevel;
                            this.loadedmetadata = false;
                        } // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime
                        if (lastCurrentTime > 0 && startPosition === -1) {
                            logger["logger"].log("override startPosition with lastCurrentTime @" + lastCurrentTime.toFixed(3));
                            startPosition = lastCurrentTime;
                        }
                        this.state = State.IDLE;
                        this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;
                        this.tick();
                    } else {
                        this.forceStartLoad = true;
                        this.state = State.STOPPED;
                    }
                };
                _proto.stopLoad = function stopLoad() {
                    this.forceStartLoad = false;
                    _BaseStreamController.prototype.stopLoad.call(this);
                };
                _proto.doTick = function doTick() {
                    switch(this.state){
                        case State.BUFFER_FLUSHING:
                            // in buffer flushing state, reset fragLoadError counter
                            this.fragLoadError = 0;
                            break;
                        case State.IDLE:
                            this._doTickIdle();
                            break;
                        case State.WAITING_LEVEL:
                            var level = this.levels[this.level]; // check if playlist is already loaded
                            if (level && level.details) this.state = State.IDLE;
                            break;
                        case State.FRAG_LOADING_WAITING_RETRY:
                            var now = window.performance.now();
                            var retryDate = this.retryDate; // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading
                            if (!retryDate || now >= retryDate || this.media && this.media.seeking) {
                                logger["logger"].log('mediaController: retryDate reached, switch back to IDLE state');
                                this.state = State.IDLE;
                            }
                            break;
                        case State.ERROR:
                        case State.STOPPED:
                        case State.FRAG_LOADING:
                        case State.PARSING:
                        case State.PARSED:
                        case State.ENDED:
                            break;
                        default:
                            break;
                    } // check buffer
                    this._checkBuffer(); // check/update current fragment
                    this._checkFragmentChanged();
                } // Ironically the "idle" state is the on we do the most logic in it seems ....
                ;
                _proto._doTickIdle = function _doTickIdle() {
                    var hls = this.hls, config = hls.config, media = this.media; // if start level not parsed yet OR
                    // if video not attached AND start fragment already requested OR start frag prefetch disable
                    // exit loop, as we either need more info (level not parsed) or we need media to be attached to load new fragment
                    if (this.levelLastLoaded === undefined || !media && (this.startFragRequested || !config.startFragPrefetch)) return;
                     // If the "main" level is audio-only but we are loading an alternate track in the same group, do not load anything
                    if (this.altAudio && this.audioOnly) {
                        // Clear audio demuxer state so when switching back to main audio we're not still appending where we left off
                        this.demuxer.frag = null;
                        return;
                    } // if we have not yet loaded any fragment, start loading from start position
                    var pos;
                    if (this.loadedmetadata) pos = media.currentTime;
                    else pos = this.nextLoadPosition;
                     // determine next load level
                    var level = hls.nextLoadLevel, levelInfo = this.levels[level];
                    if (!levelInfo) return;
                    var levelBitrate = levelInfo.bitrate, maxBufLen; // compute max Buffer Length that we could get from this load level, based on level bitrate.
                    if (levelBitrate) maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);
                    else maxBufLen = config.maxBufferLength;
                    maxBufLen = Math.min(maxBufLen, config.maxMaxBufferLength); // determine next candidate fragment to be loaded, based on current position and end of buffer position
                    // ensure up to `config.maxMaxBufferLength` of buffer upfront
                    var maxBufferHole = pos < config.maxBufferHole ? Math.max(MAX_START_GAP_JUMP, config.maxBufferHole) : config.maxBufferHole;
                    var bufferInfo = BufferHelper.bufferInfo(this.mediaBuffer ? this.mediaBuffer : media, pos, maxBufferHole);
                    var bufferLen = bufferInfo.len; // Stay idle if we are still with buffer margins
                    if (bufferLen >= maxBufLen) return;
                     // if buffer length is less than maxBufLen try to load a new fragment ...
                    logger["logger"].trace("buffer length of " + bufferLen.toFixed(3) + " is below max of " + maxBufLen.toFixed(3) + ". checking for more payload ..."); // set next load level : this will trigger a playlist load if needed
                    this.level = hls.nextLoadLevel = level;
                    var levelDetails = levelInfo.details; // if level info not retrieved yet, switch state and wait for level retrieval
                    // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load
                    // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)
                    if (!levelDetails || levelDetails.live && this.levelLastLoaded !== level) {
                        this.state = State.WAITING_LEVEL;
                        return;
                    }
                    if (this._streamEnded(bufferInfo, levelDetails)) {
                        var data = {
                        };
                        if (this.altAudio) data.type = 'video';
                        this.hls.trigger(events["default"].BUFFER_EOS, data);
                        this.state = State.ENDED;
                        return;
                    } // if we have the levelDetails for the selected variant, lets continue enrichen our stream (load keys/fragments or trigger EOS, etc..)
                    this._fetchPayloadOrEos(pos, bufferInfo, levelDetails);
                };
                _proto._fetchPayloadOrEos = function _fetchPayloadOrEos(pos, bufferInfo, levelDetails) {
                    var fragPrevious = this.fragPrevious, level = this.level, fragments = levelDetails.fragments, fragLen = fragments.length; // empty playlist
                    if (fragLen === 0) return;
                     // find fragment index, contiguous with end of buffer position
                    var start = fragments[0].start, end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration, bufferEnd = bufferInfo.end, frag;
                    if (levelDetails.initSegment && !levelDetails.initSegment.data) frag = levelDetails.initSegment;
                    else {
                        // in case of live playlist we need to ensure that requested position is not located before playlist start
                        if (levelDetails.live) {
                            var initialLiveManifestSize = this.config.initialLiveManifestSize;
                            if (fragLen < initialLiveManifestSize) {
                                logger["logger"].warn("Can not start playback of a level, reason: not enough fragments " + fragLen + " < " + initialLiveManifestSize);
                                return;
                            }
                            frag = this._ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments); // if it explicitely returns null don't load any fragment and exit function now
                            if (frag === null) return;
                        } else // VoD playlist: if bufferEnd before start of playlist, load first fragment
                        if (bufferEnd < start) frag = fragments[0];
                    }
                    if (!frag) frag = this._findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails);
                    if (frag) {
                        if (frag.encrypted) this._loadKey(frag, levelDetails);
                        else this._loadFragment(frag, levelDetails, pos, bufferEnd);
                    }
                };
                _proto._ensureFragmentAtLivePoint = function _ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments) {
                    var config = this.hls.config, media = this.media;
                    var frag; // check if requested position is within seekable boundaries :
                    // logger.log(`start/pos/bufEnd/seeking:${start.toFixed(3)}/${pos.toFixed(3)}/${bufferEnd.toFixed(3)}/${this.media.seeking}`);
                    var maxLatency = Infinity;
                    if (config.liveMaxLatencyDuration !== undefined) maxLatency = config.liveMaxLatencyDuration;
                    else if (Object(number["isFiniteNumber"])(config.liveMaxLatencyDurationCount)) maxLatency = config.liveMaxLatencyDurationCount * levelDetails.targetduration;
                    if (bufferEnd < Math.max(start - config.maxFragLookUpTolerance, end - maxLatency)) {
                        var liveSyncPosition = this.liveSyncPosition = this.computeLivePosition(start, levelDetails);
                        bufferEnd = liveSyncPosition;
                        if (media && !media.paused && media.readyState && media.duration > liveSyncPosition && liveSyncPosition > media.currentTime) {
                            logger["logger"].log("buffer end: " + bufferEnd.toFixed(3) + " is located too far from the end of live sliding playlist, reset currentTime to : " + liveSyncPosition.toFixed(3));
                            media.currentTime = liveSyncPosition;
                        }
                        this.nextLoadPosition = liveSyncPosition;
                    } // if end of buffer greater than live edge, don't load any fragment
                    // this could happen if live playlist intermittently slides in the past.
                    // level 1 loaded [182580161,182580167]
                    // level 1 loaded [182580162,182580169]
                    // Loading 182580168 of [182580162 ,182580169],level 1 ..
                    // Loading 182580169 of [182580162 ,182580169],level 1 ..
                    // level 1 loaded [182580162,182580168] <============= here we should have bufferEnd > end. in that case break to avoid reloading 182580168
                    // level 1 loaded [182580164,182580171]
                    //
                    // don't return null in case media not loaded yet (readystate === 0)
                    if (levelDetails.PTSKnown && bufferEnd > end && media && media.readyState) return null;
                    if (this.startFragRequested && !levelDetails.PTSKnown) /* we are switching level on live playlist, but we don't have any PTS info for that quality level ...
         try to load frag matching with next SN.
         even if SN are not synchronized between playlists, loading this frag will help us
         compute playlist sliding and find the right one after in case it was not the right consecutive one */ {
                        if (fragPrevious) {
                            if (levelDetails.hasProgramDateTime) {
                                // Relies on PDT in order to switch bitrates (Support EXT-X-DISCONTINUITY without EXT-X-DISCONTINUITY-SEQUENCE)
                                logger["logger"].log("live playlist, switching playlist, load frag with same PDT: " + fragPrevious.programDateTime);
                                frag = findFragmentByPDT(fragments, fragPrevious.endProgramDateTime, config.maxFragLookUpTolerance);
                            } else {
                                // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)
                                var targetSN = fragPrevious.sn + 1;
                                if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {
                                    var fragNext = fragments[targetSN - levelDetails.startSN];
                                    if (fragPrevious.cc === fragNext.cc) {
                                        frag = fragNext;
                                        logger["logger"].log("live playlist, switching playlist, load frag with next SN: " + frag.sn);
                                    }
                                } // next frag SN not available (or not with same continuity counter)
                                // look for a frag sharing the same CC
                                if (!frag) {
                                    frag = binary_search.search(fragments, function(frag1) {
                                        return fragPrevious.cc - frag1.cc;
                                    });
                                    if (frag) logger["logger"].log("live playlist, switching playlist, load frag with same CC: " + frag.sn);
                                }
                            }
                        }
                    }
                    return frag;
                };
                _proto._findFragment = function _findFragment(start, fragPreviousLoad, fragmentIndexRange, fragments, bufferEnd, end, levelDetails) {
                    var config = this.hls.config;
                    var fragNextLoad;
                    if (bufferEnd < end) {
                        var lookupTolerance = bufferEnd > end - config.maxFragLookUpTolerance ? 0 : config.maxFragLookUpTolerance; // Remove the tolerance if it would put the bufferEnd past the actual end of stream
                        // Uses buffer and sequence number to calculate switch segment (required if using EXT-X-DISCONTINUITY-SEQUENCE)
                        fragNextLoad = findFragmentByPTS(fragPreviousLoad, fragments, bufferEnd, lookupTolerance);
                    } else // reach end of playlist
                    fragNextLoad = fragments[fragmentIndexRange - 1];
                    if (fragNextLoad) {
                        var curSNIdx = fragNextLoad.sn - levelDetails.startSN;
                        var sameLevel = fragPreviousLoad && fragNextLoad.level === fragPreviousLoad.level;
                        var prevSnFrag = fragments[curSNIdx - 1];
                        var nextSnFrag = fragments[curSNIdx + 1]; // logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);
                        if (fragPreviousLoad && fragNextLoad.sn === fragPreviousLoad.sn) {
                            if (sameLevel && !fragNextLoad.backtracked) {
                                if (fragNextLoad.sn < levelDetails.endSN) {
                                    var deltaPTS = fragPreviousLoad.deltaPTS; // if there is a significant delta between audio and video, larger than max allowed hole,
                                    // and if previous remuxed fragment did not start with a keyframe. (fragPrevious.dropped)
                                    // let's try to load previous fragment again to get last keyframe
                                    // then we will reload again current fragment (that way we should be able to fill the buffer hole ...)
                                    if (deltaPTS && deltaPTS > config.maxBufferHole && fragPreviousLoad.dropped && curSNIdx) {
                                        fragNextLoad = prevSnFrag;
                                        logger["logger"].warn('Previous fragment was dropped with large PTS gap between audio and video. Maybe fragment is not starting with a keyframe? Loading previous one to try to overcome this');
                                    } else {
                                        fragNextLoad = nextSnFrag;
                                        if (this.fragmentTracker.getState(fragNextLoad) !== FragmentState.OK) logger["logger"].log("Re-loading fragment with SN: " + fragNextLoad.sn);
                                    }
                                } else fragNextLoad = null;
                            } else if (fragNextLoad.backtracked) {
                                // Only backtrack a max of 1 consecutive fragment to prevent sliding back too far when little or no frags start with keyframes
                                if (nextSnFrag && nextSnFrag.backtracked) {
                                    logger["logger"].warn("Already backtracked from fragment " + nextSnFrag.sn + ", will not backtrack to fragment " + fragNextLoad.sn + ". Loading fragment " + nextSnFrag.sn);
                                    fragNextLoad = nextSnFrag;
                                } else {
                                    // If a fragment has dropped frames and it's in a same level/sequence, load the previous fragment to try and find the keyframe
                                    // Reset the dropped count now since it won't be reset until we parse the fragment again, which prevents infinite backtracking on the same segment
                                    logger["logger"].warn('Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe');
                                    fragNextLoad.dropped = 0;
                                    if (prevSnFrag) {
                                        fragNextLoad = prevSnFrag;
                                        fragNextLoad.backtracked = true;
                                    } else if (curSNIdx) // can't backtrack on very first fragment
                                    fragNextLoad = null;
                                }
                            }
                        }
                    }
                    return fragNextLoad;
                };
                _proto._loadKey = function _loadKey(frag, levelDetails) {
                    logger["logger"].log("Loading key for " + frag.sn + " of [" + levelDetails.startSN + "-" + levelDetails.endSN + "], level " + this.level);
                    this.state = State.KEY_LOADING;
                    this.hls.trigger(events["default"].KEY_LOADING, {
                        frag: frag
                    });
                };
                _proto._loadFragment = function _loadFragment(frag, levelDetails, pos, bufferEnd) {
                    // Check if fragment is not loaded
                    var fragState = this.fragmentTracker.getState(frag);
                    this.fragCurrent = frag;
                    if (frag.sn !== 'initSegment') this.startFragRequested = true;
                     // Don't update nextLoadPosition for fragments which are not buffered
                    if (Object(number["isFiniteNumber"])(frag.sn) && !frag.bitrateTest) this.nextLoadPosition = frag.start + frag.duration;
                     // Allow backtracked fragments to load
                    if (frag.backtracked || fragState === FragmentState.NOT_LOADED || fragState === FragmentState.PARTIAL) {
                        frag.autoLevel = this.hls.autoLevelEnabled;
                        frag.bitrateTest = this.bitrateTest;
                        logger["logger"].log("Loading " + frag.sn + " of [" + levelDetails.startSN + "-" + levelDetails.endSN + "], level " + this.level + ", " + (this.loadedmetadata ? 'currentTime' : 'nextLoadPosition') + ": " + parseFloat(pos.toFixed(3)) + ", bufferEnd: " + parseFloat(bufferEnd.toFixed(3)));
                        this.hls.trigger(events["default"].FRAG_LOADING, {
                            frag: frag
                        }); // lazy demuxer init, as this could take some time ... do it during frag loading
                        if (!this.demuxer) this.demuxer = new demux_demuxer(this.hls, 'main');
                        this.state = State.FRAG_LOADING;
                    } else if (fragState === FragmentState.APPENDING) // Lower the buffer size and try again
                    {
                        if (this._reduceMaxBufferLength(frag.duration)) this.fragmentTracker.removeFragment(frag);
                    }
                };
                _proto.getBufferedFrag = function getBufferedFrag(position) {
                    return this.fragmentTracker.getBufferedFrag(position, PlaylistLevelType.MAIN);
                };
                _proto.followingBufferedFrag = function followingBufferedFrag(frag) {
                    if (frag) // try to get range of next fragment (500ms after this range)
                    return this.getBufferedFrag(frag.endPTS + 0.5);
                    return null;
                };
                _proto._checkFragmentChanged = function _checkFragmentChanged() {
                    var fragPlayingCurrent, currentTime, video = this.media;
                    if (video && video.readyState && video.seeking === false) {
                        currentTime = video.currentTime;
                        /* if video element is in seeked state, currentTime can only increase.
        (assuming that playback rate is positive ...)
        As sometimes currentTime jumps back to zero after a
        media decode error, check this, to avoid seeking back to
        wrong position after a media decode error
      */ if (currentTime > this.lastCurrentTime) this.lastCurrentTime = currentTime;
                        if (BufferHelper.isBuffered(video, currentTime)) fragPlayingCurrent = this.getBufferedFrag(currentTime);
                        else if (BufferHelper.isBuffered(video, currentTime + 0.1)) /* ensure that FRAG_CHANGED event is triggered at startup,
          when first video frame is displayed and playback is paused.
          add a tolerance of 100ms, in case current position is not buffered,
          check if current pos+100ms is buffered and use that buffer range
          for FRAG_CHANGED event reporting */ fragPlayingCurrent = this.getBufferedFrag(currentTime + 0.1);
                        if (fragPlayingCurrent) {
                            var fragPlaying = fragPlayingCurrent;
                            if (fragPlaying !== this.fragPlaying) {
                                this.hls.trigger(events["default"].FRAG_CHANGED, {
                                    frag: fragPlaying
                                });
                                var fragPlayingLevel = fragPlaying.level;
                                if (!this.fragPlaying || this.fragPlaying.level !== fragPlayingLevel) this.hls.trigger(events["default"].LEVEL_SWITCHED, {
                                    level: fragPlayingLevel
                                });
                                this.fragPlaying = fragPlaying;
                            }
                        }
                    }
                };
                _proto.immediateLevelSwitch = function immediateLevelSwitch() {
                    logger["logger"].log('immediateLevelSwitch');
                    if (!this.immediateSwitch) {
                        this.immediateSwitch = true;
                        var media = this.media, previouslyPaused;
                        if (media) {
                            previouslyPaused = media.paused;
                            if (!previouslyPaused) media.pause();
                        } else // don't restart playback after instant level switch in case media not attached
                        previouslyPaused = true;
                        this.previouslyPaused = previouslyPaused;
                    }
                    var fragCurrent = this.fragCurrent;
                    if (fragCurrent && fragCurrent.loader) fragCurrent.loader.abort();
                    this.fragCurrent = null; // flush everything
                    this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                };
                _proto.immediateLevelSwitchEnd = function immediateLevelSwitchEnd() {
                    var media = this.media;
                    if (media && media.buffered.length) {
                        this.immediateSwitch = false;
                        if (media.currentTime > 0 && BufferHelper.isBuffered(media, media.currentTime)) // only nudge if currentTime is buffered
                        media.currentTime -= 0.0001;
                        if (!this.previouslyPaused) media.play();
                    }
                };
                _proto.nextLevelSwitch = function nextLevelSwitch() {
                    var media = this.media; // ensure that media is defined and that metadata are available (to retrieve currentTime)
                    if (media && media.readyState) {
                        var fetchdelay;
                        var fragPlayingCurrent = this.getBufferedFrag(media.currentTime);
                        if (fragPlayingCurrent && fragPlayingCurrent.startPTS > 1) // flush buffer preceding current fragment (flush until current fragment start offset)
                        // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...
                        this.flushMainBuffer(0, fragPlayingCurrent.startPTS - 1);
                        if (!media.paused) {
                            // add a safety delay of 1s
                            var nextLevelId = this.hls.nextLoadLevel, nextLevel = this.levels[nextLevelId], fragLastKbps = this.fragLastKbps;
                            if (fragLastKbps && this.fragCurrent) fetchdelay = this.fragCurrent.duration * nextLevel.bitrate / (1000 * fragLastKbps) + 1;
                            else fetchdelay = 0;
                        } else fetchdelay = 0;
                         // logger.log('fetchdelay:'+fetchdelay);
                        // find buffer range that will be reached once new fragment will be fetched
                        var bufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);
                        if (bufferedFrag) {
                            // we can flush buffer range following this one without stalling playback
                            var nextBufferedFrag = this.followingBufferedFrag(bufferedFrag);
                            if (nextBufferedFrag) {
                                // if we are here, we can also cancel any loading/demuxing in progress, as they are useless
                                var fragCurrent = this.fragCurrent;
                                if (fragCurrent && fragCurrent.loader) fragCurrent.loader.abort();
                                this.fragCurrent = null; // start flush position is the start PTS of next buffered frag.
                                // we use frag.naxStartPTS which is max(audio startPTS, video startPTS).
                                // in case there is a small PTS Delta between audio and video, using maxStartPTS avoids flushing last samples from current fragment
                                var startPts = Math.max(bufferedFrag.endPTS, nextBufferedFrag.maxStartPTS + Math.min(this.config.maxFragLookUpTolerance, nextBufferedFrag.duration));
                                this.flushMainBuffer(startPts, Number.POSITIVE_INFINITY);
                            }
                        }
                    }
                };
                _proto.flushMainBuffer = function flushMainBuffer(startOffset, endOffset) {
                    this.state = State.BUFFER_FLUSHING;
                    var flushScope = {
                        startOffset: startOffset,
                        endOffset: endOffset
                    }; // if alternate audio tracks are used, only flush video, otherwise flush everything
                    if (this.altAudio) flushScope.type = 'video';
                    this.hls.trigger(events["default"].BUFFER_FLUSHING, flushScope);
                };
                _proto.onMediaAttached = function onMediaAttached(data) {
                    var media = this.media = this.mediaBuffer = data.media;
                    this.onvseeking = this.onMediaSeeking.bind(this);
                    this.onvseeked = this.onMediaSeeked.bind(this);
                    this.onvended = this.onMediaEnded.bind(this);
                    media.addEventListener('seeking', this.onvseeking);
                    media.addEventListener('seeked', this.onvseeked);
                    media.addEventListener('ended', this.onvended);
                    var config = this.config;
                    if (this.levels && config.autoStartLoad) this.hls.startLoad(config.startPosition);
                    this.gapController = new gap_controller_GapController(config, media, this.fragmentTracker, this.hls);
                };
                _proto.onMediaDetaching = function onMediaDetaching() {
                    var media = this.media;
                    if (media && media.ended) {
                        logger["logger"].log('MSE detaching and video ended, reset startPosition');
                        this.startPosition = this.lastCurrentTime = 0;
                    } // reset fragment backtracked flag
                    var levels = this.levels;
                    if (levels) levels.forEach(function(level) {
                        if (level.details) level.details.fragments.forEach(function(fragment) {
                            fragment.backtracked = undefined;
                        });
                    });
                     // remove video listeners
                    if (media) {
                        media.removeEventListener('seeking', this.onvseeking);
                        media.removeEventListener('seeked', this.onvseeked);
                        media.removeEventListener('ended', this.onvended);
                        this.onvseeking = this.onvseeked = this.onvended = null;
                    }
                    this.fragmentTracker.removeAllFragments();
                    this.media = this.mediaBuffer = null;
                    this.loadedmetadata = false;
                    this.stopLoad();
                };
                _proto.onMediaSeeked = function onMediaSeeked() {
                    var media = this.media;
                    var currentTime = media ? media.currentTime : undefined;
                    if (Object(number["isFiniteNumber"])(currentTime)) logger["logger"].log("media seeked to " + currentTime.toFixed(3));
                     // tick to speed up FRAGMENT_PLAYING triggering
                    this.tick();
                };
                _proto.onManifestLoading = function onManifestLoading() {
                    // reset buffer on manifest loading
                    logger["logger"].log('trigger BUFFER_RESET');
                    this.hls.trigger(events["default"].BUFFER_RESET);
                    this.fragmentTracker.removeAllFragments();
                    this.stalled = false;
                    this.startPosition = this.lastCurrentTime = 0;
                };
                _proto.onManifestParsed = function onManifestParsed(data) {
                    var aac = false, heaac = false, codec;
                    data.levels.forEach(function(level) {
                        // detect if we have different kind of audio codecs used amongst playlists
                        codec = level.audioCodec;
                        if (codec) {
                            if (codec.indexOf('mp4a.40.2') !== -1) aac = true;
                            if (codec.indexOf('mp4a.40.5') !== -1) heaac = true;
                        }
                    });
                    this.audioCodecSwitch = aac && heaac;
                    if (this.audioCodecSwitch) logger["logger"].log('both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');
                    this.altAudio = data.altAudio;
                    this.levels = data.levels;
                    this.startFragRequested = false;
                    var config = this.config;
                    if (config.autoStartLoad || this.forceStartLoad) this.hls.startLoad(config.startPosition);
                };
                _proto.onLevelLoaded = function onLevelLoaded(data) {
                    var newDetails = data.details;
                    var newLevelId = data.level;
                    var lastLevel = this.levels[this.levelLastLoaded];
                    var curLevel = this.levels[newLevelId];
                    var duration = newDetails.totalduration;
                    var sliding = 0;
                    logger["logger"].log("level " + newLevelId + " loaded [" + newDetails.startSN + "," + newDetails.endSN + "],duration:" + duration);
                    if (newDetails.live || curLevel.details && curLevel.details.live) {
                        var curDetails = curLevel.details;
                        if (curDetails && newDetails.fragments.length > 0) {
                            // we already have details for that level, merge them
                            mergeDetails(curDetails, newDetails);
                            sliding = newDetails.fragments[0].start;
                            this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);
                            if (newDetails.PTSKnown && Object(number["isFiniteNumber"])(sliding)) logger["logger"].log("live playlist sliding:" + sliding.toFixed(3));
                            else {
                                logger["logger"].log('live playlist - outdated PTS, unknown sliding');
                                alignStream(this.fragPrevious, lastLevel, newDetails);
                            }
                        } else {
                            logger["logger"].log('live playlist - first load, unknown sliding');
                            newDetails.PTSKnown = false;
                            alignStream(this.fragPrevious, lastLevel, newDetails);
                        }
                    } else newDetails.PTSKnown = false;
                     // override level info
                    curLevel.details = newDetails;
                    this.levelLastLoaded = newLevelId;
                    this.hls.trigger(events["default"].LEVEL_UPDATED, {
                        details: newDetails,
                        level: newLevelId
                    });
                    if (this.startFragRequested === false) {
                        // compute start position if set to -1. use it straight away if value is defined
                        if (this.startPosition === -1 || this.lastCurrentTime === -1) {
                            // first, check if start time offset has been set in playlist, if yes, use this value
                            var startTimeOffset = newDetails.startTimeOffset;
                            if (Object(number["isFiniteNumber"])(startTimeOffset)) {
                                if (startTimeOffset < 0) {
                                    logger["logger"].log("negative start time offset " + startTimeOffset + ", count from end of last fragment");
                                    startTimeOffset = sliding + duration + startTimeOffset;
                                }
                                logger["logger"].log("start time offset found in playlist, adjust startPosition to " + startTimeOffset);
                                this.startPosition = startTimeOffset;
                            } else // if live playlist, set start position to be fragment N-this.config.liveSyncDurationCount (usually 3)
                            if (newDetails.live) {
                                this.startPosition = this.computeLivePosition(sliding, newDetails);
                                logger["logger"].log("configure startPosition to " + this.startPosition);
                            } else this.startPosition = 0;
                            this.lastCurrentTime = this.startPosition;
                        }
                        this.nextLoadPosition = this.startPosition;
                    } // only switch batck to IDLE state if we were waiting for level to start downloading a new fragment
                    if (this.state === State.WAITING_LEVEL) this.state = State.IDLE;
                     // trigger handler right now
                    this.tick();
                };
                _proto.onKeyLoaded = function onKeyLoaded() {
                    if (this.state === State.KEY_LOADING) {
                        this.state = State.IDLE;
                        this.tick();
                    }
                };
                _proto.onFragLoaded = function onFragLoaded(data) {
                    var fragCurrent = this.fragCurrent, hls = this.hls, levels = this.levels, media = this.media;
                    var fragLoaded = data.frag;
                    if (this.state === State.FRAG_LOADING && fragCurrent && fragLoaded.type === 'main' && fragLoaded.level === fragCurrent.level && fragLoaded.sn === fragCurrent.sn) {
                        var stats = data.stats;
                        var currentLevel = levels[fragCurrent.level];
                        var details = currentLevel.details; // reset frag bitrate test in any case after frag loaded event
                        // if this frag was loaded to perform a bitrate test AND if hls.nextLoadLevel is greater than 0
                        // then this means that we should be able to load a fragment at a higher quality level
                        this.bitrateTest = false;
                        this.stats = stats;
                        logger["logger"].log("Loaded " + fragCurrent.sn + " of [" + details.startSN + " ," + details.endSN + "],level " + fragCurrent.level);
                        if (fragLoaded.bitrateTest && hls.nextLoadLevel) {
                            // switch back to IDLE state ... we just loaded a fragment to determine adequate start bitrate and initialize autoswitch algo
                            this.state = State.IDLE;
                            this.startFragRequested = false;
                            stats.tparsed = stats.tbuffered = window.performance.now();
                            hls.trigger(events["default"].FRAG_BUFFERED, {
                                stats: stats,
                                frag: fragCurrent,
                                id: 'main'
                            });
                            this.tick();
                        } else if (fragLoaded.sn === 'initSegment') {
                            this.state = State.IDLE;
                            stats.tparsed = stats.tbuffered = window.performance.now();
                            details.initSegment.data = data.payload;
                            hls.trigger(events["default"].FRAG_BUFFERED, {
                                stats: stats,
                                frag: fragCurrent,
                                id: 'main'
                            });
                            this.tick();
                        } else {
                            logger["logger"].log("Parsing " + fragCurrent.sn + " of [" + details.startSN + " ," + details.endSN + "],level " + fragCurrent.level + ", cc " + fragCurrent.cc);
                            this.state = State.PARSING;
                            this.pendingBuffering = true;
                            this.appended = false; // Bitrate test frags are not usually buffered so the fragment tracker ignores them. If Hls.js decides to buffer
                            // it (and therefore ends up at this line), then the fragment tracker needs to be manually informed.
                            if (fragLoaded.bitrateTest) {
                                fragLoaded.bitrateTest = false;
                                this.fragmentTracker.onFragLoaded({
                                    frag: fragLoaded
                                });
                            } // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live) and if media is not seeking (this is to overcome potential timestamp drifts between playlists and fragments)
                            var accurateTimeOffset = !(media && media.seeking) && (details.PTSKnown || !details.live);
                            var initSegmentData = details.initSegment ? details.initSegment.data : [];
                            var audioCodec = this._getAudioCodec(currentLevel); // transmux the MPEG-TS data to ISO-BMFF segments
                            var demuxer = this.demuxer = this.demuxer || new demux_demuxer(this.hls, 'main');
                            demuxer.push(data.payload, initSegmentData, audioCodec, currentLevel.videoCodec, fragCurrent, details.totalduration, accurateTimeOffset);
                        }
                    }
                    this.fragLoadError = 0;
                };
                _proto.onFragParsingInitSegment = function onFragParsingInitSegment(data) {
                    var fragCurrent = this.fragCurrent;
                    var fragNew = data.frag;
                    if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
                        var tracks = data.tracks, trackName, track;
                        this.audioOnly = tracks.audio && !tracks.video; // if audio track is expected to come from audio stream controller, discard any coming from main
                        if (this.altAudio && !this.audioOnly) delete tracks.audio;
                         // include levelCodec in audio and video tracks
                        track = tracks.audio;
                        if (track) {
                            var audioCodec = this.levels[this.level].audioCodec, ua = navigator.userAgent.toLowerCase();
                            if (audioCodec && this.audioCodecSwap) {
                                logger["logger"].log('swapping playlist audio codec');
                                if (audioCodec.indexOf('mp4a.40.5') !== -1) audioCodec = 'mp4a.40.2';
                                else audioCodec = 'mp4a.40.5';
                            } // in case AAC and HE-AAC audio codecs are signalled in manifest
                            // force HE-AAC , as it seems that most browsers prefers that way,
                            // except for mono streams OR on FF
                            // these conditions might need to be reviewed ...
                            if (this.audioCodecSwitch) // don't force HE-AAC if mono stream
                            {
                                if (track.metadata.channelCount !== 1 && ua.indexOf('firefox') === -1) audioCodec = 'mp4a.40.5';
                            } // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise
                            if (ua.indexOf('android') !== -1 && track.container !== 'audio/mpeg') {
                                // Exclude mpeg audio
                                audioCodec = 'mp4a.40.2';
                                logger["logger"].log("Android: force audio codec to " + audioCodec);
                            }
                            track.levelCodec = audioCodec;
                            track.id = data.id;
                        }
                        track = tracks.video;
                        if (track) {
                            track.levelCodec = this.levels[this.level].videoCodec;
                            track.id = data.id;
                        }
                        this.hls.trigger(events["default"].BUFFER_CODECS, tracks); // loop through tracks that are going to be provided to bufferController
                        for(trackName in tracks){
                            track = tracks[trackName];
                            logger["logger"].log("main track:" + trackName + ",container:" + track.container + ",codecs[level/parsed]=[" + track.levelCodec + "/" + track.codec + "]");
                            var initSegment = track.initSegment;
                            if (initSegment) {
                                this.appended = true; // arm pending Buffering flag before appending a segment
                                this.pendingBuffering = true;
                                this.hls.trigger(events["default"].BUFFER_APPENDING, {
                                    type: trackName,
                                    data: initSegment,
                                    parent: 'main',
                                    content: 'initSegment'
                                });
                            }
                        } // trigger handler right now
                        this.tick();
                    }
                };
                _proto.onFragParsingData = function onFragParsingData(data) {
                    var _this2 = this;
                    var fragCurrent = this.fragCurrent;
                    var fragNew = data.frag;
                    if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && !(data.type === 'audio' && this.altAudio) && this.state === State.PARSING) {
                        var level = this.levels[this.level], frag = fragCurrent;
                        if (!Object(number["isFiniteNumber"])(data.endPTS)) {
                            data.endPTS = data.startPTS + fragCurrent.duration;
                            data.endDTS = data.startDTS + fragCurrent.duration;
                        }
                        if (data.hasAudio === true) frag.addElementaryStream(ElementaryStreamTypes.AUDIO);
                        if (data.hasVideo === true) frag.addElementaryStream(ElementaryStreamTypes.VIDEO);
                        logger["logger"].log("Parsed " + data.type + ",PTS:[" + data.startPTS.toFixed(3) + "," + data.endPTS.toFixed(3) + "],DTS:[" + data.startDTS.toFixed(3) + "/" + data.endDTS.toFixed(3) + "],nb:" + data.nb + ",dropped:" + (data.dropped || 0)); // Detect gaps in a fragment  and try to fix it by finding a keyframe in the previous fragment (see _findFragments)
                        if (data.type === 'video') {
                            frag.dropped = data.dropped;
                            if (frag.dropped) {
                                if (!frag.backtracked) {
                                    var levelDetails = level.details;
                                    if (levelDetails && frag.sn === levelDetails.startSN) logger["logger"].warn('missing video frame(s) on first frag, appending with gap', frag.sn);
                                    else {
                                        logger["logger"].warn('missing video frame(s), backtracking fragment', frag.sn); // Return back to the IDLE state without appending to buffer
                                        // Causes findFragments to backtrack a segment and find the keyframe
                                        // Audio fragments arriving before video sets the nextLoadPosition, causing _findFragments to skip the backtracked fragment
                                        this.fragmentTracker.removeFragment(frag);
                                        frag.backtracked = true;
                                        this.nextLoadPosition = data.startPTS;
                                        this.state = State.IDLE;
                                        this.fragPrevious = frag;
                                        if (this.demuxer) {
                                            this.demuxer.destroy();
                                            this.demuxer = null;
                                        }
                                        this.tick();
                                        return;
                                    }
                                } else logger["logger"].warn('Already backtracked on this fragment, appending with the gap', frag.sn);
                            } else // Only reset the backtracked flag if we've loaded the frag without any dropped frames
                            frag.backtracked = false;
                        }
                        var drift = updateFragPTSDTS(level.details, frag, data.startPTS, data.endPTS, data.startDTS, data.endDTS), hls = this.hls;
                        hls.trigger(events["default"].LEVEL_PTS_UPDATED, {
                            details: level.details,
                            level: this.level,
                            drift: drift,
                            type: data.type,
                            start: data.startPTS,
                            end: data.endPTS
                        }); // has remuxer dropped video frames located before first keyframe ?
                        [
                            data.data1,
                            data.data2
                        ].forEach(function(buffer) {
                            // only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)
                            // in that case it is useless to append following segments
                            if (buffer && buffer.length && _this2.state === State.PARSING) {
                                _this2.appended = true; // arm pending Buffering flag before appending a segment
                                _this2.pendingBuffering = true;
                                hls.trigger(events["default"].BUFFER_APPENDING, {
                                    type: data.type,
                                    data: buffer,
                                    parent: 'main',
                                    content: 'data'
                                });
                            }
                        }); // trigger handler right now
                        this.tick();
                    }
                };
                _proto.onFragParsed = function onFragParsed(data) {
                    var fragCurrent = this.fragCurrent;
                    var fragNew = data.frag;
                    if (fragCurrent && data.id === 'main' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
                        this.stats.tparsed = window.performance.now();
                        this.state = State.PARSED;
                        this._checkAppendedParsed();
                    }
                };
                _proto.onAudioTrackSwitching = function onAudioTrackSwitching(data) {
                    // if any URL found on new audio track, it is an alternate audio track
                    var fromAltAudio = this.altAudio;
                    var altAudio = !!data.url;
                    var trackId = data.id; // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered
                    // don't do anything if we switch to alt audio: audio stream controller is handling it.
                    // we will just have to change buffer scheduling on audioTrackSwitched
                    if (!altAudio) {
                        if (this.mediaBuffer !== this.media) {
                            logger["logger"].log('switching on main audio, use media.buffered to schedule main fragment loading');
                            this.mediaBuffer = this.media;
                            var fragCurrent = this.fragCurrent; // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch
                            if (fragCurrent.loader) {
                                logger["logger"].log('switching to main audio track, cancel main fragment load');
                                fragCurrent.loader.abort();
                            }
                            this.fragCurrent = null;
                            this.fragPrevious = null; // destroy demuxer to force init segment generation (following audio switch)
                            if (this.demuxer) {
                                this.demuxer.destroy();
                                this.demuxer = null;
                            } // switch to IDLE state to load new fragment
                            this.state = State.IDLE;
                        }
                        var hls = this.hls; // If switching from alt to main audio, flush all audio and trigger track switched
                        if (fromAltAudio) hls.trigger(events["default"].BUFFER_FLUSHING, {
                            startOffset: 0,
                            endOffset: Number.POSITIVE_INFINITY,
                            type: 'audio'
                        });
                        hls.trigger(events["default"].AUDIO_TRACK_SWITCHED, {
                            id: trackId
                        });
                    }
                };
                _proto.onAudioTrackSwitched = function onAudioTrackSwitched(data) {
                    var trackId = data.id, altAudio = !!this.hls.audioTracks[trackId].url;
                    if (altAudio) {
                        var videoBuffer = this.videoBuffer; // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered
                        if (videoBuffer && this.mediaBuffer !== videoBuffer) {
                            logger["logger"].log('switching on alternate audio, use video.buffered to schedule main fragment loading');
                            this.mediaBuffer = videoBuffer;
                        }
                    }
                    this.altAudio = altAudio;
                    this.tick();
                };
                _proto.onBufferCreated = function onBufferCreated(data) {
                    var tracks = data.tracks, mediaTrack, name, alternate = false;
                    for(var type in tracks){
                        var track = tracks[type];
                        if (track.id === 'main') {
                            name = type;
                            mediaTrack = track; // keep video source buffer reference
                            if (type === 'video') this.videoBuffer = tracks[type].buffer;
                        } else alternate = true;
                    }
                    if (alternate && mediaTrack) {
                        logger["logger"].log("alternate track found, use " + name + ".buffered to schedule main fragment loading");
                        this.mediaBuffer = mediaTrack.buffer;
                    } else this.mediaBuffer = this.media;
                };
                _proto.onBufferAppended = function onBufferAppended(data) {
                    if (data.parent === 'main') {
                        var state = this.state;
                        if (state === State.PARSING || state === State.PARSED) {
                            // check if all buffers have been appended
                            this.pendingBuffering = data.pending > 0;
                            this._checkAppendedParsed();
                        }
                    }
                };
                _proto._checkAppendedParsed = function _checkAppendedParsed() {
                    // trigger handler right now
                    if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {
                        var frag = this.fragCurrent;
                        if (frag) {
                            var media = this.mediaBuffer ? this.mediaBuffer : this.media;
                            logger["logger"].log("main buffered : " + time_ranges.toString(media.buffered));
                            this.fragPrevious = frag;
                            var stats = this.stats;
                            stats.tbuffered = window.performance.now(); // we should get rid of this.fragLastKbps
                            this.fragLastKbps = Math.round(8 * stats.total / (stats.tbuffered - stats.tfirst));
                            this.hls.trigger(events["default"].FRAG_BUFFERED, {
                                stats: stats,
                                frag: frag,
                                id: 'main'
                            });
                            this.state = State.IDLE;
                        } // Do not tick when _seekToStartPos needs to be called as seeking to the start can fail on live streams at this point
                        if (this.loadedmetadata || this.startPosition <= 0) this.tick();
                    }
                };
                _proto.onError = function onError(data) {
                    var frag = data.frag || this.fragCurrent; // don't handle frag error not related to main fragment
                    if (frag && frag.type !== 'main') return;
                     // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end
                    var mediaBuffered = !!this.media && BufferHelper.isBuffered(this.media, this.media.currentTime) && BufferHelper.isBuffered(this.media, this.media.currentTime + 0.5);
                    switch(data.details){
                        case errors["ErrorDetails"].FRAG_LOAD_ERROR:
                        case errors["ErrorDetails"].FRAG_LOAD_TIMEOUT:
                        case errors["ErrorDetails"].KEY_LOAD_ERROR:
                        case errors["ErrorDetails"].KEY_LOAD_TIMEOUT:
                            if (!data.fatal) {
                                // keep retrying until the limit will be reached
                                if (this.fragLoadError + 1 <= this.config.fragLoadingMaxRetry) {
                                    // exponential backoff capped to config.fragLoadingMaxRetryTimeout
                                    var delay = Math.min(Math.pow(2, this.fragLoadError) * this.config.fragLoadingRetryDelay, this.config.fragLoadingMaxRetryTimeout);
                                    logger["logger"].warn("mediaController: frag loading failed, retry in " + delay + " ms");
                                    this.retryDate = window.performance.now() + delay; // retry loading state
                                    // if loadedmetadata is not set, it means that we are emergency switch down on first frag
                                    // in that case, reset startFragRequested flag
                                    if (!this.loadedmetadata) {
                                        this.startFragRequested = false;
                                        this.nextLoadPosition = this.startPosition;
                                    }
                                    this.fragLoadError++;
                                    this.state = State.FRAG_LOADING_WAITING_RETRY;
                                } else {
                                    logger["logger"].error("mediaController: " + data.details + " reaches max retry, redispatch as fatal ..."); // switch error to fatal
                                    data.fatal = true;
                                    this.state = State.ERROR;
                                }
                            }
                            break;
                        case errors["ErrorDetails"].LEVEL_LOAD_ERROR:
                        case errors["ErrorDetails"].LEVEL_LOAD_TIMEOUT:
                            if (this.state !== State.ERROR) {
                                if (data.fatal) {
                                    // if fatal error, stop processing
                                    this.state = State.ERROR;
                                    logger["logger"].warn("streamController: " + data.details + ",switch to " + this.state + " state ...");
                                } else // in case of non fatal error while loading level, if level controller is not retrying to load level , switch back to IDLE
                                if (!data.levelRetry && this.state === State.WAITING_LEVEL) this.state = State.IDLE;
                            }
                            break;
                        case errors["ErrorDetails"].BUFFER_FULL_ERROR:
                            // if in appending state
                            if (data.parent === 'main' && (this.state === State.PARSING || this.state === State.PARSED)) {
                                // reduce max buf len if current position is buffered
                                if (mediaBuffered) {
                                    this._reduceMaxBufferLength(this.config.maxBufferLength);
                                    this.state = State.IDLE;
                                } else {
                                    // current position is not buffered, but browser is still complaining about buffer full error
                                    // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
                                    // in that case flush the whole buffer to recover
                                    logger["logger"].warn('buffer full error also media.currentTime is not buffered, flush everything');
                                    this.fragCurrent = null; // flush everything
                                    this.flushMainBuffer(0, Number.POSITIVE_INFINITY);
                                }
                            }
                            break;
                        default:
                            break;
                    }
                };
                _proto._reduceMaxBufferLength = function _reduceMaxBufferLength(minLength) {
                    var config = this.config;
                    if (config.maxMaxBufferLength >= minLength) {
                        // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
                        config.maxMaxBufferLength /= 2;
                        logger["logger"].warn("main:reduce max buffer length to " + config.maxMaxBufferLength + "s");
                        return true;
                    }
                    return false;
                };
                _proto._checkBuffer = function _checkBuffer() {
                    var media = this.media;
                    if (!media || media.readyState === 0) // Exit early if we don't have media or if the media hasn't bufferd anything yet (readyState 0)
                    return;
                    var mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media;
                    var buffered = mediaBuffer.buffered;
                    if (!this.loadedmetadata && buffered.length) {
                        this.loadedmetadata = true;
                        this._seekToStartPos();
                    } else if (this.immediateSwitch) this.immediateLevelSwitchEnd();
                    else this.gapController.poll(this.lastCurrentTime, buffered);
                };
                _proto.onFragLoadEmergencyAborted = function onFragLoadEmergencyAborted() {
                    this.state = State.IDLE; // if loadedmetadata is not set, it means that we are emergency switch down on first frag
                    // in that case, reset startFragRequested flag
                    if (!this.loadedmetadata) {
                        this.startFragRequested = false;
                        this.nextLoadPosition = this.startPosition;
                    }
                    this.tick();
                };
                _proto.onBufferFlushed = function onBufferFlushed() {
                    /* after successful buffer flushing, filter flushed fragments from bufferedFrags
      use mediaBuffered instead of media (so that we will check against video.buffered ranges in case of alt audio track)
    */ var media = this.mediaBuffer ? this.mediaBuffer : this.media;
                    if (media) {
                        // filter fragments potentially evicted from buffer. this is to avoid memleak on live streams
                        var elementaryStreamType = this.audioOnly ? ElementaryStreamTypes.AUDIO : ElementaryStreamTypes.VIDEO;
                        this.fragmentTracker.detectEvictedFragments(elementaryStreamType, media.buffered);
                    } // move to IDLE once flush complete. this should trigger new fragment loading
                    this.state = State.IDLE; // reset reference to frag
                    this.fragPrevious = null;
                };
                _proto.onLevelsUpdated = function onLevelsUpdated(data) {
                    this.levels = data.levels;
                };
                _proto.swapAudioCodec = function swapAudioCodec() {
                    this.audioCodecSwap = !this.audioCodecSwap;
                };
                _proto._seekToStartPos = function _seekToStartPos() {
                    var media = this.media;
                    var currentTime = media.currentTime;
                    var startPosition = this.startPosition; // only adjust currentTime if different from startPosition or if startPosition not buffered
                    // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered
                    if (currentTime !== startPosition && startPosition >= 0) {
                        if (media.seeking) {
                            logger["logger"].log("could not seek to " + startPosition + ", already seeking at " + currentTime);
                            return;
                        }
                        var bufferStart = media.buffered.length ? media.buffered.start(0) : 0;
                        var delta = bufferStart - startPosition;
                        if (delta > 0 && delta < this.config.maxBufferHole) {
                            logger["logger"].log("adjusting start position by " + delta + " to match buffer start");
                            startPosition += delta;
                            this.startPosition = startPosition;
                        }
                        logger["logger"].log("seek to target start position " + startPosition + " from current time " + currentTime + ". ready state " + media.readyState);
                        media.currentTime = startPosition;
                    }
                };
                _proto._getAudioCodec = function _getAudioCodec(currentLevel) {
                    var audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;
                    if (this.audioCodecSwap) {
                        logger["logger"].log('swapping playlist audio codec');
                        if (audioCodec) {
                            if (audioCodec.indexOf('mp4a.40.5') !== -1) audioCodec = 'mp4a.40.2';
                            else audioCodec = 'mp4a.40.5';
                        }
                    }
                    return audioCodec;
                };
                stream_controller_createClass(StreamController, [
                    {
                        key: "state",
                        set: function set(nextState) {
                            if (this.state !== nextState) {
                                var previousState = this.state;
                                this._state = nextState;
                                logger["logger"].log("main stream-controller: " + previousState + "->" + nextState);
                                this.hls.trigger(events["default"].STREAM_STATE_TRANSITION, {
                                    previousState: previousState,
                                    nextState: nextState
                                });
                            }
                        },
                        get: function get() {
                            return this._state;
                        }
                    },
                    {
                        key: "currentLevel",
                        get: function get() {
                            var media = this.media;
                            if (media) {
                                var frag = this.getBufferedFrag(media.currentTime);
                                if (frag) return frag.level;
                            }
                            return -1;
                        }
                    },
                    {
                        key: "nextBufferedFrag",
                        get: function get() {
                            var media = this.media;
                            if (media) // first get end range of current fragment
                            return this.followingBufferedFrag(this.getBufferedFrag(media.currentTime));
                            else return null;
                        }
                    },
                    {
                        key: "nextLevel",
                        get: function get() {
                            var frag = this.nextBufferedFrag;
                            if (frag) return frag.level;
                            else return -1;
                        }
                    },
                    {
                        key: "liveSyncPosition",
                        get: function get() {
                            return this._liveSyncPosition;
                        },
                        set: function set(value) {
                            this._liveSyncPosition = value;
                        }
                    }
                ]);
                return StreamController;
            }(base_stream_controller_BaseStreamController);
            /* harmony default export */ var stream_controller = stream_controller_StreamController;
            // CONCATENATED MODULE: ./src/controller/level-controller.js
            function level_controller_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function level_controller_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) level_controller_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) level_controller_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            function level_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /*
 * Level Controller
*/ var chromeOrFirefox;
            var level_controller_LevelController = /*#__PURE__*/ function(_EventHandler) {
                level_controller_inheritsLoose(LevelController, _EventHandler);
                function LevelController(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].MANIFEST_LOADED, events["default"].LEVEL_LOADED, events["default"].AUDIO_TRACK_SWITCHED, events["default"].FRAG_LOADED, events["default"].ERROR) || this;
                    _this.canload = false;
                    _this.currentLevelIndex = null;
                    _this.manualLevelIndex = -1;
                    _this.timer = null;
                    chromeOrFirefox = /chrome|firefox/.test(navigator.userAgent.toLowerCase());
                    return _this;
                }
                var _proto = LevelController.prototype;
                _proto.onHandlerDestroying = function onHandlerDestroying() {
                    this.clearTimer();
                    this.manualLevelIndex = -1;
                };
                _proto.clearTimer = function clearTimer() {
                    if (this.timer !== null) {
                        clearTimeout(this.timer);
                        this.timer = null;
                    }
                };
                _proto.startLoad = function startLoad() {
                    var levels = this._levels;
                    this.canload = true;
                    this.levelRetryCount = 0; // clean up live level details to force reload them, and reset load errors
                    if (levels) levels.forEach(function(level) {
                        level.loadError = 0;
                        var levelDetails = level.details;
                        if (levelDetails && levelDetails.live) level.details = undefined;
                    });
                     // speed up live playlist refresh if timer exists
                    if (this.timer !== null) this.loadLevel();
                };
                _proto.stopLoad = function stopLoad() {
                    this.canload = false;
                };
                _proto.onManifestLoaded = function onManifestLoaded(data) {
                    var levels = [];
                    var audioTracks = [];
                    var bitrateStart;
                    var levelSet = {
                    };
                    var levelFromSet = null;
                    var videoCodecFound = false;
                    var audioCodecFound = false; // regroup redundant levels together
                    data.levels.forEach(function(level) {
                        var attributes = level.attrs;
                        level.loadError = 0;
                        level.fragmentError = false;
                        videoCodecFound = videoCodecFound || !!level.videoCodec;
                        audioCodecFound = audioCodecFound || !!level.audioCodec; // erase audio codec info if browser does not support mp4a.40.34.
                        // demuxer will autodetect codec and fallback to mpeg/audio
                        if (chromeOrFirefox && level.audioCodec && level.audioCodec.indexOf('mp4a.40.34') !== -1) level.audioCodec = undefined;
                        levelFromSet = levelSet[level.bitrate]; // FIXME: we would also have to match the resolution here
                        if (!levelFromSet) {
                            level.url = [
                                level.url
                            ];
                            level.urlId = 0;
                            levelSet[level.bitrate] = level;
                            levels.push(level);
                        } else levelFromSet.url.push(level.url);
                        if (attributes) {
                            if (attributes.AUDIO) addGroupId(levelFromSet || level, 'audio', attributes.AUDIO);
                            if (attributes.SUBTITLES) addGroupId(levelFromSet || level, 'text', attributes.SUBTITLES);
                        }
                    }); // remove audio-only level if we also have levels with audio+video codecs signalled
                    if (videoCodecFound && audioCodecFound) levels = levels.filter(function(_ref) {
                        var videoCodec = _ref.videoCodec;
                        return !!videoCodec;
                    });
                     // only keep levels with supported audio/video codecs
                    levels = levels.filter(function(_ref2) {
                        var audioCodec = _ref2.audioCodec, videoCodec = _ref2.videoCodec;
                        return (!audioCodec || isCodecSupportedInMp4(audioCodec, 'audio')) && (!videoCodec || isCodecSupportedInMp4(videoCodec, 'video'));
                    });
                    if (data.audioTracks) {
                        audioTracks = data.audioTracks.filter(function(track) {
                            return !track.audioCodec || isCodecSupportedInMp4(track.audioCodec, 'audio');
                        }); // Reassign id's after filtering since they're used as array indices
                        audioTracks.forEach(function(track, index) {
                            track.id = index;
                        });
                    }
                    if (levels.length > 0) {
                        // start bitrate is the first bitrate of the manifest
                        bitrateStart = levels[0].bitrate; // sort level on bitrate
                        levels.sort(function(a, b) {
                            return a.bitrate - b.bitrate;
                        });
                        this._levels = levels; // find index of first level in sorted levels
                        for(var i = 0; i < levels.length; i++)if (levels[i].bitrate === bitrateStart) {
                            this._firstLevel = i;
                            logger["logger"].log("manifest loaded," + levels.length + " level(s) found, first bitrate:" + bitrateStart);
                            break;
                        }
                         // Audio is only alternate if manifest include a URI along with the audio group tag,
                        // and this is not an audio-only stream where levels contain audio-only
                        var audioOnly = audioCodecFound && !videoCodecFound;
                        this.hls.trigger(events["default"].MANIFEST_PARSED, {
                            levels: levels,
                            audioTracks: audioTracks,
                            firstLevel: this._firstLevel,
                            stats: data.stats,
                            audio: audioCodecFound,
                            video: videoCodecFound,
                            altAudio: !audioOnly && audioTracks.some(function(t) {
                                return !!t.url;
                            })
                        });
                    } else this.hls.trigger(events["default"].ERROR, {
                        type: errors["ErrorTypes"].MEDIA_ERROR,
                        details: errors["ErrorDetails"].MANIFEST_INCOMPATIBLE_CODECS_ERROR,
                        fatal: true,
                        url: this.hls.url,
                        reason: 'no level with compatible codecs found in manifest'
                    });
                };
                _proto.setLevelInternal = function setLevelInternal(newLevel) {
                    var levels = this._levels;
                    var hls = this.hls; // check if level idx is valid
                    if (newLevel >= 0 && newLevel < levels.length) {
                        // stopping live reloading timer if any
                        this.clearTimer();
                        if (this.currentLevelIndex !== newLevel) {
                            logger["logger"].log("switching to level " + newLevel);
                            this.currentLevelIndex = newLevel;
                            var levelProperties = levels[newLevel];
                            levelProperties.level = newLevel;
                            hls.trigger(events["default"].LEVEL_SWITCHING, levelProperties);
                        }
                        var level = levels[newLevel];
                        var levelDetails = level.details; // check if we need to load playlist for this level
                        if (!levelDetails || levelDetails.live) {
                            // level not retrieved yet, or live playlist we need to (re)load it
                            var urlId = level.urlId;
                            hls.trigger(events["default"].LEVEL_LOADING, {
                                url: level.url[urlId],
                                level: newLevel,
                                id: urlId
                            });
                        }
                    } else // invalid level id given, trigger error
                    hls.trigger(events["default"].ERROR, {
                        type: errors["ErrorTypes"].OTHER_ERROR,
                        details: errors["ErrorDetails"].LEVEL_SWITCH_ERROR,
                        level: newLevel,
                        fatal: false,
                        reason: 'invalid level idx'
                    });
                };
                _proto.onError = function onError(data) {
                    if (data.fatal) {
                        if (data.type === errors["ErrorTypes"].NETWORK_ERROR) this.clearTimer();
                        return;
                    }
                    var levelError = false, fragmentError = false;
                    var levelIndex; // try to recover not fatal errors
                    switch(data.details){
                        case errors["ErrorDetails"].FRAG_LOAD_ERROR:
                        case errors["ErrorDetails"].FRAG_LOAD_TIMEOUT:
                        case errors["ErrorDetails"].KEY_LOAD_ERROR:
                        case errors["ErrorDetails"].KEY_LOAD_TIMEOUT:
                            levelIndex = data.frag.level;
                            fragmentError = true;
                            break;
                        case errors["ErrorDetails"].LEVEL_LOAD_ERROR:
                        case errors["ErrorDetails"].LEVEL_LOAD_TIMEOUT:
                            levelIndex = data.context.level;
                            levelError = true;
                            break;
                        case errors["ErrorDetails"].REMUX_ALLOC_ERROR:
                            levelIndex = data.level;
                            levelError = true;
                            break;
                    }
                    if (levelIndex !== undefined) this.recoverLevel(data, levelIndex, levelError, fragmentError);
                };
                _proto.recoverLevel = function recoverLevel(errorEvent, levelIndex, levelError, fragmentError) {
                    var _this2 = this;
                    var config = this.hls.config;
                    var errorDetails = errorEvent.details;
                    var level = this._levels[levelIndex];
                    var redundantLevels, delay, nextLevel;
                    level.loadError++;
                    level.fragmentError = fragmentError;
                    if (levelError) {
                        if (this.levelRetryCount + 1 <= config.levelLoadingMaxRetry) {
                            // exponential backoff capped to max retry timeout
                            delay = Math.min(Math.pow(2, this.levelRetryCount) * config.levelLoadingRetryDelay, config.levelLoadingMaxRetryTimeout); // Schedule level reload
                            this.timer = setTimeout(function() {
                                return _this2.loadLevel();
                            }, delay); // boolean used to inform stream controller not to switch back to IDLE on non fatal error
                            errorEvent.levelRetry = true;
                            this.levelRetryCount++;
                            logger["logger"].warn("level controller, " + errorDetails + ", retry in " + delay + " ms, current retry count is " + this.levelRetryCount);
                        } else {
                            logger["logger"].error("level controller, cannot recover from " + errorDetails + " error");
                            this.currentLevelIndex = null; // stopping live reloading timer if any
                            this.clearTimer(); // switch error to fatal
                            errorEvent.fatal = true;
                            return;
                        }
                    } // Try any redundant streams if available for both errors: level and fragment
                    // If level.loadError reaches redundantLevels it means that we tried them all, no hope  => let's switch down
                    if (levelError || fragmentError) {
                        redundantLevels = level.url.length;
                        if (redundantLevels > 1 && level.loadError < redundantLevels) {
                            level.urlId = (level.urlId + 1) % redundantLevels;
                            level.details = undefined;
                            logger["logger"].warn("level controller, " + errorDetails + " for level " + levelIndex + ": switching to redundant URL-id " + level.urlId); // console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);
                        // console.log('New video quality level audio group id:', level.attrs.AUDIO);
                        } else {
                            // Search for available level
                            if (this.manualLevelIndex === -1) {
                                // When lowest level has been reached, let's start hunt from the top
                                nextLevel = levelIndex === 0 ? this._levels.length - 1 : levelIndex - 1;
                                logger["logger"].warn("level controller, " + errorDetails + ": switch to " + nextLevel);
                                this.hls.nextAutoLevel = this.currentLevelIndex = nextLevel;
                            } else if (fragmentError) {
                                // Allow fragment retry as long as configuration allows.
                                // reset this._level so that another call to set level() will trigger again a frag load
                                logger["logger"].warn("level controller, " + errorDetails + ": reload a fragment");
                                this.currentLevelIndex = null;
                            }
                        }
                    }
                } // reset errors on the successful load of a fragment
                ;
                _proto.onFragLoaded = function onFragLoaded(_ref3) {
                    var frag = _ref3.frag;
                    if (frag !== undefined && frag.type === 'main') {
                        var level = this._levels[frag.level];
                        if (level !== undefined) {
                            level.fragmentError = false;
                            level.loadError = 0;
                            this.levelRetryCount = 0;
                        }
                    }
                };
                _proto.onLevelLoaded = function onLevelLoaded(data) {
                    var _this3 = this;
                    var level = data.level, details = data.details; // only process level loaded events matching with expected level
                    if (level !== this.currentLevelIndex) return;
                    var curLevel = this._levels[level]; // reset level load error counter on successful level loaded only if there is no issues with fragments
                    if (!curLevel.fragmentError) {
                        curLevel.loadError = 0;
                        this.levelRetryCount = 0;
                    } // if current playlist is a live playlist, arm a timer to reload it
                    if (details.live) {
                        var reloadInterval = computeReloadInterval(curLevel.details, details, data.stats.trequest);
                        logger["logger"].log("live playlist, reload in " + Math.round(reloadInterval) + " ms");
                        this.timer = setTimeout(function() {
                            return _this3.loadLevel();
                        }, reloadInterval);
                    } else this.clearTimer();
                };
                _proto.onAudioTrackSwitched = function onAudioTrackSwitched(data) {
                    var audioGroupId = this.hls.audioTracks[data.id].groupId;
                    var currentLevel = this.hls.levels[this.currentLevelIndex];
                    if (!currentLevel) return;
                    if (currentLevel.audioGroupIds) {
                        var urlId = -1;
                        for(var i = 0; i < currentLevel.audioGroupIds.length; i++)if (currentLevel.audioGroupIds[i] === audioGroupId) {
                            urlId = i;
                            break;
                        }
                        if (urlId !== currentLevel.urlId) {
                            currentLevel.urlId = urlId;
                            this.startLoad();
                        }
                    }
                };
                _proto.loadLevel = function loadLevel() {
                    logger["logger"].debug('call to loadLevel');
                    if (this.currentLevelIndex !== null && this.canload) {
                        var levelObject = this._levels[this.currentLevelIndex];
                        if (typeof levelObject === 'object' && levelObject.url.length > 0) {
                            var level = this.currentLevelIndex;
                            var id = levelObject.urlId;
                            var url = levelObject.url[id];
                            logger["logger"].log("Attempt loading level index " + level + " with URL-id " + id); // console.log('Current audio track group ID:', this.hls.audioTracks[this.hls.audioTrack].groupId);
                            // console.log('New video quality level audio group id:', levelObject.attrs.AUDIO, level);
                            this.hls.trigger(events["default"].LEVEL_LOADING, {
                                url: url,
                                level: level,
                                id: id
                            });
                        }
                    }
                };
                _proto.removeLevel = function removeLevel(levelIndex, urlId) {
                    var levels = this.levels.filter(function(level, index) {
                        if (index !== levelIndex) return true;
                        if (level.url.length > 1 && urlId !== undefined) {
                            level.url = level.url.filter(function(url, id) {
                                return id !== urlId;
                            });
                            level.urlId = 0;
                            return true;
                        }
                        return false;
                    }).map(function(level, index) {
                        var details = level.details;
                        if (details && details.fragments) details.fragments.forEach(function(fragment) {
                            fragment.level = index;
                        });
                        return level;
                    });
                    this._levels = levels;
                    this.hls.trigger(events["default"].LEVELS_UPDATED, {
                        levels: levels
                    });
                };
                level_controller_createClass(LevelController, [
                    {
                        key: "levels",
                        get: function get() {
                            return this._levels;
                        }
                    },
                    {
                        key: "level",
                        get: function get() {
                            return this.currentLevelIndex;
                        },
                        set: function set(newLevel) {
                            var levels = this._levels;
                            if (levels) {
                                newLevel = Math.min(newLevel, levels.length - 1);
                                if (this.currentLevelIndex !== newLevel || !levels[newLevel].details) this.setLevelInternal(newLevel);
                            }
                        }
                    },
                    {
                        key: "manualLevel",
                        get: function get() {
                            return this.manualLevelIndex;
                        },
                        set: function set(newLevel) {
                            this.manualLevelIndex = newLevel;
                            if (this._startLevel === undefined) this._startLevel = newLevel;
                            if (newLevel !== -1) this.level = newLevel;
                        }
                    },
                    {
                        key: "firstLevel",
                        get: function get() {
                            return this._firstLevel;
                        },
                        set: function set(newLevel) {
                            this._firstLevel = newLevel;
                        }
                    },
                    {
                        key: "startLevel",
                        get: function get() {
                            // hls.startLevel takes precedence over config.startLevel
                            // if none of these values are defined, fallback on this._firstLevel (first quality level appearing in variant manifest)
                            if (this._startLevel === undefined) {
                                var configStartLevel = this.hls.config.startLevel;
                                if (configStartLevel !== undefined) return configStartLevel;
                                else return this._firstLevel;
                            } else return this._startLevel;
                        },
                        set: function set(newLevel) {
                            this._startLevel = newLevel;
                        }
                    },
                    {
                        key: "nextLoadLevel",
                        get: function get() {
                            if (this.manualLevelIndex !== -1) return this.manualLevelIndex;
                            else return this.hls.nextAutoLevel;
                        },
                        set: function set(nextLevel) {
                            this.level = nextLevel;
                            if (this.manualLevelIndex === -1) this.hls.nextAutoLevel = nextLevel;
                        }
                    }
                ]);
                return LevelController;
            }(event_handler);
            // EXTERNAL MODULE: ./src/demux/id3.js
            var id3 = __webpack_require__("./src/demux/id3.js");
            // CONCATENATED MODULE: ./src/utils/texttrack-utils.ts
            function sendAddTrackEvent(track, videoEl) {
                var event;
                try {
                    event = new Event('addtrack');
                } catch (err) {
                    // for IE11
                    event = document.createEvent('Event');
                    event.initEvent('addtrack', false, false);
                }
                event.track = track;
                videoEl.dispatchEvent(event);
            }
            function clearCurrentCues(track) {
                if (track === null || track === void 0 ? void 0 : track.cues) while(track.cues.length > 0)track.removeCue(track.cues[0]);
            }
            /**
 *  Given a list of Cues, finds the closest cue matching the given time.
 *  Modified verison of binary search O(log(n)).
 *
 * @export
 * @param {(TextTrackCueList | TextTrackCue[])} cues - List of cues.
 * @param {number} time - Target time, to find closest cue to.
 * @returns {TextTrackCue}
 */ function getClosestCue(cues, time) {
                // If the offset is less than the first element, the first element is the closest.
                if (time < cues[0].endTime) return cues[0];
                 // If the offset is greater than the last cue, the last is the closest.
                if (time > cues[cues.length - 1].endTime) return cues[cues.length - 1];
                var left = 0;
                var right = cues.length - 1;
                while(left <= right){
                    var mid = Math.floor((right + left) / 2);
                    if (time < cues[mid].endTime) right = mid - 1;
                    else if (time > cues[mid].endTime) left = mid + 1;
                    else // If it's not lower or higher, it must be equal.
                    return cues[mid];
                } // At this point, left and right have swapped.
                // No direct match was found, left or right element must be the closest. Check which one has the smallest diff.
                return cues[left].endTime - time < time - cues[right].endTime ? cues[left] : cues[right];
            }
            // CONCATENATED MODULE: ./src/controller/id3-track-controller.js
            function id3_track_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /*
 * id3 metadata track controller
*/ var MIN_CUE_DURATION = 0.25;
            var id3_track_controller_ID3TrackController = /*#__PURE__*/ function(_EventHandler) {
                id3_track_controller_inheritsLoose(ID3TrackController, _EventHandler);
                function ID3TrackController(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHING, events["default"].FRAG_PARSING_METADATA, events["default"].LIVE_BACK_BUFFER_REACHED) || this;
                    _this.id3Track = undefined;
                    _this.media = undefined;
                    return _this;
                }
                var _proto = ID3TrackController.prototype;
                _proto.destroy = function destroy() {
                    event_handler.prototype.destroy.call(this);
                } // Add ID3 metatadata text track.
                ;
                _proto.onMediaAttached = function onMediaAttached(data) {
                    this.media = data.media;
                    this.media;
                };
                _proto.onMediaDetaching = function onMediaDetaching() {
                    clearCurrentCues(this.id3Track);
                    this.id3Track = undefined;
                    this.media = undefined;
                };
                _proto.getID3Track = function getID3Track(textTracks) {
                    for(var i = 0; i < textTracks.length; i++){
                        var textTrack = textTracks[i];
                        if (textTrack.kind === 'metadata' && textTrack.label === 'id3') {
                            // send 'addtrack' when reusing the textTrack for metadata,
                            // same as what we do for captions
                            sendAddTrackEvent(textTrack, this.media);
                            return textTrack;
                        }
                    }
                    return this.media.addTextTrack('metadata', 'id3');
                };
                _proto.onFragParsingMetadata = function onFragParsingMetadata(data) {
                    var fragment = data.frag;
                    var samples = data.samples; // create track dynamically
                    if (!this.id3Track) {
                        this.id3Track = this.getID3Track(this.media.textTracks);
                        this.id3Track.mode = 'hidden';
                    } // Attempt to recreate Safari functionality by creating
                    // WebKitDataCue objects when available and store the decoded
                    // ID3 data in the value property of the cue
                    var Cue = window.WebKitDataCue || window.VTTCue || window.TextTrackCue;
                    for(var i = 0; i < samples.length; i++){
                        var frames = id3["default"].getID3Frames(samples[i].data);
                        if (frames) {
                            // Ensure the pts is positive - sometimes it's reported as a small negative number
                            var startTime = Math.max(samples[i].pts, 0);
                            var endTime = i < samples.length - 1 ? samples[i + 1].pts : fragment.endPTS;
                            if (!endTime) endTime = fragment.start + fragment.duration;
                            var timeDiff = endTime - startTime;
                            if (timeDiff <= 0) endTime = startTime + MIN_CUE_DURATION;
                            for(var j = 0; j < frames.length; j++){
                                var frame = frames[j]; // Safari doesn't put the timestamp frame in the TextTrack
                                if (!id3["default"].isTimeStampFrame(frame)) {
                                    var cue = new Cue(startTime, endTime, '');
                                    cue.value = frame;
                                    this.id3Track.addCue(cue);
                                }
                            }
                        }
                    }
                };
                _proto.onLiveBackBufferReached = function onLiveBackBufferReached(_ref) {
                    var bufferEnd = _ref.bufferEnd;
                    var id3Track = this.id3Track;
                    if (!id3Track || !id3Track.cues || !id3Track.cues.length) return;
                    var foundCue = getClosestCue(id3Track.cues, bufferEnd);
                    if (!foundCue) return;
                    while(id3Track.cues[0] !== foundCue)id3Track.removeCue(id3Track.cues[0]);
                };
                return ID3TrackController;
            }(event_handler);
            /* harmony default export */ var id3_track_controller = id3_track_controller_ID3TrackController;
            // CONCATENATED MODULE: ./src/is-supported.ts
            function is_supported_isSupported() {
                var mediaSource = getMediaSource();
                if (!mediaSource) return false;
                var sourceBuffer = self.SourceBuffer || self.WebKitSourceBuffer;
                var isTypeSupported = mediaSource && typeof mediaSource.isTypeSupported === 'function' && mediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"'); // if SourceBuffer is exposed ensure its API is valid
                // safari and old version of Chrome doe not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible
                var sourceBufferValidAPI = !sourceBuffer || sourceBuffer.prototype && typeof sourceBuffer.prototype.appendBuffer === 'function' && typeof sourceBuffer.prototype.remove === 'function';
                return !!isTypeSupported && !!sourceBufferValidAPI;
            }
            // CONCATENATED MODULE: ./src/utils/ewma.ts
            /*
 * compute an Exponential Weighted moving average
 * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
 *  - heavily inspired from shaka-player
 */ var EWMA = /*#__PURE__*/ function() {
                //  About half of the estimated value will be from the last |halfLife| samples by weight.
                function EWMA1(halfLife) {
                    this.alpha_ = void 0;
                    this.estimate_ = void 0;
                    this.totalWeight_ = void 0;
                    // Larger values of alpha expire historical data more slowly.
                    this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;
                    this.estimate_ = 0;
                    this.totalWeight_ = 0;
                }
                var _proto = EWMA1.prototype;
                _proto.sample = function sample(weight, value) {
                    var adjAlpha = Math.pow(this.alpha_, weight);
                    this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;
                    this.totalWeight_ += weight;
                };
                _proto.getTotalWeight = function getTotalWeight() {
                    return this.totalWeight_;
                };
                _proto.getEstimate = function getEstimate() {
                    if (this.alpha_) {
                        var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);
                        return this.estimate_ / zeroFactor;
                    } else return this.estimate_;
                };
                return EWMA1;
            }();
            /* harmony default export */ var ewma = EWMA;
            // CONCATENATED MODULE: ./src/utils/ewma-bandwidth-estimator.ts
            /*
 * EWMA Bandwidth Estimator
 *  - heavily inspired from shaka-player
 * Tracks bandwidth samples and estimates available bandwidth.
 * Based on the minimum of two exponentially-weighted moving averages with
 * different half-lives.
 */ var ewma_bandwidth_estimator_EwmaBandWidthEstimator = /*#__PURE__*/ function() {
                // TODO(typescript-hls)
                function EwmaBandWidthEstimator(hls, slow, fast, defaultEstimate) {
                    this.hls = void 0;
                    this.defaultEstimate_ = void 0;
                    this.minWeight_ = void 0;
                    this.minDelayMs_ = void 0;
                    this.slow_ = void 0;
                    this.fast_ = void 0;
                    this.hls = hls;
                    this.defaultEstimate_ = defaultEstimate;
                    this.minWeight_ = 0.001;
                    this.minDelayMs_ = 50;
                    this.slow_ = new ewma(slow);
                    this.fast_ = new ewma(fast);
                }
                var _proto = EwmaBandWidthEstimator.prototype;
                _proto.sample = function sample(durationMs, numBytes) {
                    durationMs = Math.max(durationMs, this.minDelayMs_);
                    var numBits = 8 * numBytes, // weight is duration in seconds
                    durationS = durationMs / 1000, // value is bandwidth in bits/s
                    bandwidthInBps = numBits / durationS;
                    this.fast_.sample(durationS, bandwidthInBps);
                    this.slow_.sample(durationS, bandwidthInBps);
                };
                _proto.canEstimate = function canEstimate() {
                    var fast = this.fast_;
                    return fast && fast.getTotalWeight() >= this.minWeight_;
                };
                _proto.getEstimate = function getEstimate() {
                    if (this.canEstimate()) // console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));
                    // console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));
                    // Take the minimum of these two estimates.  This should have the effect of
                    // adapting down quickly, but up more slowly.
                    return Math.min(this.fast_.getEstimate(), this.slow_.getEstimate());
                    else return this.defaultEstimate_;
                };
                _proto.destroy = function destroy() {
                };
                return EwmaBandWidthEstimator;
            }();
            /* harmony default export */ var ewma_bandwidth_estimator = ewma_bandwidth_estimator_EwmaBandWidthEstimator;
            // CONCATENATED MODULE: ./src/controller/abr-controller.js
            function abr_controller_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function abr_controller_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) abr_controller_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) abr_controller_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            function abr_controller_assertThisInitialized(self) {
                if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return self;
            }
            function abr_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /*
 * simple ABR Controller
 *  - compute next level based on last fragment bw heuristics
 *  - implement an abandon rules triggered if we have less than 2 frag buffered and if computed bw shows that we risk buffer stalling
 */ var abr_controller_window = window, abr_controller_performance = abr_controller_window.performance;
            var abr_controller_AbrController = /*#__PURE__*/ function(_EventHandler) {
                abr_controller_inheritsLoose(AbrController, _EventHandler);
                function AbrController(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].FRAG_LOADING, events["default"].FRAG_LOADED, events["default"].FRAG_BUFFERED, events["default"].ERROR) || this;
                    _this.lastLoadedFragLevel = 0;
                    _this._nextAutoLevel = -1;
                    _this.hls = hls;
                    _this.timer = null;
                    _this._bwEstimator = null;
                    _this.onCheck = _this._abandonRulesCheck.bind(abr_controller_assertThisInitialized(_this));
                    return _this;
                }
                var _proto = AbrController.prototype;
                _proto.destroy = function destroy() {
                    this.clearTimer();
                    event_handler.prototype.destroy.call(this);
                };
                _proto.onFragLoading = function onFragLoading(data) {
                    var frag = data.frag;
                    if (frag.type === 'main') {
                        if (!this.timer) {
                            this.fragCurrent = frag;
                            this.timer = setInterval(this.onCheck, 100);
                        } // lazy init of BwEstimator, rationale is that we use different params for Live/VoD
                        // so we need to wait for stream manifest / playlist type to instantiate it.
                        if (!this._bwEstimator) {
                            var hls = this.hls;
                            var config = hls.config;
                            var level = frag.level;
                            var isLive = hls.levels[level].details.live;
                            var ewmaFast;
                            var ewmaSlow;
                            if (isLive) {
                                ewmaFast = config.abrEwmaFastLive;
                                ewmaSlow = config.abrEwmaSlowLive;
                            } else {
                                ewmaFast = config.abrEwmaFastVoD;
                                ewmaSlow = config.abrEwmaSlowVoD;
                            }
                            this._bwEstimator = new ewma_bandwidth_estimator(hls, ewmaSlow, ewmaFast, config.abrEwmaDefaultEstimate);
                        }
                    }
                };
                _proto._abandonRulesCheck = function _abandonRulesCheck() {
                    /*
      monitor fragment retrieval time...
      we compute expected time of arrival of the complete fragment.
      we compare it to expected time of buffer starvation
    */ var hls = this.hls;
                    var video = hls.media;
                    var frag = this.fragCurrent;
                    if (!frag) return;
                    var loader = frag.loader; // if loader has been destroyed or loading has been aborted, stop timer and return
                    if (!loader || loader.stats && loader.stats.aborted) {
                        logger["logger"].warn('frag loader destroy or aborted, disarm abandonRules');
                        this.clearTimer(); // reset forced auto level value so that next level will be selected
                        this._nextAutoLevel = -1;
                        return;
                    }
                    var stats = loader.stats;
                    /* only monitor frag retrieval time if
    (video not paused OR first fragment being loaded(ready state === HAVE_NOTHING = 0)) AND autoswitching enabled AND not lowest level (=> means that we have several levels) */ if (video && stats && (!video.paused && video.playbackRate !== 0 || !video.readyState) && frag.autoLevel && frag.level) {
                        var requestDelay = abr_controller_performance.now() - stats.trequest;
                        var playbackRate = Math.abs(video.playbackRate); // monitor fragment load progress after half of expected fragment duration,to stabilize bitrate
                        if (requestDelay > 500 * frag.duration / playbackRate) {
                            var levels = hls.levels;
                            var loadRate = Math.max(1, stats.bw ? stats.bw / 8 : stats.loaded * 1000 / requestDelay); // byte/s; at least 1 byte/s to avoid division by zero
                            // compute expected fragment length using frag duration and level bitrate. also ensure that expected len is gte than already loaded size
                            var level = levels[frag.level];
                            if (!level) return;
                            var levelBitrate = level.realBitrate ? Math.max(level.realBitrate, level.bitrate) : level.bitrate;
                            var expectedLen = stats.total ? stats.total : Math.max(stats.loaded, Math.round(frag.duration * levelBitrate / 8));
                            var pos = video.currentTime;
                            var fragLoadedDelay = (expectedLen - stats.loaded) / loadRate;
                            var bufferStarvationDelay = (BufferHelper.bufferInfo(video, pos, hls.config.maxBufferHole).end - pos) / playbackRate; // consider emergency switch down only if we have less than 2 frag buffered AND
                            // time to finish loading current fragment is bigger than buffer starvation delay
                            // ie if we risk buffer starvation if bw does not increase quickly
                            if (bufferStarvationDelay < 2 * frag.duration / playbackRate && fragLoadedDelay > bufferStarvationDelay) {
                                var minAutoLevel = hls.minAutoLevel;
                                var fragLevelNextLoadedDelay;
                                var nextLoadLevel; // lets iterate through lower level and try to find the biggest one that could avoid rebuffering
                                // we start from current level - 1 and we step down , until we find a matching level
                                for(nextLoadLevel = frag.level - 1; nextLoadLevel > minAutoLevel; nextLoadLevel--){
                                    // compute time to load next fragment at lower level
                                    // 0.8 : consider only 80% of current bw to be conservative
                                    // 8 = bits per byte (bps/Bps)
                                    var levelNextBitrate = levels[nextLoadLevel].realBitrate ? Math.max(levels[nextLoadLevel].realBitrate, levels[nextLoadLevel].bitrate) : levels[nextLoadLevel].bitrate;
                                    var _fragLevelNextLoadedDelay = frag.duration * levelNextBitrate / (6.4 * loadRate);
                                    if (_fragLevelNextLoadedDelay < bufferStarvationDelay) break;
                                } // only emergency switch down if it takes less time to load new fragment at lowest level instead
                                // of finishing loading current one ...
                                if (fragLevelNextLoadedDelay < fragLoadedDelay) {
                                    logger["logger"].warn("loading too slow, abort fragment loading and switch to level " + nextLoadLevel + ":fragLoadedDelay[" + nextLoadLevel + "]<fragLoadedDelay[" + (frag.level - 1) + "];bufferStarvationDelay:" + fragLevelNextLoadedDelay.toFixed(1) + "<" + fragLoadedDelay.toFixed(1) + ":" + bufferStarvationDelay.toFixed(1)); // force next load level in auto mode
                                    hls.nextLoadLevel = nextLoadLevel; // update bw estimate for this fragment before cancelling load (this will help reducing the bw)
                                    this._bwEstimator.sample(requestDelay, stats.loaded); // abort fragment loading
                                    loader.abort(); // stop abandon rules timer
                                    this.clearTimer();
                                    hls.trigger(events["default"].FRAG_LOAD_EMERGENCY_ABORTED, {
                                        frag: frag,
                                        stats: stats
                                    });
                                }
                            }
                        }
                    }
                };
                _proto.onFragLoaded = function onFragLoaded(data) {
                    var frag = data.frag;
                    if (frag.type === 'main' && Object(number["isFiniteNumber"])(frag.sn)) {
                        // stop monitoring bw once frag loaded
                        this.clearTimer(); // store level id after successful fragment load
                        this.lastLoadedFragLevel = frag.level; // reset forced auto level value so that next level will be selected
                        this._nextAutoLevel = -1; // compute level average bitrate
                        if (this.hls.config.abrMaxWithRealBitrate) {
                            var level = this.hls.levels[frag.level];
                            var loadedBytes = (level.loaded ? level.loaded.bytes : 0) + data.stats.loaded;
                            var loadedDuration = (level.loaded ? level.loaded.duration : 0) + data.frag.duration;
                            level.loaded = {
                                bytes: loadedBytes,
                                duration: loadedDuration
                            };
                            level.realBitrate = Math.round(8 * loadedBytes / loadedDuration);
                        } // if fragment has been loaded to perform a bitrate test,
                        if (data.frag.bitrateTest) {
                            var stats = data.stats;
                            stats.tparsed = stats.tbuffered = stats.tload;
                            this.onFragBuffered(data);
                        }
                    }
                };
                _proto.onFragBuffered = function onFragBuffered(data) {
                    var stats = data.stats;
                    var frag = data.frag; // only update stats on first frag buffering
                    // if same frag is loaded multiple times, it might be in browser cache, and loaded quickly
                    // and leading to wrong bw estimation
                    // on bitrate test, also only update stats once (if tload = tbuffered == on FRAG_LOADED)
                    if (stats.aborted !== true && frag.type === 'main' && Object(number["isFiniteNumber"])(frag.sn) && (!frag.bitrateTest || stats.tload === stats.tbuffered)) {
                        // use tparsed-trequest instead of tbuffered-trequest to compute fragLoadingProcessing; rationale is that  buffer appending only happens once media is attached
                        // in case we use config.startFragPrefetch while media is not attached yet, fragment might be parsed while media not attached yet, but it will only be buffered on media attached
                        // as a consequence it could happen really late in the process. meaning that appending duration might appears huge ... leading to underestimated throughput estimation
                        var fragLoadingProcessingMs = stats.tparsed - stats.trequest;
                        logger["logger"].log("latency/loading/parsing/append/kbps:" + Math.round(stats.tfirst - stats.trequest) + "/" + Math.round(stats.tload - stats.tfirst) + "/" + Math.round(stats.tparsed - stats.tload) + "/" + Math.round(stats.tbuffered - stats.tparsed) + "/" + Math.round(8 * stats.loaded / (stats.tbuffered - stats.trequest)));
                        this._bwEstimator.sample(fragLoadingProcessingMs, stats.loaded);
                        stats.bwEstimate = this._bwEstimator.getEstimate(); // if fragment has been loaded to perform a bitrate test, (hls.startLevel = -1), store bitrate test delay duration
                        if (frag.bitrateTest) this.bitrateTestDelay = fragLoadingProcessingMs / 1000;
                        else this.bitrateTestDelay = 0;
                    }
                };
                _proto.onError = function onError(data) {
                    // stop timer in case of frag loading error
                    switch(data.details){
                        case errors["ErrorDetails"].FRAG_LOAD_ERROR:
                        case errors["ErrorDetails"].FRAG_LOAD_TIMEOUT:
                            this.clearTimer();
                            break;
                        default:
                            break;
                    }
                };
                _proto.clearTimer = function clearTimer() {
                    clearInterval(this.timer);
                    this.timer = null;
                } // return next auto level
                ;
                _proto._findBestLevel = function _findBestLevel(currentLevel, currentFragDuration, currentBw, minAutoLevel, maxAutoLevel, maxFetchDuration, bwFactor, bwUpFactor, levels) {
                    for(var i = maxAutoLevel; i >= minAutoLevel; i--){
                        var levelInfo = levels[i];
                        if (!levelInfo) continue;
                        var levelDetails = levelInfo.details;
                        var avgDuration = levelDetails ? levelDetails.totalduration / levelDetails.fragments.length : currentFragDuration;
                        var live = levelDetails ? levelDetails.live : false;
                        var adjustedbw = void 0; // follow algorithm captured from stagefright :
                        // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp
                        // Pick the highest bandwidth stream below or equal to estimated bandwidth.
                        // consider only 80% of the available bandwidth, but if we are switching up,
                        // be even more conservative (70%) to avoid overestimating and immediately
                        // switching back.
                        if (i <= currentLevel) adjustedbw = bwFactor * currentBw;
                        else adjustedbw = bwUpFactor * currentBw;
                        var bitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate;
                        var fetchDuration = bitrate * avgDuration / adjustedbw;
                        logger["logger"].trace("level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: " + i + "/" + Math.round(adjustedbw) + "/" + bitrate + "/" + avgDuration + "/" + maxFetchDuration + "/" + fetchDuration); // if adjusted bw is greater than level bitrate AND
                        if (adjustedbw > bitrate && // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...
                        // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that _findBestLevel will return -1
                        (!fetchDuration || live && !this.bitrateTestDelay || fetchDuration < maxFetchDuration)) // as we are looping from highest to lowest, this will return the best achievable quality level
                        return i;
                    } // not enough time budget even with quality level 0 ... rebuffering might happen
                    return -1;
                };
                abr_controller_createClass(AbrController, [
                    {
                        key: "nextAutoLevel",
                        get: function get() {
                            var forcedAutoLevel = this._nextAutoLevel;
                            var bwEstimator = this._bwEstimator; // in case next auto level has been forced, and bw not available or not reliable, return forced value
                            if (forcedAutoLevel !== -1 && (!bwEstimator || !bwEstimator.canEstimate())) return forcedAutoLevel;
                             // compute next level using ABR logic
                            var nextABRAutoLevel = this._nextABRAutoLevel; // if forced auto level has been defined, use it to cap ABR computed quality level
                            if (forcedAutoLevel !== -1) nextABRAutoLevel = Math.min(forcedAutoLevel, nextABRAutoLevel);
                            return nextABRAutoLevel;
                        },
                        set: function set(nextLevel) {
                            this._nextAutoLevel = nextLevel;
                        }
                    },
                    {
                        key: "_nextABRAutoLevel",
                        get: function get() {
                            var hls = this.hls;
                            var maxAutoLevel = hls.maxAutoLevel, levels = hls.levels, config = hls.config, minAutoLevel = hls.minAutoLevel;
                            var video = hls.media;
                            var currentLevel = this.lastLoadedFragLevel;
                            var currentFragDuration = this.fragCurrent ? this.fragCurrent.duration : 0;
                            var pos = video ? video.currentTime : 0; // playbackRate is the absolute value of the playback rate; if video.playbackRate is 0, we use 1 to load as
                            // if we're playing back at the normal rate.
                            var playbackRate = video && video.playbackRate !== 0 ? Math.abs(video.playbackRate) : 1;
                            var avgbw = this._bwEstimator ? this._bwEstimator.getEstimate() : config.abrEwmaDefaultEstimate; // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.
                            var bufferStarvationDelay = (BufferHelper.bufferInfo(video, pos, config.maxBufferHole).end - pos) / playbackRate; // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all
                            var bestLevel = this._findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay, config.abrBandWidthFactor, config.abrBandWidthUpFactor, levels);
                            if (bestLevel >= 0) return bestLevel;
                            else {
                                logger["logger"].trace('rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering'); // not possible to get rid of rebuffering ... let's try to find level that will guarantee less than maxStarvationDelay of rebuffering
                                // if no matching level found, logic will return 0
                                var maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxStarvationDelay) : config.maxStarvationDelay;
                                var bwFactor = config.abrBandWidthFactor;
                                var bwUpFactor = config.abrBandWidthUpFactor;
                                if (bufferStarvationDelay === 0) {
                                    // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test
                                    var bitrateTestDelay = this.bitrateTestDelay;
                                    if (bitrateTestDelay) {
                                        // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value
                                        // max video loading delay used in  automatic start level selection :
                                        // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +
                                        // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )
                                        // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration
                                        var maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration, config.maxLoadingDelay) : config.maxLoadingDelay;
                                        maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;
                                        logger["logger"].trace("bitrate test took " + Math.round(1000 * bitrateTestDelay) + "ms, set first fragment max fetchDuration to " + Math.round(1000 * maxStarvationDelay) + " ms"); // don't use conservative factor on bitrate test
                                        bwFactor = bwUpFactor = 1;
                                    }
                                }
                                bestLevel = this._findBestLevel(currentLevel, currentFragDuration, avgbw, minAutoLevel, maxAutoLevel, bufferStarvationDelay + maxStarvationDelay, bwFactor, bwUpFactor, levels);
                                return Math.max(bestLevel, 0);
                            }
                        }
                    }
                ]);
                return AbrController;
            }(event_handler);
            /* harmony default export */ var abr_controller = abr_controller_AbrController;
            // CONCATENATED MODULE: ./src/controller/buffer-controller.ts
            function buffer_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /*
 * Buffer Controller
 */ var buffer_controller_MediaSource = getMediaSource();
            var buffer_controller_BufferController = /*#__PURE__*/ function(_EventHandler) {
                buffer_controller_inheritsLoose(BufferController, _EventHandler);
                // the value that we have set mediasource.duration to
                // (the actual duration may be tweaked slighly by the browser)
                // the value that we want to set mediaSource.duration to
                // the target duration of the current media playlist
                // current stream state: true - for live broadcast, false - for VoD content
                // cache the self generated object url to detect hijack of video tag
                // signals that the sourceBuffers need to be flushed
                // signals that mediaSource should have endOfStream called
                // this is optional because this property is removed from the class sometimes
                // The number of BUFFER_CODEC events received before any sourceBuffers are created
                // The total number of BUFFER_CODEC events received
                // A reference to the attached media element
                // A reference to the active media source
                // List of pending segments to be appended to source buffer
                // A guard to see if we are currently appending to the source buffer
                // counters
                function BufferController(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHING, events["default"].MEDIA_DETACHING, events["default"].MANIFEST_PARSED, events["default"].BUFFER_RESET, events["default"].BUFFER_APPENDING, events["default"].BUFFER_CODECS, events["default"].BUFFER_EOS, events["default"].BUFFER_FLUSHING, events["default"].LEVEL_PTS_UPDATED, events["default"].LEVEL_UPDATED) || this;
                    _this._msDuration = null;
                    _this._levelDuration = null;
                    _this._levelTargetDuration = 10;
                    _this._live = null;
                    _this._objectUrl = null;
                    _this._needsFlush = false;
                    _this._needsEos = false;
                    _this.config = void 0;
                    _this.audioTimestampOffset = void 0;
                    _this.bufferCodecEventsExpected = 0;
                    _this._bufferCodecEventsTotal = 0;
                    _this.media = null;
                    _this.mediaSource = null;
                    _this.segments = [];
                    _this.parent = void 0;
                    _this.appending = false;
                    _this.appended = 0;
                    _this.appendError = 0;
                    _this.flushBufferCounter = 0;
                    _this.tracks = {
                    };
                    _this.pendingTracks = {
                    };
                    _this.sourceBuffer = {
                    };
                    _this.flushRange = [];
                    _this._onMediaSourceOpen = function() {
                        logger["logger"].log('media source opened');
                        _this.hls.trigger(events["default"].MEDIA_ATTACHED, {
                            media: _this.media
                        });
                        var mediaSource = _this.mediaSource;
                        if (mediaSource) // once received, don't listen anymore to sourceopen event
                        mediaSource.removeEventListener('sourceopen', _this._onMediaSourceOpen);
                        _this.checkPendingTracks();
                    };
                    _this._onMediaSourceClose = function() {
                        logger["logger"].log('media source closed');
                    };
                    _this._onMediaSourceEnded = function() {
                        logger["logger"].log('media source ended');
                    };
                    _this._onSBUpdateEnd = function() {
                        // update timestampOffset
                        if (_this.audioTimestampOffset && _this.sourceBuffer.audio) {
                            var audioBuffer = _this.sourceBuffer.audio;
                            logger["logger"].warn("change mpeg audio timestamp offset from " + audioBuffer.timestampOffset + " to " + _this.audioTimestampOffset);
                            audioBuffer.timestampOffset = _this.audioTimestampOffset;
                            delete _this.audioTimestampOffset;
                        }
                        if (_this._needsFlush) _this.doFlush();
                        if (_this._needsEos) _this.checkEos();
                        _this.appending = false;
                        var parent = _this.parent; // count nb of pending segments waiting for appending on this sourcebuffer
                        var pending = _this.segments.reduce(function(counter, segment) {
                            return segment.parent === parent ? counter + 1 : counter;
                        }, 0); // this.sourceBuffer is better to use than media.buffered as it is closer to the PTS data from the fragments
                        var timeRanges = {
                        };
                        var sbSet = _this.sourceBuffer;
                        for(var streamType in sbSet){
                            var sb = sbSet[streamType];
                            if (!sb) throw Error("handling source buffer update end error: source buffer for " + streamType + " uninitilized and unable to update buffered TimeRanges.");
                            timeRanges[streamType] = sb.buffered;
                        }
                        _this.hls.trigger(events["default"].BUFFER_APPENDED, {
                            parent: parent,
                            pending: pending,
                            timeRanges: timeRanges
                        }); // don't append in flushing mode
                        if (!_this._needsFlush) _this.doAppending();
                        _this.updateMediaElementDuration(); // appending goes first
                        if (pending === 0) _this.flushLiveBackBuffer();
                    };
                    _this._onSBUpdateError = function(event) {
                        logger["logger"].error('sourceBuffer error:', event); // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error
                        // this error might not always be fatal (it is fatal if decode error is set, in that case
                        // it will be followed by a mediaElement error ...)
                        _this.hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].MEDIA_ERROR,
                            details: errors["ErrorDetails"].BUFFER_APPENDING_ERROR,
                            fatal: false
                        }); // we don't need to do more than that, as accordin to the spec, updateend will be fired just after
                    };
                    _this.config = hls.config;
                    return _this;
                }
                var _proto = BufferController.prototype;
                _proto.destroy = function destroy() {
                    event_handler.prototype.destroy.call(this);
                };
                _proto.onLevelPtsUpdated = function onLevelPtsUpdated(data) {
                    var type = data.type;
                    var audioTrack = this.tracks.audio; // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)
                    // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`
                    // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos). At the time of change we issue
                    // `SourceBuffer.abort()` and adjusting `SourceBuffer.timestampOffset` if `SourceBuffer.updating` is false or awaiting `updateend`
                    // event if SB is in updating state.
                    // More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486
                    if (type === 'audio' && audioTrack && audioTrack.container === 'audio/mpeg') {
                        // Chrome audio mp3 track
                        var audioBuffer = this.sourceBuffer.audio;
                        if (!audioBuffer) throw Error('Level PTS Updated and source buffer for audio uninitalized');
                        var delta = Math.abs(audioBuffer.timestampOffset - data.start); // adjust timestamp offset if time delta is greater than 100ms
                        if (delta > 0.1) {
                            var updating = audioBuffer.updating;
                            try {
                                audioBuffer.abort();
                            } catch (err) {
                                logger["logger"].warn('can not abort audio buffer: ' + err);
                            }
                            if (!updating) {
                                logger["logger"].warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + data.start);
                                audioBuffer.timestampOffset = data.start;
                            } else this.audioTimestampOffset = data.start;
                        }
                    }
                };
                _proto.onManifestParsed = function onManifestParsed(data) {
                    // in case of alt audio (where all tracks have urls) 2 BUFFER_CODECS events will be triggered, one per stream controller
                    // sourcebuffers will be created all at once when the expected nb of tracks will be reached
                    // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller
                    // it will contain the expected nb of source buffers, no need to compute it
                    var codecEvents = 2;
                    if (data.audio && !data.video || !data.altAudio) codecEvents = 1;
                    this.bufferCodecEventsExpected = this._bufferCodecEventsTotal = codecEvents;
                    logger["logger"].log(this.bufferCodecEventsExpected + " bufferCodec event(s) expected");
                };
                _proto.onMediaAttaching = function onMediaAttaching(data) {
                    var media = this.media = data.media;
                    if (media && buffer_controller_MediaSource) {
                        // setup the media source
                        var ms = this.mediaSource = new buffer_controller_MediaSource(); // Media Source listeners
                        ms.addEventListener('sourceopen', this._onMediaSourceOpen);
                        ms.addEventListener('sourceended', this._onMediaSourceEnded);
                        ms.addEventListener('sourceclose', this._onMediaSourceClose); // link video and media Source
                        media.src = window.URL.createObjectURL(ms); // cache the locally generated object url
                        this._objectUrl = media.src;
                    }
                };
                _proto.onMediaDetaching = function onMediaDetaching() {
                    logger["logger"].log('media source detaching');
                    var ms = this.mediaSource;
                    if (ms) {
                        if (ms.readyState === 'open') try {
                            // endOfStream could trigger exception if any sourcebuffer is in updating state
                            // we don't really care about checking sourcebuffer state here,
                            // as we are anyway detaching the MediaSource
                            // let's just avoid this exception to propagate
                            ms.endOfStream();
                        } catch (err) {
                            logger["logger"].warn("onMediaDetaching:" + err.message + " while calling endOfStream");
                        }
                        ms.removeEventListener('sourceopen', this._onMediaSourceOpen);
                        ms.removeEventListener('sourceended', this._onMediaSourceEnded);
                        ms.removeEventListener('sourceclose', this._onMediaSourceClose); // Detach properly the MediaSource from the HTMLMediaElement as
                        // suggested in https://github.com/w3c/media-source/issues/53.
                        if (this.media) {
                            if (this._objectUrl) window.URL.revokeObjectURL(this._objectUrl);
                             // clean up video tag src only if it's our own url. some external libraries might
                            // hijack the video tag and change its 'src' without destroying the Hls instance first
                            if (this.media.src === this._objectUrl) {
                                this.media.removeAttribute('src');
                                this.media.load();
                            } else logger["logger"].warn('media.src was changed by a third party - skip cleanup');
                        }
                        this.mediaSource = null;
                        this.media = null;
                        this._objectUrl = null;
                        this.bufferCodecEventsExpected = this._bufferCodecEventsTotal;
                        this.pendingTracks = {
                        };
                        this.tracks = {
                        };
                        this.sourceBuffer = {
                        };
                        this.flushRange = [];
                        this.segments = [];
                        this.appended = 0;
                    }
                    this.hls.trigger(events["default"].MEDIA_DETACHED);
                };
                _proto.checkPendingTracks = function checkPendingTracks() {
                    var bufferCodecEventsExpected = this.bufferCodecEventsExpected, pendingTracks = this.pendingTracks; // Check if we've received all of the expected bufferCodec events. When none remain, create all the sourceBuffers at once.
                    // This is important because the MSE spec allows implementations to throw QuotaExceededErrors if creating new sourceBuffers after
                    // data has been appended to existing ones.
                    // 2 tracks is the max (one for audio, one for video). If we've reach this max go ahead and create the buffers.
                    var pendingTracksCount = Object.keys(pendingTracks).length;
                    if (pendingTracksCount && !bufferCodecEventsExpected || pendingTracksCount === 2) {
                        // ok, let's create them now !
                        this.createSourceBuffers(pendingTracks);
                        this.pendingTracks = {
                        }; // append any pending segments now !
                        this.doAppending();
                    }
                };
                _proto.onBufferReset = function onBufferReset() {
                    var sourceBuffer = this.sourceBuffer;
                    for(var type in sourceBuffer){
                        var sb = sourceBuffer[type];
                        try {
                            if (sb) {
                                if (this.mediaSource) this.mediaSource.removeSourceBuffer(sb);
                                sb.removeEventListener('updateend', this._onSBUpdateEnd);
                                sb.removeEventListener('error', this._onSBUpdateError);
                            }
                        } catch (err) {
                        }
                    }
                    this.sourceBuffer = {
                    };
                    this.flushRange = [];
                    this.segments = [];
                    this.appended = 0;
                };
                _proto.onBufferCodecs = function onBufferCodecs(tracks) {
                    var _this2 = this;
                    // if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks
                    // if sourcebuffers already created, do nothing ...
                    if (Object.keys(this.sourceBuffer).length) return;
                    Object.keys(tracks).forEach(function(trackName) {
                        _this2.pendingTracks[trackName] = tracks[trackName];
                    });
                    this.bufferCodecEventsExpected = Math.max(this.bufferCodecEventsExpected - 1, 0);
                    if (this.mediaSource && this.mediaSource.readyState === 'open') this.checkPendingTracks();
                };
                _proto.createSourceBuffers = function createSourceBuffers(tracks) {
                    var sourceBuffer = this.sourceBuffer, mediaSource = this.mediaSource;
                    if (!mediaSource) throw Error('createSourceBuffers called when mediaSource was null');
                    for(var trackName in tracks)if (!sourceBuffer[trackName]) {
                        var track = tracks[trackName];
                        if (!track) throw Error("source buffer exists for track " + trackName + ", however track does not");
                         // use levelCodec as first priority
                        var codec = track.levelCodec || track.codec;
                        var mimeType = track.container + ";codecs=" + codec;
                        logger["logger"].log("creating sourceBuffer(" + mimeType + ")");
                        try {
                            var sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);
                            sb.addEventListener('updateend', this._onSBUpdateEnd);
                            sb.addEventListener('error', this._onSBUpdateError);
                            this.tracks[trackName] = {
                                buffer: sb,
                                codec: codec,
                                id: track.id,
                                container: track.container,
                                levelCodec: track.levelCodec
                            };
                        } catch (err) {
                            logger["logger"].error("error while trying to add sourceBuffer:" + err.message);
                            this.hls.trigger(events["default"].ERROR, {
                                type: errors["ErrorTypes"].MEDIA_ERROR,
                                details: errors["ErrorDetails"].BUFFER_ADD_CODEC_ERROR,
                                fatal: false,
                                err: err,
                                mimeType: mimeType
                            });
                        }
                    }
                    this.hls.trigger(events["default"].BUFFER_CREATED, {
                        tracks: this.tracks
                    });
                };
                _proto.onBufferAppending = function onBufferAppending(data) {
                    if (!this._needsFlush) {
                        if (!this.segments) this.segments = [
                            data
                        ];
                        else this.segments.push(data);
                        this.doAppending();
                    }
                } // on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()
                ;
                _proto.onBufferEos = function onBufferEos(data) {
                    for(var type in this.sourceBuffer)if (!data.type || data.type === type) {
                        var sb = this.sourceBuffer[type];
                        if (sb && !sb.ended) {
                            sb.ended = true;
                            logger["logger"].log(type + " sourceBuffer now EOS");
                        }
                    }
                    this.checkEos();
                } // if all source buffers are marked as ended, signal endOfStream() to MediaSource.
                ;
                _proto.checkEos = function checkEos() {
                    var sourceBuffer = this.sourceBuffer, mediaSource = this.mediaSource;
                    if (!mediaSource || mediaSource.readyState !== 'open') {
                        this._needsEos = false;
                        return;
                    }
                    for(var type in sourceBuffer){
                        var sb = sourceBuffer[type];
                        if (!sb) continue;
                        if (!sb.ended) return;
                        if (sb.updating) {
                            this._needsEos = true;
                            return;
                        }
                    }
                    logger["logger"].log('all media data are available, signal endOfStream() to MediaSource and stop loading fragment'); // Notify the media element that it now has all of the media data
                    try {
                        mediaSource.endOfStream();
                    } catch (e) {
                        logger["logger"].warn('exception while calling mediaSource.endOfStream()');
                    }
                    this._needsEos = false;
                };
                _proto.onBufferFlushing = function onBufferFlushing(data) {
                    if (data.type) this.flushRange.push({
                        start: data.startOffset,
                        end: data.endOffset,
                        type: data.type
                    });
                    else {
                        this.flushRange.push({
                            start: data.startOffset,
                            end: data.endOffset,
                            type: 'video'
                        });
                        this.flushRange.push({
                            start: data.startOffset,
                            end: data.endOffset,
                            type: 'audio'
                        });
                    } // attempt flush immediately
                    this.flushBufferCounter = 0;
                    this.doFlush();
                };
                _proto.flushLiveBackBuffer = function flushLiveBackBuffer() {
                    // clear back buffer for live only
                    if (!this._live) return;
                    var liveBackBufferLength = this.config.liveBackBufferLength;
                    if (!isFinite(liveBackBufferLength) || liveBackBufferLength < 0) return;
                    if (!this.media) {
                        logger["logger"].error('flushLiveBackBuffer called without attaching media');
                        return;
                    }
                    var currentTime = this.media.currentTime;
                    var sourceBuffer = this.sourceBuffer;
                    var bufferTypes = Object.keys(sourceBuffer);
                    var targetBackBufferPosition = currentTime - Math.max(liveBackBufferLength, this._levelTargetDuration);
                    for(var index = bufferTypes.length - 1; index >= 0; index--){
                        var bufferType = bufferTypes[index];
                        var sb = sourceBuffer[bufferType];
                        if (sb) {
                            var buffered = sb.buffered; // when target buffer start exceeds actual buffer start
                            if (buffered.length > 0 && targetBackBufferPosition > buffered.start(0)) // remove buffer up until current time minus minimum back buffer length (removing buffer too close to current
                            // time will lead to playback freezing)
                            // credits for level target duration - https://github.com/videojs/http-streaming/blob/3132933b6aa99ddefab29c10447624efd6fd6e52/src/segment-loader.js#L91
                            {
                                if (this.removeBufferRange(bufferType, sb, 0, targetBackBufferPosition)) this.hls.trigger(events["default"].LIVE_BACK_BUFFER_REACHED, {
                                    bufferEnd: targetBackBufferPosition
                                });
                            }
                        }
                    }
                };
                _proto.onLevelUpdated = function onLevelUpdated(_ref) {
                    var details = _ref.details;
                    if (details.fragments.length > 0) {
                        this._levelDuration = details.totalduration + details.fragments[0].start;
                        this._levelTargetDuration = details.averagetargetduration || details.targetduration || 10;
                        this._live = details.live;
                        this.updateMediaElementDuration();
                    }
                };
                _proto.updateMediaElementDuration = function updateMediaElementDuration() {
                    var config = this.config;
                    var duration;
                    if (this._levelDuration === null || !this.media || !this.mediaSource || !this.sourceBuffer || this.media.readyState === 0 || this.mediaSource.readyState !== 'open') return;
                    for(var type in this.sourceBuffer){
                        var sb = this.sourceBuffer[type];
                        if (sb && sb.updating === true) // can't set duration whilst a buffer is updating
                        return;
                    }
                    duration = this.media.duration; // initialise to the value that the media source is reporting
                    if (this._msDuration === null) this._msDuration = this.mediaSource.duration;
                    if (this._live === true && config.liveDurationInfinity === true) {
                        // Override duration to Infinity
                        logger["logger"].log('Media Source duration is set to Infinity');
                        this._msDuration = this.mediaSource.duration = Infinity;
                    } else if (this._levelDuration > this._msDuration && this._levelDuration > duration || !Object(number["isFiniteNumber"])(duration)) {
                        // levelDuration was the last value we set.
                        // not using mediaSource.duration as the browser may tweak this value
                        // only update Media Source duration if its value increase, this is to avoid
                        // flushing already buffered portion when switching between quality level
                        logger["logger"].log("Updating Media Source duration to " + this._levelDuration.toFixed(3));
                        this._msDuration = this.mediaSource.duration = this._levelDuration;
                    }
                };
                _proto.doFlush = function doFlush() {
                    // loop through all buffer ranges to flush
                    while(this.flushRange.length){
                        var range = this.flushRange[0]; // flushBuffer will abort any buffer append in progress and flush Audio/Video Buffer
                        if (this.flushBuffer(range.start, range.end, range.type)) {
                            // range flushed, remove from flush array
                            this.flushRange.shift();
                            this.flushBufferCounter = 0;
                        } else {
                            this._needsFlush = true; // avoid looping, wait for SB update end to retrigger a flush
                            return;
                        }
                    }
                    if (this.flushRange.length === 0) {
                        // everything flushed
                        this._needsFlush = false; // let's recompute this.appended, which is used to avoid flush looping
                        var appended = 0;
                        var sourceBuffer = this.sourceBuffer;
                        try {
                            for(var type in sourceBuffer){
                                var sb = sourceBuffer[type];
                                if (sb) appended += sb.buffered.length;
                            }
                        } catch (error) {
                            // error could be thrown while accessing buffered, in case sourcebuffer has already been removed from MediaSource
                            // this is harmess at this stage, catch this to avoid reporting an internal exception
                            logger["logger"].error('error while accessing sourceBuffer.buffered');
                        }
                        this.appended = appended;
                        this.hls.trigger(events["default"].BUFFER_FLUSHED);
                    }
                };
                _proto.doAppending = function doAppending() {
                    var config = this.config, hls = this.hls, segments = this.segments, sourceBuffer = this.sourceBuffer;
                    if (!Object.keys(sourceBuffer).length) // early exit if no source buffers have been initialized yet
                    return;
                    if (!this.media || this.media.error) {
                        this.segments = [];
                        logger["logger"].error('trying to append although a media error occured, flush segment and abort');
                        return;
                    }
                    if (this.appending) // logger.log(`sb appending in progress`);
                    return;
                    var segment = segments.shift();
                    if (!segment) // handle undefined shift
                    return;
                    try {
                        var sb = sourceBuffer[segment.type];
                        if (!sb) {
                            // in case we don't have any source buffer matching with this segment type,
                            // it means that Mediasource fails to create sourcebuffer
                            // discard this segment, and trigger update end
                            this._onSBUpdateEnd();
                            return;
                        }
                        if (sb.updating) {
                            // if we are still updating the source buffer from the last segment, place this back at the front of the queue
                            segments.unshift(segment);
                            return;
                        } // reset sourceBuffer ended flag before appending segment
                        sb.ended = false; // logger.log(`appending ${segment.content} ${type} SB, size:${segment.data.length}, ${segment.parent}`);
                        this.parent = segment.parent;
                        sb.appendBuffer(segment.data);
                        this.appendError = 0;
                        this.appended++;
                        this.appending = true;
                    } catch (err) {
                        // in case any error occured while appending, put back segment in segments table
                        logger["logger"].error("error while trying to append buffer:" + err.message);
                        segments.unshift(segment);
                        var event = {
                            type: errors["ErrorTypes"].MEDIA_ERROR,
                            parent: segment.parent,
                            details: '',
                            fatal: false
                        };
                        if (err.code === 22) {
                            // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror
                            // let's stop appending any segments, and report BUFFER_FULL_ERROR error
                            this.segments = [];
                            event.details = errors["ErrorDetails"].BUFFER_FULL_ERROR;
                        } else {
                            this.appendError++;
                            event.details = errors["ErrorDetails"].BUFFER_APPEND_ERROR;
                            /* with UHD content, we could get loop of quota exceeded error until
          browser is able to evict some data from sourcebuffer. retrying help recovering this
        */ if (this.appendError > config.appendErrorMaxRetry) {
                                logger["logger"].log("fail " + config.appendErrorMaxRetry + " times to append segment in sourceBuffer");
                                this.segments = [];
                                event.fatal = true;
                            }
                        }
                        hls.trigger(events["default"].ERROR, event);
                    }
                };
                _proto.flushBuffer = function flushBuffer(startOffset, endOffset, sbType) {
                    var sourceBuffer = this.sourceBuffer; // exit if no sourceBuffers are initialized
                    if (!Object.keys(sourceBuffer).length) return true;
                    var currentTime = 'null';
                    if (this.media) currentTime = this.media.currentTime.toFixed(3);
                    logger["logger"].log("flushBuffer,pos/start/end: " + currentTime + "/" + startOffset + "/" + endOffset); // safeguard to avoid infinite looping : don't try to flush more than the nb of appended segments
                    if (this.flushBufferCounter >= this.appended) {
                        logger["logger"].warn('abort flushing too many retries');
                        return true;
                    }
                    var sb = sourceBuffer[sbType]; // we are going to flush buffer, mark source buffer as 'not ended'
                    if (sb) {
                        sb.ended = false;
                        if (!sb.updating) {
                            if (this.removeBufferRange(sbType, sb, startOffset, endOffset)) {
                                this.flushBufferCounter++;
                                return false;
                            }
                        } else {
                            logger["logger"].warn('cannot flush, sb updating in progress');
                            return false;
                        }
                    }
                    logger["logger"].log('buffer flushed'); // everything flushed !
                    return true;
                };
                _proto.removeBufferRange = function removeBufferRange(type, sb, startOffset, endOffset) {
                    try {
                        for(var i = 0; i < sb.buffered.length; i++){
                            var bufStart = sb.buffered.start(i);
                            var bufEnd = sb.buffered.end(i);
                            var removeStart = Math.max(bufStart, startOffset);
                            var removeEnd = Math.min(bufEnd, endOffset);
                            /* sometimes sourcebuffer.remove() does not flush
          the exact expected time range.
          to avoid rounding issues/infinite loop,
          only flush buffer range of length greater than 500ms.
        */ if (Math.min(removeEnd, bufEnd) - removeStart > 0.5) {
                                var currentTime = 'null';
                                if (this.media) currentTime = this.media.currentTime.toString();
                                logger["logger"].log("sb remove " + type + " [" + removeStart + "," + removeEnd + "], of [" + bufStart + "," + bufEnd + "], pos:" + currentTime);
                                sb.remove(removeStart, removeEnd);
                                return true;
                            }
                        }
                    } catch (error) {
                        logger["logger"].warn('removeBufferRange failed', error);
                    }
                    return false;
                };
                return BufferController;
            }(event_handler);
            /* harmony default export */ var buffer_controller = buffer_controller_BufferController;
            // CONCATENATED MODULE: ./src/controller/cap-level-controller.js
            function cap_level_controller_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function cap_level_controller_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) cap_level_controller_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) cap_level_controller_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            function cap_level_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /*
 * cap stream level to media size dimension controller
*/ var cap_level_controller_CapLevelController = /*#__PURE__*/ function(_EventHandler) {
                cap_level_controller_inheritsLoose(CapLevelController, _EventHandler);
                function CapLevelController(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].FPS_DROP_LEVEL_CAPPING, events["default"].MEDIA_ATTACHING, events["default"].MANIFEST_PARSED, events["default"].LEVELS_UPDATED, events["default"].BUFFER_CODECS, events["default"].MEDIA_DETACHING) || this;
                    _this.autoLevelCapping = Number.POSITIVE_INFINITY;
                    _this.firstLevel = null;
                    _this.levels = [];
                    _this.media = null;
                    _this.restrictedLevels = [];
                    _this.timer = null;
                    _this.clientRect = null;
                    return _this;
                }
                var _proto = CapLevelController.prototype;
                _proto.destroy = function destroy() {
                    if (this.hls.config.capLevelToPlayerSize) {
                        this.media = null;
                        this.clientRect = null;
                        this.stopCapping();
                    }
                };
                _proto.onFpsDropLevelCapping = function onFpsDropLevelCapping(data) {
                    // Don't add a restricted level more than once
                    if (CapLevelController.isLevelAllowed(data.droppedLevel, this.restrictedLevels)) this.restrictedLevels.push(data.droppedLevel);
                };
                _proto.onMediaAttaching = function onMediaAttaching(data) {
                    this.media = data.media instanceof window.HTMLVideoElement ? data.media : null;
                };
                _proto.onManifestParsed = function onManifestParsed(data) {
                    var hls = this.hls;
                    this.restrictedLevels = [];
                    this.levels = data.levels;
                    this.firstLevel = data.firstLevel;
                    if (hls.config.capLevelToPlayerSize && data.video) // Start capping immediately if the manifest has signaled video codecs
                    this.startCapping();
                } // Only activate capping when playing a video stream; otherwise, multi-bitrate audio-only streams will be restricted
                ;
                _proto.onBufferCodecs = function onBufferCodecs(data) {
                    var hls = this.hls;
                    if (hls.config.capLevelToPlayerSize && data.video) // If the manifest did not signal a video codec capping has been deferred until we're certain video is present
                    this.startCapping();
                };
                _proto.onLevelsUpdated = function onLevelsUpdated(data) {
                    this.levels = data.levels;
                };
                _proto.onMediaDetaching = function onMediaDetaching() {
                    this.stopCapping();
                };
                _proto.detectPlayerSize = function detectPlayerSize() {
                    if (this.media) {
                        var levelsLength = this.levels ? this.levels.length : 0;
                        if (levelsLength) {
                            var hls = this.hls;
                            hls.autoLevelCapping = this.getMaxLevel(levelsLength - 1);
                            if (hls.autoLevelCapping > this.autoLevelCapping) // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch
                            // usually happen when the user go to the fullscreen mode.
                            hls.streamController.nextLevelSwitch();
                            this.autoLevelCapping = hls.autoLevelCapping;
                        }
                    }
                };
                _proto.getMaxLevel = function getMaxLevel(capLevelIndex) {
                    var _this2 = this;
                    if (!this.levels) return -1;
                    var validLevels = this.levels.filter(function(level, index) {
                        return CapLevelController.isLevelAllowed(index, _this2.restrictedLevels) && index <= capLevelIndex;
                    });
                    this.clientRect = null;
                    return CapLevelController.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);
                };
                _proto.startCapping = function startCapping() {
                    if (this.timer) // Don't reset capping if started twice; this can happen if the manifest signals a video codec
                    return;
                    this.autoLevelCapping = Number.POSITIVE_INFINITY;
                    this.hls.firstLevel = this.getMaxLevel(this.firstLevel);
                    clearInterval(this.timer);
                    this.timer = setInterval(this.detectPlayerSize.bind(this), 1000);
                    this.detectPlayerSize();
                };
                _proto.stopCapping = function stopCapping() {
                    this.restrictedLevels = [];
                    this.firstLevel = null;
                    this.autoLevelCapping = Number.POSITIVE_INFINITY;
                    if (this.timer) {
                        this.timer = clearInterval(this.timer);
                        this.timer = null;
                    }
                };
                _proto.getDimensions = function getDimensions() {
                    if (this.clientRect) return this.clientRect;
                    var media = this.media;
                    var boundsRect = {
                        width: 0,
                        height: 0
                    };
                    if (media) {
                        var clientRect = media.getBoundingClientRect();
                        boundsRect.width = clientRect.width;
                        boundsRect.height = clientRect.height;
                        if (!boundsRect.width && !boundsRect.height) {
                            // When the media element has no width or height (equivalent to not being in the DOM),
                            // then use its width and height attributes (media.width, media.height)
                            boundsRect.width = clientRect.right - clientRect.left || media.width || 0;
                            boundsRect.height = clientRect.bottom - clientRect.top || media.height || 0;
                        }
                    }
                    this.clientRect = boundsRect;
                    return boundsRect;
                };
                CapLevelController.isLevelAllowed = function isLevelAllowed(level, restrictedLevels) {
                    if (restrictedLevels === void 0) restrictedLevels = [];
                    return restrictedLevels.indexOf(level) === -1;
                };
                CapLevelController.getMaxLevelByMediaSize = function getMaxLevelByMediaSize(levels, width, height) {
                    if (!levels || levels && !levels.length) return -1;
                     // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next
                    // to determine whether we've chosen the greatest bandwidth for the media's dimensions
                    var atGreatestBandiwdth = function atGreatestBandiwdth1(curLevel, nextLevel) {
                        if (!nextLevel) return true;
                        return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;
                    }; // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to
                    // the max level
                    var maxLevelIndex = levels.length - 1;
                    for(var i = 0; i < levels.length; i += 1){
                        var level = levels[i];
                        if ((level.width >= width || level.height >= height) && atGreatestBandiwdth(level, levels[i + 1])) {
                            maxLevelIndex = i;
                            break;
                        }
                    }
                    return maxLevelIndex;
                };
                cap_level_controller_createClass(CapLevelController, [
                    {
                        key: "mediaWidth",
                        get: function get() {
                            return this.getDimensions().width * CapLevelController.contentScaleFactor;
                        }
                    },
                    {
                        key: "mediaHeight",
                        get: function get() {
                            return this.getDimensions().height * CapLevelController.contentScaleFactor;
                        }
                    }
                ], [
                    {
                        key: "contentScaleFactor",
                        get: function get() {
                            var pixelRatio = 1;
                            try {
                                pixelRatio = window.devicePixelRatio;
                            } catch (e) {
                            }
                            return pixelRatio;
                        }
                    }
                ]);
                return CapLevelController;
            }(event_handler);
            /* harmony default export */ var cap_level_controller = cap_level_controller_CapLevelController;
            // CONCATENATED MODULE: ./src/controller/fps-controller.js
            function fps_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /*
 * FPS Controller
*/ var fps_controller_window = window, fps_controller_performance = fps_controller_window.performance;
            var fps_controller_FPSController = /*#__PURE__*/ function(_EventHandler) {
                fps_controller_inheritsLoose(FPSController, _EventHandler);
                function FPSController(hls) {
                    return _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHING) || this;
                }
                var _proto = FPSController.prototype;
                _proto.destroy = function destroy() {
                    if (this.timer) clearInterval(this.timer);
                    this.isVideoPlaybackQualityAvailable = false;
                };
                _proto.onMediaAttaching = function onMediaAttaching(data) {
                    var config = this.hls.config;
                    if (config.capLevelOnFPSDrop) {
                        var video = this.video = data.media instanceof window.HTMLVideoElement ? data.media : null;
                        if (typeof video.getVideoPlaybackQuality === 'function') this.isVideoPlaybackQualityAvailable = true;
                        clearInterval(this.timer);
                        this.timer = setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);
                    }
                };
                _proto.checkFPS = function checkFPS(video, decodedFrames, droppedFrames) {
                    var currentTime = fps_controller_performance.now();
                    if (decodedFrames) {
                        if (this.lastTime) {
                            var currentPeriod = currentTime - this.lastTime, currentDropped = droppedFrames - this.lastDroppedFrames, currentDecoded = decodedFrames - this.lastDecodedFrames, droppedFPS = 1000 * currentDropped / currentPeriod, hls = this.hls;
                            hls.trigger(events["default"].FPS_DROP, {
                                currentDropped: currentDropped,
                                currentDecoded: currentDecoded,
                                totalDroppedFrames: droppedFrames
                            });
                            if (droppedFPS > 0) // logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));
                            {
                                if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {
                                    var currentLevel = hls.currentLevel;
                                    logger["logger"].warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);
                                    if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {
                                        currentLevel = currentLevel - 1;
                                        hls.trigger(events["default"].FPS_DROP_LEVEL_CAPPING, {
                                            level: currentLevel,
                                            droppedLevel: hls.currentLevel
                                        });
                                        hls.autoLevelCapping = currentLevel;
                                        hls.streamController.nextLevelSwitch();
                                    }
                                }
                            }
                        }
                        this.lastTime = currentTime;
                        this.lastDroppedFrames = droppedFrames;
                        this.lastDecodedFrames = decodedFrames;
                    }
                };
                _proto.checkFPSInterval = function checkFPSInterval() {
                    var video = this.video;
                    if (video) {
                        if (this.isVideoPlaybackQualityAvailable) {
                            var videoPlaybackQuality = video.getVideoPlaybackQuality();
                            this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);
                        } else this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);
                    }
                };
                return FPSController;
            }(event_handler);
            /* harmony default export */ var fps_controller = fps_controller_FPSController;
            // CONCATENATED MODULE: ./src/utils/xhr-loader.js
            /**
 * XHR based logger
*/ var xhr_loader_XhrLoader = /*#__PURE__*/ function() {
                function XhrLoader(config) {
                    if (config && config.xhrSetup) this.xhrSetup = config.xhrSetup;
                }
                var _proto = XhrLoader.prototype;
                _proto.destroy = function destroy() {
                    this.abort();
                    this.loader = null;
                };
                _proto.abort = function abort() {
                    var loader = this.loader;
                    if (loader && loader.readyState !== 4) {
                        this.stats.aborted = true;
                        loader.abort();
                    }
                    window.clearTimeout(this.requestTimeout);
                    this.requestTimeout = null;
                    window.clearTimeout(this.retryTimeout);
                    this.retryTimeout = null;
                };
                _proto.load = function load(context, config, callbacks) {
                    this.context = context;
                    this.config = config;
                    this.callbacks = callbacks;
                    this.stats = {
                        trequest: window.performance.now(),
                        retry: 0
                    };
                    this.retryDelay = config.retryDelay;
                    this.loadInternal();
                };
                _proto.loadInternal = function loadInternal() {
                    var xhr, context = this.context;
                    xhr = this.loader = new window.XMLHttpRequest();
                    var stats = this.stats;
                    stats.tfirst = 0;
                    stats.loaded = 0;
                    var xhrSetup = this.xhrSetup;
                    try {
                        if (xhrSetup) try {
                            xhrSetup(xhr, context.url);
                        } catch (e) {
                            // fix xhrSetup: (xhr, url) => {xhr.setRequestHeader("Content-Language", "test");}
                            // not working, as xhr.setRequestHeader expects xhr.readyState === OPEN
                            xhr.open('GET', context.url, true);
                            xhrSetup(xhr, context.url);
                        }
                        if (!xhr.readyState) xhr.open('GET', context.url, true);
                    } catch (e) {
                        // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS
                        this.callbacks.onError({
                            code: xhr.status,
                            text: e.message
                        }, context, xhr);
                        return;
                    }
                    if (context.rangeEnd) xhr.setRequestHeader('Range', 'bytes=' + context.rangeStart + '-' + (context.rangeEnd - 1));
                    xhr.onreadystatechange = this.readystatechange.bind(this);
                    xhr.onprogress = this.loadprogress.bind(this);
                    xhr.responseType = context.responseType; // setup timeout before we perform request
                    this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), this.config.timeout);
                    xhr.send();
                };
                _proto.readystatechange = function readystatechange(event) {
                    var xhr = event.currentTarget, readyState = xhr.readyState, stats = this.stats, context = this.context, config = this.config; // don't proceed if xhr has been aborted
                    if (stats.aborted) return;
                     // >= HEADERS_RECEIVED
                    if (readyState >= 2) {
                        // clear xhr timeout and rearm it if readyState less than 4
                        window.clearTimeout(this.requestTimeout);
                        if (stats.tfirst === 0) stats.tfirst = Math.max(window.performance.now(), stats.trequest);
                        if (readyState === 4) {
                            var status = xhr.status; // http status between 200 to 299 are all successful
                            if (status >= 200 && status < 300) {
                                stats.tload = Math.max(stats.tfirst, window.performance.now());
                                var data, len;
                                if (context.responseType === 'arraybuffer') {
                                    data = xhr.response;
                                    len = data.byteLength;
                                } else {
                                    data = xhr.responseText;
                                    len = data.length;
                                }
                                stats.loaded = stats.total = len;
                                var response = {
                                    url: xhr.responseURL,
                                    data: data
                                };
                                this.callbacks.onSuccess(response, stats, context, xhr);
                            } else // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error
                            if (stats.retry >= config.maxRetry || status >= 400 && status < 499) {
                                logger["logger"].error(status + " while loading " + context.url);
                                this.callbacks.onError({
                                    code: status,
                                    text: xhr.statusText
                                }, context, xhr);
                            } else {
                                // retry
                                logger["logger"].warn(status + " while loading " + context.url + ", retrying in " + this.retryDelay + "..."); // aborts and resets internal state
                                this.destroy(); // schedule retry
                                this.retryTimeout = window.setTimeout(this.loadInternal.bind(this), this.retryDelay); // set exponential backoff
                                this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);
                                stats.retry++;
                            }
                        } else // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet
                        this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), config.timeout);
                    }
                };
                _proto.loadtimeout = function loadtimeout() {
                    logger["logger"].warn("timeout while loading " + this.context.url);
                    this.callbacks.onTimeout(this.stats, this.context, null);
                };
                _proto.loadprogress = function loadprogress(event) {
                    var xhr = event.currentTarget, stats = this.stats;
                    stats.loaded = event.loaded;
                    if (event.lengthComputable) stats.total = event.total;
                    var onProgress = this.callbacks.onProgress;
                    if (onProgress) // third arg is to provide on progress data
                    onProgress(stats, this.context, null, xhr);
                };
                return XhrLoader;
            }();
            /* harmony default export */ var xhr_loader = xhr_loader_XhrLoader;
            // CONCATENATED MODULE: ./src/controller/audio-track-controller.js
            function audio_track_controller_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function audio_track_controller_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) audio_track_controller_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) audio_track_controller_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            function audio_track_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /**
 * @class AudioTrackController
 * @implements {EventHandler}
 *
 * Handles main manifest and audio-track metadata loaded,
 * owns and exposes the selectable audio-tracks data-models.
 *
 * Exposes internal interface to select available audio-tracks.
 *
 * Handles errors on loading audio-track playlists. Manages fallback mechanism
 * with redundants tracks (group-IDs).
 *
 * Handles level-loading and group-ID switches for video (fallback on video levels),
 * and eventually adapts the audio-track group-ID to match.
 *
 * @fires AUDIO_TRACK_LOADING
 * @fires AUDIO_TRACK_SWITCHING
 * @fires AUDIO_TRACKS_UPDATED
 * @fires ERROR
 *
 */ var audio_track_controller_AudioTrackController = /*#__PURE__*/ function(_TaskLoop) {
                audio_track_controller_inheritsLoose(AudioTrackController, _TaskLoop);
                function AudioTrackController(hls) {
                    var _this;
                    _this = _TaskLoop.call(this, hls, events["default"].MANIFEST_LOADING, events["default"].MANIFEST_PARSED, events["default"].AUDIO_TRACK_LOADED, events["default"].AUDIO_TRACK_SWITCHED, events["default"].LEVEL_LOADED, events["default"].ERROR) || this;
                    /**
     * @private
     * Currently selected index in `tracks`
     * @member {number} trackId
     */ _this._trackId = -1;
                    /**
     * @private
     * If should select tracks according to default track attribute
     * @member {boolean} _selectDefaultTrack
     */ _this._selectDefaultTrack = true;
                    /**
     * @public
     * All tracks available
     * @member {AudioTrack[]}
     */ _this.tracks = [];
                    /**
     * @public
     * List of blacklisted audio track IDs (that have caused failure)
     * @member {number[]}
     */ _this.trackIdBlacklist = Object.create(null);
                    /**
     * @public
     * The currently running group ID for audio
     * (we grab this on manifest-parsed and new level-loaded)
     * @member {string}
     */ _this.audioGroupId = null;
                    return _this;
                }
                /**
   * Reset audio tracks on new manifest loading.
   */ var _proto = AudioTrackController.prototype;
                _proto.onManifestLoading = function onManifestLoading() {
                    this.tracks = [];
                    this._trackId = -1;
                    this._selectDefaultTrack = true;
                };
                _proto.onManifestParsed = function onManifestParsed(data) {
                    var tracks = this.tracks = data.audioTracks || [];
                    this.hls.trigger(events["default"].AUDIO_TRACKS_UPDATED, {
                        audioTracks: tracks
                    });
                    this._selectAudioGroup(this.hls.nextLoadLevel);
                };
                _proto.onAudioTrackLoaded = function onAudioTrackLoaded(data) {
                    if (data.id >= this.tracks.length) {
                        logger["logger"].warn('Invalid audio track id:', data.id);
                        return;
                    }
                    logger["logger"].log("audioTrack " + data.id + " loaded");
                    this.tracks[data.id].details = data.details; // check if current playlist is a live playlist
                    // and if we have already our reload interval setup
                    if (data.details.live && !this.hasInterval()) {
                        // if live playlist we will have to reload it periodically
                        // set reload period to playlist target duration
                        var updatePeriodMs = data.details.targetduration * 1000;
                        this.setInterval(updatePeriodMs);
                    }
                    if (!data.details.live && this.hasInterval()) // playlist is not live and timer is scheduled: cancel it
                    this.clearInterval();
                };
                _proto.onAudioTrackSwitched = function onAudioTrackSwitched(data) {
                    var audioGroupId = this.tracks[data.id].groupId;
                    if (audioGroupId && this.audioGroupId !== audioGroupId) this.audioGroupId = audioGroupId;
                };
                _proto.onLevelLoaded = function onLevelLoaded(data) {
                    this._selectAudioGroup(data.level);
                };
                _proto.onError = function onError(data) {
                    // Only handle network errors
                    if (data.type !== errors["ErrorTypes"].NETWORK_ERROR) return;
                     // If fatal network error, cancel update task
                    if (data.fatal) this.clearInterval();
                     // If not an audio-track loading error don't handle further
                    if (data.details !== errors["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR) return;
                    logger["logger"].warn('Network failure on audio-track id:', data.context.id);
                    this._handleLoadError();
                };
                /**
   * @private
   * @param {number} newId
   */ _proto._setAudioTrack = function _setAudioTrack(newId) {
                    // noop on same audio track id as already set
                    if (this._trackId === newId && this.tracks[this._trackId].details) {
                        logger["logger"].debug('Same id as current audio-track passed, and track details available -> no-op');
                        return;
                    } // check if level idx is valid
                    if (newId < 0 || newId >= this.tracks.length) {
                        logger["logger"].warn('Invalid id passed to audio-track controller');
                        return;
                    }
                    var audioTrack = this.tracks[newId];
                    logger["logger"].log("Now switching to audio-track index " + newId); // stopping live reloading timer if any
                    this.clearInterval();
                    this._trackId = newId;
                    var url = audioTrack.url, type = audioTrack.type, id = audioTrack.id;
                    this.hls.trigger(events["default"].AUDIO_TRACK_SWITCHING, {
                        id: id,
                        type: type,
                        url: url
                    });
                    this._loadTrackDetailsIfNeeded(audioTrack);
                };
                _proto.doTick = function doTick() {
                    this._updateTrack(this._trackId);
                };
                _proto._selectAudioGroup = function _selectAudioGroup(levelId) {
                    var levelInfo = this.hls.levels[levelId];
                    if (!levelInfo || !levelInfo.audioGroupIds) return;
                    var audioGroupId = levelInfo.audioGroupIds[levelInfo.urlId];
                    if (this.audioGroupId !== audioGroupId) {
                        this.audioGroupId = audioGroupId;
                        this._selectInitialAudioTrack();
                    }
                };
                _proto._selectInitialAudioTrack = function _selectInitialAudioTrack() {
                    var _this2 = this;
                    var tracks = this.tracks;
                    if (!tracks.length) return;
                    var currentAudioTrack = this.tracks[this._trackId];
                    var name = null;
                    if (currentAudioTrack) name = currentAudioTrack.name;
                     // Pre-select default tracks if there are any
                    if (this._selectDefaultTrack) {
                        var defaultTracks = tracks.filter(function(track) {
                            return track.default;
                        });
                        if (defaultTracks.length) tracks = defaultTracks;
                        else logger["logger"].warn('No default audio tracks defined');
                    }
                    var trackFound = false;
                    var traverseTracks = function traverseTracks1() {
                        // Select track with right group ID
                        tracks.forEach(function(track) {
                            if (trackFound) return;
                             // We need to match the (pre-)selected group ID
                            // and the NAME of the current track.
                            if ((!_this2.audioGroupId || track.groupId === _this2.audioGroupId) && (!name || name === track.name)) {
                                // If there was a previous track try to stay with the same `NAME`.
                                // It should be unique across tracks of same group, and consistent through redundant track groups.
                                _this2._setAudioTrack(track.id);
                                trackFound = true;
                            }
                        });
                    };
                    traverseTracks();
                    if (!trackFound) {
                        name = null;
                        traverseTracks();
                    }
                    if (!trackFound) {
                        logger["logger"].error("No track found for running audio group-ID: " + this.audioGroupId);
                        this.hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].MEDIA_ERROR,
                            details: errors["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR,
                            fatal: true
                        });
                    }
                };
                _proto._needsTrackLoading = function _needsTrackLoading(audioTrack) {
                    var details = audioTrack.details, url = audioTrack.url;
                    if (!details || details.live) // check if we face an audio track embedded in main playlist (audio track without URI attribute)
                    return !!url;
                    return false;
                };
                _proto._loadTrackDetailsIfNeeded = function _loadTrackDetailsIfNeeded(audioTrack) {
                    if (this._needsTrackLoading(audioTrack)) {
                        var url = audioTrack.url, id = audioTrack.id; // track not retrieved yet, or live playlist we need to (re)load it
                        logger["logger"].log("loading audio-track playlist for id: " + id);
                        this.hls.trigger(events["default"].AUDIO_TRACK_LOADING, {
                            url: url,
                            id: id
                        });
                    }
                };
                _proto._updateTrack = function _updateTrack(newId) {
                    // check if level idx is valid
                    if (newId < 0 || newId >= this.tracks.length) return;
                     // stopping live reloading timer if any
                    this.clearInterval();
                    this._trackId = newId;
                    logger["logger"].log("trying to update audio-track " + newId);
                    var audioTrack = this.tracks[newId];
                    this._loadTrackDetailsIfNeeded(audioTrack);
                };
                _proto._handleLoadError = function _handleLoadError() {
                    // First, let's black list current track id
                    this.trackIdBlacklist[this._trackId] = true; // Let's try to fall back on a functional audio-track with the same group ID
                    var previousId = this._trackId;
                    var _this$tracks$previous = this.tracks[previousId], name = _this$tracks$previous.name, language = _this$tracks$previous.language, groupId = _this$tracks$previous.groupId;
                    logger["logger"].warn("Loading failed on audio track id: " + previousId + ", group-id: " + groupId + ", name/language: \"" + name + "\" / \"" + language + "\""); // Find a non-blacklisted track ID with the same NAME
                    // At least a track that is not blacklisted, thus on another group-ID.
                    var newId = previousId;
                    for(var i = 0; i < this.tracks.length; i++){
                        if (this.trackIdBlacklist[i]) continue;
                        var newTrack = this.tracks[i];
                        if (newTrack.name === name) {
                            newId = i;
                            break;
                        }
                    }
                    if (newId === previousId) {
                        logger["logger"].warn("No fallback audio-track found for name/language: \"" + name + "\" / \"" + language + "\"");
                        return;
                    }
                    logger["logger"].log('Attempting audio-track fallback id:', newId, 'group-id:', this.tracks[newId].groupId);
                    this._setAudioTrack(newId);
                };
                audio_track_controller_createClass(AudioTrackController, [
                    {
                        key: "audioTracks",
                        get: function get() {
                            return this.tracks;
                        }
                    },
                    {
                        key: "audioTrack",
                        get: function get() {
                            return this._trackId;
                        },
                        set: function set(newId) {
                            this._setAudioTrack(newId); // If audio track is selected from API then don't choose from the manifest default track
                            this._selectDefaultTrack = false;
                        }
                    }
                ]);
                return AudioTrackController;
            }(TaskLoop1);
            /* harmony default export */ var audio_track_controller = audio_track_controller_AudioTrackController;
            // CONCATENATED MODULE: ./src/controller/audio-stream-controller.js
            function audio_stream_controller_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function audio_stream_controller_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) audio_stream_controller_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) audio_stream_controller_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            function audio_stream_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /*
 * Audio Stream Controller
*/ var audio_stream_controller_window = window, audio_stream_controller_performance = audio_stream_controller_window.performance;
            var audio_stream_controller_TICK_INTERVAL = 100; // how often to tick in ms
            var audio_stream_controller_AudioStreamController = /*#__PURE__*/ function(_BaseStreamController) {
                audio_stream_controller_inheritsLoose(AudioStreamController, _BaseStreamController);
                function AudioStreamController(hls, fragmentTracker) {
                    var _this;
                    _this = _BaseStreamController.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHING, events["default"].AUDIO_TRACKS_UPDATED, events["default"].AUDIO_TRACK_SWITCHING, events["default"].AUDIO_TRACK_LOADED, events["default"].KEY_LOADED, events["default"].FRAG_LOADED, events["default"].FRAG_PARSING_INIT_SEGMENT, events["default"].FRAG_PARSING_DATA, events["default"].FRAG_PARSED, events["default"].ERROR, events["default"].BUFFER_RESET, events["default"].BUFFER_CREATED, events["default"].BUFFER_APPENDED, events["default"].BUFFER_FLUSHED, events["default"].INIT_PTS_FOUND) || this;
                    _this.fragmentTracker = fragmentTracker;
                    _this.config = hls.config;
                    _this.audioCodecSwap = false;
                    _this._state = State.STOPPED;
                    _this.initPTS = [];
                    _this.waitingFragment = null;
                    _this.videoTrackCC = null;
                    _this.waitingVideoCC = null;
                    return _this;
                } // Signal that video PTS was found
                var _proto = AudioStreamController.prototype;
                _proto.onInitPtsFound = function onInitPtsFound(data) {
                    var demuxerId = data.id, cc = data.frag.cc, initPTS = data.initPTS;
                    if (demuxerId === 'main') {
                        // Always update the new INIT PTS
                        // Can change due level switch
                        this.initPTS[cc] = initPTS;
                        this.videoTrackCC = cc;
                        logger["logger"].log("InitPTS for cc: " + cc + " found from main: " + initPTS); // If we are waiting we need to demux/remux the waiting frag
                        // With the new initPTS
                        if (this.state === State.WAITING_INIT_PTS) this.tick();
                    }
                };
                _proto.startLoad = function startLoad(startPosition) {
                    if (this.tracks) {
                        var lastCurrentTime = this.lastCurrentTime;
                        this.stopLoad();
                        this.setInterval(audio_stream_controller_TICK_INTERVAL);
                        this.fragLoadError = 0;
                        if (lastCurrentTime > 0 && startPosition === -1) {
                            logger["logger"].log("audio:override startPosition with lastCurrentTime @" + lastCurrentTime.toFixed(3));
                            this.state = State.IDLE;
                        } else {
                            this.lastCurrentTime = this.startPosition ? this.startPosition : startPosition;
                            this.state = State.STARTING;
                        }
                        this.nextLoadPosition = this.startPosition = this.lastCurrentTime;
                        this.tick();
                    } else {
                        this.startPosition = startPosition;
                        this.state = State.STOPPED;
                    }
                };
                _proto.doTick = function doTick() {
                    var pos, track, trackDetails, hls = this.hls, config = hls.config; // logger.log('audioStream:' + this.state);
                    switch(this.state){
                        case State.ERROR:
                        case State.PAUSED:
                        case State.BUFFER_FLUSHING:
                            break;
                        case State.STARTING:
                            this.state = State.WAITING_TRACK;
                            this.loadedmetadata = false;
                            break;
                        case State.IDLE:
                            var tracks = this.tracks; // audio tracks not received => exit loop
                            if (!tracks) break;
                             // if video not attached AND
                            // start fragment already requested OR start frag prefetch disable
                            // exit loop
                            // => if media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop
                            if (!this.media && (this.startFragRequested || !config.startFragPrefetch)) break;
                             // determine next candidate fragment to be loaded, based on current position and
                            //  end of buffer position
                            // if we have not yet loaded any fragment, start loading from start position
                            if (this.loadedmetadata) pos = this.media.currentTime;
                            else {
                                pos = this.nextLoadPosition;
                                if (pos === undefined) break;
                            }
                            var media = this.mediaBuffer ? this.mediaBuffer : this.media;
                            var videoBuffer = this.videoBuffer ? this.videoBuffer : this.media;
                            var maxBufferHole = pos < config.maxBufferHole ? Math.max(MAX_START_GAP_JUMP, config.maxBufferHole) : config.maxBufferHole;
                            var bufferInfo = BufferHelper.bufferInfo(media, pos, maxBufferHole);
                            var mainBufferInfo = BufferHelper.bufferInfo(videoBuffer, pos, maxBufferHole);
                            var bufferLen = bufferInfo.len;
                            var bufferEnd = bufferInfo.end;
                            var fragPrevious = this.fragPrevious; // ensure we buffer at least config.maxBufferLength (default 30s) or config.maxMaxBufferLength (default: 600s)
                            // whichever is smaller.
                            // once we reach that threshold, don't buffer more than video (mainBufferInfo.len)
                            var maxConfigBuffer = Math.min(config.maxBufferLength, config.maxMaxBufferLength);
                            var maxBufLen = Math.max(maxConfigBuffer, mainBufferInfo.len);
                            var audioSwitch = this.audioSwitch;
                            var trackId = this.trackId; // if buffer length is less than maxBufLen try to load a new fragment
                            if ((bufferLen < maxBufLen || audioSwitch) && trackId < tracks.length) {
                                trackDetails = tracks[trackId].details; // if track info not retrieved yet, switch state and wait for track retrieval
                                if (typeof trackDetails === 'undefined') {
                                    this.state = State.WAITING_TRACK;
                                    break;
                                }
                                if (!audioSwitch && this._streamEnded(bufferInfo, trackDetails)) {
                                    this.hls.trigger(events["default"].BUFFER_EOS, {
                                        type: 'audio'
                                    });
                                    this.state = State.ENDED;
                                    return;
                                } // find fragment index, contiguous with end of buffer position
                                var fragments = trackDetails.fragments, fragLen = fragments.length, start = fragments[0].start, end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration, frag; // When switching audio track, reload audio as close as possible to currentTime
                                if (audioSwitch) {
                                    if (trackDetails.live && !trackDetails.PTSKnown) {
                                        logger["logger"].log('switching audiotrack, live stream, unknown PTS,load first fragment');
                                        bufferEnd = 0;
                                    } else {
                                        bufferEnd = pos; // if currentTime (pos) is less than alt audio playlist start time, it means that alt audio is ahead of currentTime
                                        if (trackDetails.PTSKnown && pos < start) {
                                            // if everything is buffered from pos to start or if audio buffer upfront, let's seek to start
                                            if (bufferInfo.end > start || bufferInfo.nextStart) {
                                                logger["logger"].log('alt audio track ahead of main track, seek to start of alt audio track');
                                                this.media.currentTime = start + 0.05;
                                            } else return;
                                        }
                                    }
                                }
                                if (trackDetails.initSegment && !trackDetails.initSegment.data) frag = trackDetails.initSegment;
                                else if (bufferEnd <= start) {
                                    frag = fragments[0];
                                    if (this.videoTrackCC !== null && frag.cc !== this.videoTrackCC) // Ensure we find a fragment which matches the continuity of the video track
                                    frag = findFragWithCC(fragments, this.videoTrackCC);
                                    if (trackDetails.live && frag.loadIdx && frag.loadIdx === this.fragLoadIdx) {
                                        // we just loaded this first fragment, and we are still lagging behind the start of the live playlist
                                        // let's force seek to start
                                        var nextBuffered = bufferInfo.nextStart ? bufferInfo.nextStart : start;
                                        logger["logger"].log("no alt audio available @currentTime:" + this.media.currentTime + ", seeking @" + (nextBuffered + 0.05));
                                        this.media.currentTime = nextBuffered + 0.05;
                                        return;
                                    }
                                } else {
                                    var foundFrag;
                                    var maxFragLookUpTolerance = config.maxFragLookUpTolerance;
                                    var fragNext = fragPrevious ? fragments[fragPrevious.sn - fragments[0].sn + 1] : undefined;
                                    if (bufferEnd < end) {
                                        if (bufferEnd > end - maxFragLookUpTolerance) maxFragLookUpTolerance = 0;
                                         // Prefer the next fragment if it's within tolerance
                                        if (fragNext && !fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, fragNext)) foundFrag = fragNext;
                                        else foundFrag = binary_search.search(fragments, function(frag1) {
                                            return fragmentWithinToleranceTest(bufferEnd, maxFragLookUpTolerance, frag1);
                                        });
                                    } else // reach end of playlist
                                    foundFrag = fragments[fragLen - 1];
                                    if (foundFrag) {
                                        frag = foundFrag;
                                        start = foundFrag.start; // logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);
                                        if (fragPrevious && frag.level === fragPrevious.level && frag.sn === fragPrevious.sn) {
                                            if (frag.sn < trackDetails.endSN) {
                                                frag = fragments[frag.sn + 1 - trackDetails.startSN];
                                                if (this.fragmentTracker.getState(frag) !== FragmentState.OK) logger["logger"].log("SN just loaded, load next one: " + frag.sn);
                                            } else frag = null;
                                        }
                                    }
                                }
                                if (frag) {
                                    // logger.log('      loading frag ' + i +',pos/bufEnd:' + pos.toFixed(3) + '/' + bufferEnd.toFixed(3));
                                    if (frag.encrypted) {
                                        logger["logger"].log("Loading key for " + frag.sn + " of [" + trackDetails.startSN + " ," + trackDetails.endSN + "],track " + trackId);
                                        this.state = State.KEY_LOADING;
                                        hls.trigger(events["default"].KEY_LOADING, {
                                            frag: frag
                                        });
                                    } else {
                                        // only load if fragment is not loaded or if in audio switch
                                        // we force a frag loading in audio switch as fragment tracker might not have evicted previous frags in case of quick audio switch
                                        this.fragCurrent = frag;
                                        if (audioSwitch || this.fragmentTracker.getState(frag) === FragmentState.NOT_LOADED) {
                                            logger["logger"].log("Loading " + frag.sn + ", cc: " + frag.cc + " of [" + trackDetails.startSN + " ," + trackDetails.endSN + "],track " + trackId + ", " + (this.loadedmetadata ? 'currentTime' : 'nextLoadPosition') + ": " + pos + ", bufferEnd: " + bufferEnd.toFixed(3));
                                            if (frag.sn !== 'initSegment') this.startFragRequested = true;
                                            if (Object(number["isFiniteNumber"])(frag.sn)) this.nextLoadPosition = frag.start + frag.duration;
                                            hls.trigger(events["default"].FRAG_LOADING, {
                                                frag: frag
                                            });
                                            this.state = State.FRAG_LOADING;
                                        }
                                    }
                                }
                            }
                            break;
                        case State.WAITING_TRACK:
                            track = this.tracks[this.trackId]; // check if playlist is already loaded
                            if (track && track.details) this.state = State.IDLE;
                            break;
                        case State.FRAG_LOADING_WAITING_RETRY:
                            var now = audio_stream_controller_performance.now();
                            var retryDate = this.retryDate;
                            media = this.media;
                            var isSeeking = media && media.seeking; // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading
                            if (!retryDate || now >= retryDate || isSeeking) {
                                logger["logger"].log('audioStreamController: retryDate reached, switch back to IDLE state');
                                this.state = State.IDLE;
                            }
                            break;
                        case State.WAITING_INIT_PTS:
                            // Ensure we don't get stuck in the WAITING_INIT_PTS state if the waiting frag CC doesn't match any initPTS
                            var waitingFrag = this.waitingFragment;
                            if (waitingFrag) {
                                var waitingFragCC = waitingFrag.frag.cc;
                                if (this.initPTS[waitingFragCC] !== undefined) {
                                    this.waitingFragment = null;
                                    this.state = State.FRAG_LOADING;
                                    this.onFragLoaded(waitingFrag);
                                } else if (this.videoTrackCC !== this.waitingVideoCC) {
                                    // Drop waiting fragment if videoTrackCC has changed since waitingFragment was set and initPTS was not found
                                    logger["logger"].log("Waiting fragment cc (" + waitingFragCC + ") cancelled because video is at cc " + this.videoTrackCC);
                                    this.clearWaitingFragment();
                                } else {
                                    // Drop waiting fragment if an earlier fragment is needed
                                    var _bufferInfo = BufferHelper.bufferInfo(this.mediaBuffer, this.media.currentTime, config.maxBufferHole);
                                    var waitingFragmentAtPosition = fragmentWithinToleranceTest(_bufferInfo.end, config.maxFragLookUpTolerance, waitingFrag.frag);
                                    if (waitingFragmentAtPosition < 0) {
                                        logger["logger"].log("Waiting fragment cc (" + waitingFragCC + ") @ " + waitingFrag.frag.start + " cancelled because another fragment at " + _bufferInfo.end + " is needed");
                                        this.clearWaitingFragment();
                                    }
                                }
                            } else this.state = State.IDLE;
                            break;
                        case State.STOPPED:
                        case State.FRAG_LOADING:
                        case State.PARSING:
                        case State.PARSED:
                        case State.ENDED:
                            break;
                        default:
                            break;
                    }
                };
                _proto.clearWaitingFragment = function clearWaitingFragment() {
                    var waitingFrag = this.waitingFragment;
                    if (waitingFrag) {
                        this.fragmentTracker.removeFragment(waitingFrag.frag);
                        this.waitingFragment = null;
                        this.waitingVideoCC = null;
                        this.state = State.IDLE;
                    }
                };
                _proto.onMediaAttached = function onMediaAttached(data) {
                    var media = this.media = this.mediaBuffer = data.media;
                    this.onvseeking = this.onMediaSeeking.bind(this);
                    this.onvended = this.onMediaEnded.bind(this);
                    media.addEventListener('seeking', this.onvseeking);
                    media.addEventListener('ended', this.onvended);
                    var config = this.config;
                    if (this.tracks && config.autoStartLoad) this.startLoad(config.startPosition);
                };
                _proto.onMediaDetaching = function onMediaDetaching() {
                    var media = this.media;
                    if (media && media.ended) {
                        logger["logger"].log('MSE detaching and video ended, reset startPosition');
                        this.startPosition = this.lastCurrentTime = 0;
                    } // remove video listeners
                    if (media) {
                        media.removeEventListener('seeking', this.onvseeking);
                        media.removeEventListener('ended', this.onvended);
                        this.onvseeking = this.onvseeked = this.onvended = null;
                    }
                    this.media = this.mediaBuffer = this.videoBuffer = null;
                    this.loadedmetadata = false;
                    this.fragmentTracker.removeAllFragments();
                    this.stopLoad();
                };
                _proto.onAudioTracksUpdated = function onAudioTracksUpdated(data) {
                    logger["logger"].log('audio tracks updated');
                    this.tracks = data.audioTracks;
                };
                _proto.onAudioTrackSwitching = function onAudioTrackSwitching(data) {
                    // if any URL found on new audio track, it is an alternate audio track
                    var altAudio = !!data.url;
                    this.trackId = data.id;
                    this.fragCurrent = null;
                    this.clearWaitingFragment();
                    this.state = State.PAUSED; // destroy useless demuxer when switching audio to main
                    if (!altAudio) {
                        if (this.demuxer) {
                            this.demuxer.destroy();
                            this.demuxer = null;
                        }
                    } else // switching to audio track, start timer if not already started
                    this.setInterval(audio_stream_controller_TICK_INTERVAL);
                     // should we switch tracks ?
                    if (altAudio) {
                        this.audioSwitch = true; // main audio track are handled by stream-controller, just do something if switching to alt audio track
                        this.state = State.IDLE;
                    }
                    this.tick();
                };
                _proto.onAudioTrackLoaded = function onAudioTrackLoaded(data) {
                    var newDetails = data.details, trackId = data.id, track = this.tracks[trackId], curDetails = track.details, duration = newDetails.totalduration, sliding = 0;
                    logger["logger"].log("track " + trackId + " loaded [" + newDetails.startSN + "," + newDetails.endSN + "],duration:" + duration);
                    if (newDetails.live || curDetails && curDetails.live) {
                        if (curDetails && newDetails.fragments.length > 0) {
                            // we already have details for that level, merge them
                            mergeDetails(curDetails, newDetails);
                            sliding = newDetails.fragments[0].start; // TODO
                            // this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);
                            if (newDetails.PTSKnown) logger["logger"].log("live audio playlist sliding:" + sliding.toFixed(3));
                            else logger["logger"].log('live audio playlist - outdated PTS, unknown sliding');
                        } else {
                            newDetails.PTSKnown = false;
                            logger["logger"].log('live audio playlist - first load, unknown sliding');
                        }
                    } else newDetails.PTSKnown = false;
                    track.details = newDetails; // compute start position
                    if (!this.startFragRequested) {
                        // compute start position if set to -1. use it straight away if value is defined
                        if (this.startPosition === -1) {
                            // first, check if start time offset has been set in playlist, if yes, use this value
                            var startTimeOffset = newDetails.startTimeOffset;
                            if (Object(number["isFiniteNumber"])(startTimeOffset)) {
                                logger["logger"].log("start time offset found in playlist, adjust startPosition to " + startTimeOffset);
                                this.startPosition = startTimeOffset;
                            } else if (newDetails.live) {
                                this.startPosition = this.computeLivePosition(sliding, newDetails);
                                logger["logger"].log("compute startPosition for audio-track to " + this.startPosition);
                            } else this.startPosition = 0;
                        }
                        this.nextLoadPosition = this.startPosition;
                    } // only switch batck to IDLE state if we were waiting for track to start downloading a new fragment
                    if (this.state === State.WAITING_TRACK) this.state = State.IDLE;
                     // trigger handler right now
                    this.tick();
                };
                _proto.onKeyLoaded = function onKeyLoaded() {
                    if (this.state === State.KEY_LOADING) {
                        this.state = State.IDLE;
                        this.tick();
                    }
                };
                _proto.onFragLoaded = function onFragLoaded(data) {
                    var fragCurrent = this.fragCurrent, fragLoaded = data.frag;
                    if (this.state === State.FRAG_LOADING && fragCurrent && fragLoaded.type === 'audio' && fragLoaded.level === fragCurrent.level && fragLoaded.sn === fragCurrent.sn) {
                        var track = this.tracks[this.trackId], details = track.details, duration = details.totalduration, trackId = fragCurrent.level, sn = fragCurrent.sn, cc = fragCurrent.cc, audioCodec = this.config.defaultAudioCodec || track.audioCodec || 'mp4a.40.2', stats = this.stats = data.stats;
                        if (sn === 'initSegment') {
                            this.state = State.IDLE;
                            stats.tparsed = stats.tbuffered = audio_stream_controller_performance.now();
                            details.initSegment.data = data.payload;
                            this.hls.trigger(events["default"].FRAG_BUFFERED, {
                                stats: stats,
                                frag: fragCurrent,
                                id: 'audio'
                            });
                            this.tick();
                        } else {
                            this.state = State.PARSING; // transmux the MPEG-TS data to ISO-BMFF segments
                            this.appended = false;
                            if (!this.demuxer) this.demuxer = new demux_demuxer(this.hls, 'audio');
                             // Check if we have video initPTS
                            // If not we need to wait for it
                            var initPTS = this.initPTS[cc];
                            var initSegmentData = details.initSegment ? details.initSegment.data : [];
                            if (initPTS !== undefined) {
                                this.pendingBuffering = true;
                                logger["logger"].log("Demuxing " + sn + " of [" + details.startSN + " ," + details.endSN + "],track " + trackId); // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live)
                                var accurateTimeOffset = false; // details.PTSKnown || !details.live;
                                this.demuxer.push(data.payload, initSegmentData, audioCodec, null, fragCurrent, duration, accurateTimeOffset, initPTS);
                            } else {
                                logger["logger"].log("Unknown video PTS for cc " + cc + ", waiting for video PTS before demuxing audio frag " + sn + " of [" + details.startSN + " ," + details.endSN + "],track " + trackId);
                                this.waitingFragment = data;
                                this.waitingVideoCC = this.videoTrackCC;
                                this.state = State.WAITING_INIT_PTS;
                            }
                        }
                    }
                    this.fragLoadError = 0;
                };
                _proto.onFragParsingInitSegment = function onFragParsingInitSegment(data) {
                    var fragCurrent = this.fragCurrent;
                    var fragNew = data.frag;
                    if (fragCurrent && data.id === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
                        var tracks = data.tracks, track; // delete any video track found on audio demuxer
                        if (tracks.video) delete tracks.video;
                         // include levelCodec in audio and video tracks
                        track = tracks.audio;
                        if (track) {
                            track.levelCodec = track.codec;
                            track.id = data.id;
                            this.hls.trigger(events["default"].BUFFER_CODECS, tracks);
                            logger["logger"].log("audio track:audio,container:" + track.container + ",codecs[level/parsed]=[" + track.levelCodec + "/" + track.codec + "]");
                            var initSegment = track.initSegment;
                            if (initSegment) {
                                var appendObj = {
                                    type: 'audio',
                                    data: initSegment,
                                    parent: 'audio',
                                    content: 'initSegment'
                                };
                                if (this.audioSwitch) this.pendingData = [
                                    appendObj
                                ];
                                else {
                                    this.appended = true; // arm pending Buffering flag before appending a segment
                                    this.pendingBuffering = true;
                                    this.hls.trigger(events["default"].BUFFER_APPENDING, appendObj);
                                }
                            } // trigger handler right now
                            this.tick();
                        }
                    }
                };
                _proto.onFragParsingData = function onFragParsingData(data) {
                    var _this2 = this;
                    var fragCurrent = this.fragCurrent;
                    var fragNew = data.frag;
                    if (fragCurrent && data.id === 'audio' && data.type === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
                        var trackId = this.trackId, track = this.tracks[trackId], hls = this.hls;
                        if (!Object(number["isFiniteNumber"])(data.endPTS)) {
                            data.endPTS = data.startPTS + fragCurrent.duration;
                            data.endDTS = data.startDTS + fragCurrent.duration;
                        }
                        fragCurrent.addElementaryStream(ElementaryStreamTypes.AUDIO);
                        logger["logger"].log("parsed " + data.type + ",PTS:[" + data.startPTS.toFixed(3) + "," + data.endPTS.toFixed(3) + "],DTS:[" + data.startDTS.toFixed(3) + "/" + data.endDTS.toFixed(3) + "],nb:" + data.nb);
                        updateFragPTSDTS(track.details, fragCurrent, data.startPTS, data.endPTS);
                        var media = this.media;
                        var appendOnBufferFlush = false; // Only flush audio from old audio tracks when PTS is known on new audio track
                        if (this.audioSwitch) {
                            if (media && media.readyState) {
                                var currentTime = media.currentTime;
                                logger["logger"].log('switching audio track : currentTime:' + currentTime);
                                if (currentTime >= data.startPTS) {
                                    logger["logger"].log('switching audio track : flushing all audio');
                                    this.state = State.BUFFER_FLUSHING;
                                    hls.trigger(events["default"].BUFFER_FLUSHING, {
                                        startOffset: 0,
                                        endOffset: Number.POSITIVE_INFINITY,
                                        type: 'audio'
                                    });
                                    appendOnBufferFlush = true; // Lets announce that the initial audio track switch flush occur
                                    this.audioSwitch = false;
                                    hls.trigger(events["default"].AUDIO_TRACK_SWITCHED, {
                                        id: trackId
                                    });
                                }
                            } else {
                                // Lets announce that the initial audio track switch flush occur
                                this.audioSwitch = false;
                                hls.trigger(events["default"].AUDIO_TRACK_SWITCHED, {
                                    id: trackId
                                });
                            }
                        }
                        var pendingData = this.pendingData;
                        if (!pendingData) {
                            logger["logger"].warn('Apparently attempt to enqueue media payload without codec initialization data upfront');
                            hls.trigger(events["default"].ERROR, {
                                type: errors["ErrorTypes"].MEDIA_ERROR,
                                details: null,
                                fatal: true
                            });
                            return;
                        }
                        if (!this.audioSwitch) {
                            [
                                data.data1,
                                data.data2
                            ].forEach(function(buffer) {
                                if (buffer && buffer.length) pendingData.push({
                                    type: data.type,
                                    data: buffer,
                                    parent: 'audio',
                                    content: 'data'
                                });
                            });
                            if (!appendOnBufferFlush && pendingData.length) {
                                pendingData.forEach(function(appendObj) {
                                    // only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)
                                    // in that case it is useless to append following segments
                                    if (_this2.state === State.PARSING) {
                                        // arm pending Buffering flag before appending a segment
                                        _this2.pendingBuffering = true;
                                        _this2.hls.trigger(events["default"].BUFFER_APPENDING, appendObj);
                                    }
                                });
                                this.pendingData = [];
                                this.appended = true;
                            }
                        } // trigger handler right now
                        this.tick();
                    }
                };
                _proto.onFragParsed = function onFragParsed(data) {
                    var fragCurrent = this.fragCurrent;
                    var fragNew = data.frag;
                    if (fragCurrent && data.id === 'audio' && fragNew.sn === fragCurrent.sn && fragNew.level === fragCurrent.level && this.state === State.PARSING) {
                        this.stats.tparsed = audio_stream_controller_performance.now();
                        this.state = State.PARSED;
                        this._checkAppendedParsed();
                    }
                };
                _proto.onBufferReset = function onBufferReset() {
                    // reset reference to sourcebuffers
                    this.mediaBuffer = this.videoBuffer = null;
                    this.loadedmetadata = false;
                };
                _proto.onBufferCreated = function onBufferCreated(data) {
                    var audioTrack = data.tracks.audio;
                    if (audioTrack) {
                        this.mediaBuffer = audioTrack.buffer;
                        this.loadedmetadata = true;
                    }
                    if (data.tracks.video) this.videoBuffer = data.tracks.video.buffer;
                };
                _proto.onBufferAppended = function onBufferAppended(data) {
                    if (data.parent === 'audio') {
                        var state = this.state;
                        if (state === State.PARSING || state === State.PARSED) {
                            // check if all buffers have been appended
                            this.pendingBuffering = data.pending > 0;
                            this._checkAppendedParsed();
                        }
                    }
                };
                _proto._checkAppendedParsed = function _checkAppendedParsed() {
                    // trigger handler right now
                    if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {
                        var frag = this.fragCurrent, stats = this.stats, hls = this.hls;
                        if (frag) {
                            this.fragPrevious = frag;
                            stats.tbuffered = audio_stream_controller_performance.now();
                            hls.trigger(events["default"].FRAG_BUFFERED, {
                                stats: stats,
                                frag: frag,
                                id: 'audio'
                            });
                            var media = this.mediaBuffer ? this.mediaBuffer : this.media;
                            if (media) logger["logger"].log("audio buffered : " + time_ranges.toString(media.buffered));
                            if (this.audioSwitch && this.appended) {
                                this.audioSwitch = false;
                                hls.trigger(events["default"].AUDIO_TRACK_SWITCHED, {
                                    id: this.trackId
                                });
                            }
                            this.state = State.IDLE;
                        }
                        this.tick();
                    }
                };
                _proto.onError = function onError(data) {
                    var frag = data.frag; // don't handle frag error not related to audio fragment
                    if (frag && frag.type !== 'audio') return;
                    switch(data.details){
                        case errors["ErrorDetails"].FRAG_LOAD_ERROR:
                        case errors["ErrorDetails"].FRAG_LOAD_TIMEOUT:
                            var _frag = data.frag; // don't handle frag error not related to audio fragment
                            if (_frag && _frag.type !== 'audio') break;
                            if (!data.fatal) {
                                var loadError = this.fragLoadError;
                                if (loadError) loadError++;
                                else loadError = 1;
                                var config = this.config;
                                if (loadError <= config.fragLoadingMaxRetry) {
                                    this.fragLoadError = loadError; // exponential backoff capped to config.fragLoadingMaxRetryTimeout
                                    var delay = Math.min(Math.pow(2, loadError - 1) * config.fragLoadingRetryDelay, config.fragLoadingMaxRetryTimeout);
                                    logger["logger"].warn("AudioStreamController: frag loading failed, retry in " + delay + " ms");
                                    this.retryDate = audio_stream_controller_performance.now() + delay; // retry loading state
                                    this.state = State.FRAG_LOADING_WAITING_RETRY;
                                } else {
                                    logger["logger"].error("AudioStreamController: " + data.details + " reaches max retry, redispatch as fatal ..."); // switch error to fatal
                                    data.fatal = true;
                                    this.state = State.ERROR;
                                }
                            }
                            break;
                        case errors["ErrorDetails"].AUDIO_TRACK_LOAD_ERROR:
                        case errors["ErrorDetails"].AUDIO_TRACK_LOAD_TIMEOUT:
                        case errors["ErrorDetails"].KEY_LOAD_ERROR:
                        case errors["ErrorDetails"].KEY_LOAD_TIMEOUT:
                            //  when in ERROR state, don't switch back to IDLE state in case a non-fatal error is received
                            if (this.state !== State.ERROR) {
                                // if fatal error, stop processing, otherwise move to IDLE to retry loading
                                this.state = data.fatal ? State.ERROR : State.IDLE;
                                logger["logger"].warn("AudioStreamController: " + data.details + " while loading frag, now switching to " + this.state + " state ...");
                            }
                            break;
                        case errors["ErrorDetails"].BUFFER_FULL_ERROR:
                            // if in appending state
                            if (data.parent === 'audio' && (this.state === State.PARSING || this.state === State.PARSED)) {
                                var media = this.mediaBuffer, currentTime = this.media.currentTime, mediaBuffered = media && BufferHelper.isBuffered(media, currentTime) && BufferHelper.isBuffered(media, currentTime + 0.5); // reduce max buf len if current position is buffered
                                if (mediaBuffered) {
                                    var _config = this.config;
                                    if (_config.maxMaxBufferLength >= _config.maxBufferLength) {
                                        // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...
                                        _config.maxMaxBufferLength /= 2;
                                        logger["logger"].warn("AudioStreamController: reduce max buffer length to " + _config.maxMaxBufferLength + "s");
                                    }
                                    this.state = State.IDLE;
                                } else {
                                    // current position is not buffered, but browser is still complaining about buffer full error
                                    // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708
                                    // in that case flush the whole audio buffer to recover
                                    logger["logger"].warn('AudioStreamController: buffer full error also media.currentTime is not buffered, flush audio buffer');
                                    this.fragCurrent = null; // flush everything
                                    this.state = State.BUFFER_FLUSHING;
                                    this.hls.trigger(events["default"].BUFFER_FLUSHING, {
                                        startOffset: 0,
                                        endOffset: Number.POSITIVE_INFINITY,
                                        type: 'audio'
                                    });
                                }
                            }
                            break;
                        default:
                            break;
                    }
                };
                _proto.onBufferFlushed = function onBufferFlushed() {
                    var _this3 = this;
                    var pendingData = this.pendingData;
                    if (pendingData && pendingData.length) {
                        logger["logger"].log('AudioStreamController: appending pending audio data after buffer flushed');
                        pendingData.forEach(function(appendObj) {
                            _this3.hls.trigger(events["default"].BUFFER_APPENDING, appendObj);
                        });
                        this.appended = true;
                        this.pendingData = [];
                        this.state = State.PARSED;
                    } else {
                        // move to IDLE once flush complete. this should trigger new fragment loading
                        this.state = State.IDLE; // reset reference to frag
                        this.fragPrevious = null;
                        this.tick();
                    }
                };
                audio_stream_controller_createClass(AudioStreamController, [
                    {
                        key: "state",
                        set: function set(nextState) {
                            if (this.state !== nextState) {
                                var previousState = this.state;
                                this._state = nextState;
                                logger["logger"].log("audio stream:" + previousState + "->" + nextState);
                            }
                        },
                        get: function get() {
                            return this._state;
                        }
                    }
                ]);
                return AudioStreamController;
            }(base_stream_controller_BaseStreamController);
            /* harmony default export */ var audio_stream_controller = audio_stream_controller_AudioStreamController;
            // CONCATENATED MODULE: ./src/utils/vttcue.js
            /**
 * Copyright 2013 vtt.js Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ /* harmony default export */ var vttcue = function() {
                if (typeof window !== 'undefined' && window.VTTCue) return window.VTTCue;
                var autoKeyword = 'auto';
                var directionSetting = {
                    '': true,
                    lr: true,
                    rl: true
                };
                var alignSetting = {
                    start: true,
                    middle: true,
                    end: true,
                    left: true,
                    right: true
                };
                function findDirectionSetting(value) {
                    if (typeof value !== 'string') return false;
                    var dir = directionSetting[value.toLowerCase()];
                    return dir ? value.toLowerCase() : false;
                }
                function findAlignSetting(value) {
                    if (typeof value !== 'string') return false;
                    var align = alignSetting[value.toLowerCase()];
                    return align ? value.toLowerCase() : false;
                }
                function extend(obj) {
                    var i = 1;
                    for(; i < arguments.length; i++){
                        var cobj = arguments[i];
                        for(var p in cobj)obj[p] = cobj[p];
                    }
                    return obj;
                }
                function VTTCue1(startTime, endTime, text) {
                    var cue = this;
                    var baseObj = {
                    };
                    baseObj.enumerable = true;
                    /**
     * Shim implementation specific properties. These properties are not in
     * the spec.
     */ // Lets us know when the VTTCue's data has changed in such a way that we need
                    // to recompute its display state. This lets us compute its display state
                    // lazily.
                    cue.hasBeenReset = false;
                    /**
     * VTTCue and TextTrackCue properties
     * http://dev.w3.org/html5/webvtt/#vttcue-interface
     */ var _id = '';
                    var _pauseOnExit = false;
                    var _startTime = startTime;
                    var _endTime = endTime;
                    var _text = text;
                    var _region = null;
                    var _vertical = '';
                    var _snapToLines = true;
                    var _line = 'auto';
                    var _lineAlign = 'start';
                    var _position = 50;
                    var _positionAlign = 'middle';
                    var _size = 50;
                    var _align = 'middle';
                    Object.defineProperty(cue, 'id', extend({
                    }, baseObj, {
                        get: function get() {
                            return _id;
                        },
                        set: function set(value) {
                            _id = '' + value;
                        }
                    }));
                    Object.defineProperty(cue, 'pauseOnExit', extend({
                    }, baseObj, {
                        get: function get() {
                            return _pauseOnExit;
                        },
                        set: function set(value) {
                            _pauseOnExit = !!value;
                        }
                    }));
                    Object.defineProperty(cue, 'startTime', extend({
                    }, baseObj, {
                        get: function get() {
                            return _startTime;
                        },
                        set: function set(value) {
                            if (typeof value !== 'number') throw new TypeError('Start time must be set to a number.');
                            _startTime = value;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'endTime', extend({
                    }, baseObj, {
                        get: function get() {
                            return _endTime;
                        },
                        set: function set(value) {
                            if (typeof value !== 'number') throw new TypeError('End time must be set to a number.');
                            _endTime = value;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'text', extend({
                    }, baseObj, {
                        get: function get() {
                            return _text;
                        },
                        set: function set(value) {
                            _text = '' + value;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'region', extend({
                    }, baseObj, {
                        get: function get() {
                            return _region;
                        },
                        set: function set(value) {
                            _region = value;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'vertical', extend({
                    }, baseObj, {
                        get: function get() {
                            return _vertical;
                        },
                        set: function set(value) {
                            var setting = findDirectionSetting(value); // Have to check for false because the setting an be an empty string.
                            if (setting === false) throw new SyntaxError('An invalid or illegal string was specified.');
                            _vertical = setting;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'snapToLines', extend({
                    }, baseObj, {
                        get: function get() {
                            return _snapToLines;
                        },
                        set: function set(value) {
                            _snapToLines = !!value;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'line', extend({
                    }, baseObj, {
                        get: function get() {
                            return _line;
                        },
                        set: function set(value) {
                            if (typeof value !== 'number' && value !== autoKeyword) throw new SyntaxError('An invalid number or illegal string was specified.');
                            _line = value;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'lineAlign', extend({
                    }, baseObj, {
                        get: function get() {
                            return _lineAlign;
                        },
                        set: function set(value) {
                            var setting = findAlignSetting(value);
                            if (!setting) throw new SyntaxError('An invalid or illegal string was specified.');
                            _lineAlign = setting;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'position', extend({
                    }, baseObj, {
                        get: function get() {
                            return _position;
                        },
                        set: function set(value) {
                            if (value < 0 || value > 100) throw new Error('Position must be between 0 and 100.');
                            _position = value;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'positionAlign', extend({
                    }, baseObj, {
                        get: function get() {
                            return _positionAlign;
                        },
                        set: function set(value) {
                            var setting = findAlignSetting(value);
                            if (!setting) throw new SyntaxError('An invalid or illegal string was specified.');
                            _positionAlign = setting;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'size', extend({
                    }, baseObj, {
                        get: function get() {
                            return _size;
                        },
                        set: function set(value) {
                            if (value < 0 || value > 100) throw new Error('Size must be between 0 and 100.');
                            _size = value;
                            this.hasBeenReset = true;
                        }
                    }));
                    Object.defineProperty(cue, 'align', extend({
                    }, baseObj, {
                        get: function get() {
                            return _align;
                        },
                        set: function set(value) {
                            var setting = findAlignSetting(value);
                            if (!setting) throw new SyntaxError('An invalid or illegal string was specified.');
                            _align = setting;
                            this.hasBeenReset = true;
                        }
                    }));
                    /**
     * Other <track> spec defined properties
     */ // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
                    cue.displayState = void 0;
                }
                /**
   * VTTCue methods
   */ VTTCue1.prototype.getCueAsHTML = function() {
                    // Assume WebVTT.convertCueToDOMTree is on the global.
                    var WebVTT = window.WebVTT;
                    return WebVTT.convertCueToDOMTree(window, this.text);
                };
                return VTTCue1;
            }();
            // CONCATENATED MODULE: ./src/utils/vttparser.js
            /*
 * Source: https://github.com/mozilla/vtt.js/blob/master/dist/vtt.js#L1716
 */ var StringDecoder = function StringDecoder1() {
                return {
                    decode: function decode(data) {
                        if (!data) return '';
                        if (typeof data !== 'string') throw new Error('Error - expected string data.');
                        return decodeURIComponent(encodeURIComponent(data));
                    }
                };
            };
            function VTTParser() {
                this.window = window;
                this.state = 'INITIAL';
                this.buffer = '';
                this.decoder = new StringDecoder();
                this.regionList = [];
            } // Try to parse input as a time stamp.
            function parseTimeStamp(input) {
                function computeSeconds(h, m, s, f) {
                    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
                }
                var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
                if (!m) return null;
                if (m[3]) // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
                return computeSeconds(m[1], m[2], m[3].replace(':', ''), m[4]);
                else if (m[1] > 59) // Timestamp takes the form of [hours]:[minutes].[milliseconds]
                // First position is hours as it's over 59.
                return computeSeconds(m[1], m[2], 0, m[4]);
                else // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
                return computeSeconds(0, m[1], m[2], m[4]);
            } // A settings object holds key/value pairs and will ignore anything but the first
            // assignment to a specific key.
            function Settings() {
                this.values = Object.create(null);
            }
            Settings.prototype = {
                // Only accept the first assignment to any key.
                set: function set(k, v) {
                    if (!this.get(k) && v !== '') this.values[k] = v;
                },
                // Return the value for a key, or a default value.
                // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
                // a number of possible default values as properties where 'defaultKey' is
                // the key of the property that will be chosen; otherwise it's assumed to be
                // a single value.
                get: function get(k, dflt, defaultKey) {
                    if (defaultKey) return this.has(k) ? this.values[k] : dflt[defaultKey];
                    return this.has(k) ? this.values[k] : dflt;
                },
                // Check whether we have a value for a key.
                has: function has(k) {
                    return k in this.values;
                },
                // Accept a setting if its one of the given alternatives.
                alt: function alt(k, v, a) {
                    for(var n = 0; n < a.length; ++n)if (v === a[n]) {
                        this.set(k, v);
                        break;
                    }
                },
                // Accept a setting if its a valid (signed) integer.
                integer: function integer(k, v) {
                    if (/^-?\d+$/.test(v)) // integer
                    this.set(k, parseInt(v, 10));
                },
                // Accept a setting if its a valid percentage.
                percent: function percent(k, v) {
                    var m;
                    if (m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/)) {
                        v = parseFloat(v);
                        if (v >= 0 && v <= 100) {
                            this.set(k, v);
                            return true;
                        }
                    }
                    return false;
                }
            }; // Helper function to parse input into groups separated by 'groupDelim', and
            // interprete each group as a key/value pair separated by 'keyValueDelim'.
            function parseOptions(input, callback, keyValueDelim, groupDelim) {
                var groups = groupDelim ? input.split(groupDelim) : [
                    input
                ];
                for(var i in groups){
                    if (typeof groups[i] !== 'string') continue;
                    var kv = groups[i].split(keyValueDelim);
                    if (kv.length !== 2) continue;
                    var k = kv[0];
                    var v = kv[1];
                    callback(k, v);
                }
            }
            var defaults = new vttcue(0, 0, 0); // 'middle' was changed to 'center' in the spec: https://github.com/w3c/webvtt/pull/244
            //  Safari doesn't yet support this change, but FF and Chrome do.
            var center = defaults.align === 'middle' ? 'middle' : 'center';
            function parseCue(input, cue, regionList) {
                // Remember the original input if we need to throw an error.
                var oInput = input; // 4.1 WebVTT timestamp
                function consumeTimeStamp() {
                    var ts = parseTimeStamp(input);
                    if (ts === null) throw new Error('Malformed timestamp: ' + oInput);
                     // Remove time stamp from input.
                    input = input.replace(/^[^\sa-zA-Z-]+/, '');
                    return ts;
                } // 4.4.2 WebVTT cue settings
                function consumeCueSettings(input1, cue1) {
                    var settings = new Settings();
                    parseOptions(input1, function(k, v) {
                        switch(k){
                            case 'region':
                                // Find the last region we parsed with the same region id.
                                for(var i = regionList.length - 1; i >= 0; i--)if (regionList[i].id === v) {
                                    settings.set(k, regionList[i].region);
                                    break;
                                }
                                break;
                            case 'vertical':
                                settings.alt(k, v, [
                                    'rl',
                                    'lr'
                                ]);
                                break;
                            case 'line':
                                var vals = v.split(','), vals0 = vals[0];
                                settings.integer(k, vals0);
                                if (settings.percent(k, vals0)) settings.set('snapToLines', false);
                                settings.alt(k, vals0, [
                                    'auto'
                                ]);
                                if (vals.length === 2) settings.alt('lineAlign', vals[1], [
                                    'start',
                                    center,
                                    'end'
                                ]);
                                break;
                            case 'position':
                                vals = v.split(',');
                                settings.percent(k, vals[0]);
                                if (vals.length === 2) settings.alt('positionAlign', vals[1], [
                                    'start',
                                    center,
                                    'end',
                                    'line-left',
                                    'line-right',
                                    'auto'
                                ]);
                                break;
                            case 'size':
                                settings.percent(k, v);
                                break;
                            case 'align':
                                settings.alt(k, v, [
                                    'start',
                                    center,
                                    'end',
                                    'left',
                                    'right'
                                ]);
                                break;
                        }
                    }, /:/, /\s/); // Apply default values for any missing fields.
                    cue1.region = settings.get('region', null);
                    cue1.vertical = settings.get('vertical', '');
                    var line = settings.get('line', 'auto');
                    if (line === 'auto' && defaults.line === -1) // set numeric line number for Safari
                    line = -1;
                    cue1.line = line;
                    cue1.lineAlign = settings.get('lineAlign', 'start');
                    cue1.snapToLines = settings.get('snapToLines', true);
                    cue1.size = settings.get('size', 100);
                    cue1.align = settings.get('align', center);
                    var position = settings.get('position', 'auto');
                    if (position === 'auto' && defaults.position === 50) // set numeric position for Safari
                    position = cue1.align === 'start' || cue1.align === 'left' ? 0 : cue1.align === 'end' || cue1.align === 'right' ? 100 : 50;
                    cue1.position = position;
                }
                function skipWhitespace() {
                    input = input.replace(/^\s+/, '');
                } // 4.1 WebVTT cue timings.
                skipWhitespace();
                cue.startTime = consumeTimeStamp(); // (1) collect cue start time
                skipWhitespace();
                if (input.substr(0, 3) !== '-->') // (3) next characters must match '-->'
                throw new Error('Malformed time stamp (time stamps must be separated by \'-->\'): ' + oInput);
                input = input.substr(3);
                skipWhitespace();
                cue.endTime = consumeTimeStamp(); // (5) collect cue end time
                // 4.1 WebVTT cue settings list.
                skipWhitespace();
                consumeCueSettings(input, cue);
            }
            function fixLineBreaks(input) {
                return input.replace(/<br(?: \/)?>/gi, '\n');
            }
            VTTParser.prototype = {
                parse: function parse(data) {
                    var self = this; // If there is no data then we won't decode it, but will just try to parse
                    // whatever is in buffer already. This may occur in circumstances, for
                    // example when flush() is called.
                    if (data) // Try to decode the data that we received.
                    self.buffer += self.decoder.decode(data, {
                        stream: true
                    });
                    function collectNextLine() {
                        var buffer = self.buffer;
                        var pos = 0;
                        buffer = fixLineBreaks(buffer);
                        while(pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n')++pos;
                        var line = buffer.substr(0, pos); // Advance the buffer early in case we fail below.
                        if (buffer[pos] === '\r') ++pos;
                        if (buffer[pos] === '\n') ++pos;
                        self.buffer = buffer.substr(pos);
                        return line;
                    } // 3.2 WebVTT metadata header syntax
                    function parseHeader(input) {
                        parseOptions(input, function(k, v) {
                        }, /:/);
                    } // 5.1 WebVTT file parsing.
                    try {
                        var line;
                        if (self.state === 'INITIAL') {
                            // We can't start parsing until we have the first line.
                            if (!/\r\n|\n/.test(self.buffer)) return this;
                            line = collectNextLine(); // strip of UTF-8 BOM if any
                            // https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8
                            var m = line.match(/^(ï»¿)?WEBVTT([ \t].*)?$/);
                            if (!m || !m[0]) throw new Error('Malformed WebVTT signature.');
                            self.state = 'HEADER';
                        }
                        var alreadyCollectedLine = false;
                        while(self.buffer){
                            // We can't parse a line until we have the full line.
                            if (!/\r\n|\n/.test(self.buffer)) return this;
                            if (!alreadyCollectedLine) line = collectNextLine();
                            else alreadyCollectedLine = false;
                            switch(self.state){
                                case 'HEADER':
                                    // 13-18 - Allow a header (metadata) under the WEBVTT line.
                                    if (/:/.test(line)) parseHeader(line);
                                    else if (!line) // An empty line terminates the header and starts the body (cues).
                                    self.state = 'ID';
                                    continue;
                                case 'NOTE':
                                    // Ignore NOTE blocks.
                                    if (!line) self.state = 'ID';
                                    continue;
                                case 'ID':
                                    // Check for the start of NOTE blocks.
                                    if (/^NOTE($|[ \t])/.test(line)) {
                                        self.state = 'NOTE';
                                        break;
                                    } // 19-29 - Allow any number of line terminators, then initialize new cue values.
                                    if (!line) continue;
                                    self.cue = new vttcue(0, 0, '');
                                    self.state = 'CUE'; // 30-39 - Check if self line contains an optional identifier or timing data.
                                    if (line.indexOf('-->') === -1) {
                                        self.cue.id = line;
                                        continue;
                                    }
                                // Process line as start of a cue.
                                /* falls through */ case 'CUE':
                                    // 40 - Collect cue timings and settings.
                                    try {
                                        parseCue(line, self.cue, self.regionList);
                                    } catch (e) {
                                        // In case of an error ignore rest of the cue.
                                        self.cue = null;
                                        self.state = 'BADCUE';
                                        continue;
                                    }
                                    self.state = 'CUETEXT';
                                    continue;
                                case 'CUETEXT':
                                    var hasSubstring = line.indexOf('-->') !== -1; // 34 - If we have an empty line then report the cue.
                                    // 35 - If we have the special substring '-->' then report the cue,
                                    // but do not collect the line as we need to process the current
                                    // one as a new cue.
                                    if (!line || hasSubstring && (alreadyCollectedLine = true)) {
                                        // We are done parsing self cue.
                                        if (self.oncue) self.oncue(self.cue);
                                        self.cue = null;
                                        self.state = 'ID';
                                        continue;
                                    }
                                    if (self.cue.text) self.cue.text += '\n';
                                    self.cue.text += line;
                                    continue;
                                case 'BADCUE':
                                    // BADCUE
                                    // 54-62 - Collect and discard the remaining cue.
                                    if (!line) self.state = 'ID';
                                    continue;
                            }
                        }
                    } catch (e) {
                        // If we are currently parsing a cue, report what we have.
                        if (self.state === 'CUETEXT' && self.cue && self.oncue) self.oncue(self.cue);
                        self.cue = null; // Enter BADWEBVTT state if header was not parsed correctly otherwise
                        // another exception occurred so enter BADCUE state.
                        self.state = self.state === 'INITIAL' ? 'BADWEBVTT' : 'BADCUE';
                    }
                    return this;
                },
                flush: function flush() {
                    var self = this;
                    try {
                        // Finish decoding the stream.
                        self.buffer += self.decoder.decode(); // Synthesize the end of the current cue or region.
                        if (self.cue || self.state === 'HEADER') {
                            self.buffer += '\n\n';
                            self.parse();
                        } // If we've flushed, parsed, and we're still on the INITIAL state then
                        // that means we don't have enough of the stream to parse the first
                        // line.
                        if (self.state === 'INITIAL') throw new Error('Malformed WebVTT signature.');
                    } catch (e) {
                        throw e;
                    }
                    if (self.onflush) self.onflush();
                    return this;
                }
            };
            /* harmony default export */ var vttparser = VTTParser;
            // CONCATENATED MODULE: ./src/utils/cues.ts
            function newCue(track, startTime, endTime, captionScreen) {
                var result = [];
                var row; // the type data states this is VTTCue, but it can potentially be a TextTrackCue on old browsers
                var cue;
                var indenting;
                var indent;
                var text;
                var VTTCue1 = window.VTTCue || TextTrackCue;
                for(var r = 0; r < captionScreen.rows.length; r++){
                    row = captionScreen.rows[r];
                    indenting = true;
                    indent = 0;
                    text = '';
                    if (!row.isEmpty()) {
                        for(var c = 0; c < row.chars.length; c++)if (row.chars[c].uchar.match(/\s/) && indenting) indent++;
                        else {
                            text += row.chars[c].uchar;
                            indenting = false;
                        }
                         // To be used for cleaning-up orphaned roll-up captions
                        row.cueStartTime = startTime; // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE
                        if (startTime === endTime) endTime += 0.0001;
                        cue = new VTTCue1(startTime, endTime, fixLineBreaks(text.trim()));
                        if (indent >= 16) indent--;
                        else indent++;
                         // VTTCue.line get's flakey when using controls, so let's now include line 13&14
                        // also, drop line 1 since it's to close to the top
                        if (navigator.userAgent.match(/Firefox\//)) cue.line = r + 1;
                        else cue.line = r > 7 ? r - 2 : r + 1;
                        cue.align = 'left'; // Clamp the position between 0 and 100 - if out of these bounds, Firefox throws an exception and captions break
                        cue.position = Math.max(0, Math.min(100, 100 * (indent / 32)));
                        result.push(cue);
                        if (track) track.addCue(cue);
                    }
                }
                return result;
            }
            // CONCATENATED MODULE: ./src/utils/cea-608-parser.ts
            /**
 *
 * This code was ported from the dash.js project at:
 *   https://github.com/Dash-Industry-Forum/dash.js/blob/development/externals/cea608-parser.js
 *   https://github.com/Dash-Industry-Forum/dash.js/commit/8269b26a761e0853bb21d78780ed945144ecdd4d#diff-71bc295a2d6b6b7093a1d3290d53a4b2
 *
 * The original copyright appears below:
 *
 * The copyright in this software is being made available under the BSD License,
 * included below. This software may be subject to other third party and contributor
 * rights, including patent rights, and no such rights are granted under this license.
 *
 * Copyright (c) 2015-2016, DASH Industry Forum.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *  1. Redistributions of source code must retain the above copyright notice, this
 *  list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation and/or
 *  other materials provided with the distribution.
 *  2. Neither the name of Dash Industry Forum nor the names of its
 *  contributors may be used to endorse or promote products derived from this software
 *  without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */ /**
 *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
 */ var specialCea608CharsCodes = {
                42: 225,
                // lowercase a, acute accent
                92: 233,
                // lowercase e, acute accent
                94: 237,
                // lowercase i, acute accent
                95: 243,
                // lowercase o, acute accent
                96: 250,
                // lowercase u, acute accent
                123: 231,
                // lowercase c with cedilla
                124: 247,
                // division symbol
                125: 209,
                // uppercase N tilde
                126: 241,
                // lowercase n tilde
                127: 9608,
                // Full block
                // THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
                // THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
                // THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
                128: 174,
                // Registered symbol (R)
                129: 176,
                // degree sign
                130: 189,
                // 1/2 symbol
                131: 191,
                // Inverted (open) question mark
                132: 8482,
                // Trademark symbol (TM)
                133: 162,
                // Cents symbol
                134: 163,
                // Pounds sterling
                135: 9834,
                // Music 8'th note
                136: 224,
                // lowercase a, grave accent
                137: 32,
                // transparent space (regular)
                138: 232,
                // lowercase e, grave accent
                139: 226,
                // lowercase a, circumflex accent
                140: 234,
                // lowercase e, circumflex accent
                141: 238,
                // lowercase i, circumflex accent
                142: 244,
                // lowercase o, circumflex accent
                143: 251,
                // lowercase u, circumflex accent
                // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
                // THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
                144: 193,
                // capital letter A with acute
                145: 201,
                // capital letter E with acute
                146: 211,
                // capital letter O with acute
                147: 218,
                // capital letter U with acute
                148: 220,
                // capital letter U with diaresis
                149: 252,
                // lowercase letter U with diaeresis
                150: 8216,
                // opening single quote
                151: 161,
                // inverted exclamation mark
                152: 42,
                // asterisk
                153: 8217,
                // closing single quote
                154: 9473,
                // box drawings heavy horizontal
                155: 169,
                // copyright sign
                156: 8480,
                // Service mark
                157: 8226,
                // (round) bullet
                158: 8220,
                // Left double quotation mark
                159: 8221,
                // Right double quotation mark
                160: 192,
                // uppercase A, grave accent
                161: 194,
                // uppercase A, circumflex
                162: 199,
                // uppercase C with cedilla
                163: 200,
                // uppercase E, grave accent
                164: 202,
                // uppercase E, circumflex
                165: 203,
                // capital letter E with diaresis
                166: 235,
                // lowercase letter e with diaresis
                167: 206,
                // uppercase I, circumflex
                168: 207,
                // uppercase I, with diaresis
                169: 239,
                // lowercase i, with diaresis
                170: 212,
                // uppercase O, circumflex
                171: 217,
                // uppercase U, grave accent
                172: 249,
                // lowercase u, grave accent
                173: 219,
                // uppercase U, circumflex
                174: 171,
                // left-pointing double angle quotation mark
                175: 187,
                // right-pointing double angle quotation mark
                // THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
                // THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
                176: 195,
                // Uppercase A, tilde
                177: 227,
                // Lowercase a, tilde
                178: 205,
                // Uppercase I, acute accent
                179: 204,
                // Uppercase I, grave accent
                180: 236,
                // Lowercase i, grave accent
                181: 210,
                // Uppercase O, grave accent
                182: 242,
                // Lowercase o, grave accent
                183: 213,
                // Uppercase O, tilde
                184: 245,
                // Lowercase o, tilde
                185: 123,
                // Open curly brace
                186: 125,
                // Closing curly brace
                187: 92,
                // Backslash
                188: 94,
                // Caret
                189: 95,
                // Underscore
                190: 124,
                // Pipe (vertical line)
                191: 8764,
                // Tilde operator
                192: 196,
                // Uppercase A, umlaut
                193: 228,
                // Lowercase A, umlaut
                194: 214,
                // Uppercase O, umlaut
                195: 246,
                // Lowercase o, umlaut
                196: 223,
                // Esszett (sharp S)
                197: 165,
                // Yen symbol
                198: 164,
                // Generic currency sign
                199: 9475,
                // Box drawings heavy vertical
                200: 197,
                // Uppercase A, ring
                201: 229,
                // Lowercase A, ring
                202: 216,
                // Uppercase O, stroke
                203: 248,
                // Lowercase o, strok
                204: 9487,
                // Box drawings heavy down and right
                205: 9491,
                // Box drawings heavy down and left
                206: 9495,
                // Box drawings heavy up and right
                207: 9499 // Box drawings heavy up and left
            };
            /**
 * Utils
 */ var getCharForByte = function getCharForByte1(_byte) {
                var charCode = _byte;
                if (specialCea608CharsCodes.hasOwnProperty(_byte)) charCode = specialCea608CharsCodes[_byte];
                return String.fromCharCode(charCode);
            };
            var NR_ROWS = 15;
            var NR_COLS = 100; // Tables to look up row from PAC data
            var rowsLowCh1 = {
                17: 1,
                18: 3,
                21: 5,
                22: 7,
                23: 9,
                16: 11,
                19: 12,
                20: 14
            };
            var rowsHighCh1 = {
                17: 2,
                18: 4,
                21: 6,
                22: 8,
                23: 10,
                19: 13,
                20: 15
            };
            var rowsLowCh2 = {
                25: 1,
                26: 3,
                29: 5,
                30: 7,
                31: 9,
                24: 11,
                27: 12,
                28: 14
            };
            var rowsHighCh2 = {
                25: 2,
                26: 4,
                29: 6,
                30: 8,
                31: 10,
                27: 13,
                28: 15
            };
            var backgroundColors = [
                'white',
                'green',
                'blue',
                'cyan',
                'red',
                'yellow',
                'magenta',
                'black',
                'transparent'
            ];
            var VerboseLevel;
            (function(VerboseLevel1) {
                VerboseLevel1[VerboseLevel1["ERROR"] = 0] = "ERROR";
                VerboseLevel1[VerboseLevel1["TEXT"] = 1] = "TEXT";
                VerboseLevel1[VerboseLevel1["WARNING"] = 2] = "WARNING";
                VerboseLevel1[VerboseLevel1["INFO"] = 2] = "INFO";
                VerboseLevel1[VerboseLevel1["DEBUG"] = 3] = "DEBUG";
                VerboseLevel1[VerboseLevel1["DATA"] = 3] = "DATA";
            })(VerboseLevel || (VerboseLevel = {
            }));
            var cea_608_parser_CaptionsLogger = /*#__PURE__*/ function() {
                function CaptionsLogger() {
                    this.time = null;
                    this.verboseLevel = VerboseLevel.ERROR;
                }
                var _proto = CaptionsLogger.prototype;
                _proto.log = function log(severity, msg) {
                    if (this.verboseLevel >= severity) logger["logger"].log(this.time + " [" + severity + "] " + msg);
                };
                return CaptionsLogger;
            }();
            var numArrayToHexArray = function numArrayToHexArray1(numArray) {
                var hexArray = [];
                for(var j = 0; j < numArray.length; j++)hexArray.push(numArray[j].toString(16));
                return hexArray;
            };
            var PenState = /*#__PURE__*/ function() {
                function PenState1(foreground, underline, italics, background, flash) {
                    this.foreground = void 0;
                    this.underline = void 0;
                    this.italics = void 0;
                    this.background = void 0;
                    this.flash = void 0;
                    this.foreground = foreground || 'white';
                    this.underline = underline || false;
                    this.italics = italics || false;
                    this.background = background || 'black';
                    this.flash = flash || false;
                }
                var _proto2 = PenState1.prototype;
                _proto2.reset = function reset() {
                    this.foreground = 'white';
                    this.underline = false;
                    this.italics = false;
                    this.background = 'black';
                    this.flash = false;
                };
                _proto2.setStyles = function setStyles(styles) {
                    var attribs = [
                        'foreground',
                        'underline',
                        'italics',
                        'background',
                        'flash'
                    ];
                    for(var i = 0; i < attribs.length; i++){
                        var style = attribs[i];
                        if (styles.hasOwnProperty(style)) this[style] = styles[style];
                    }
                };
                _proto2.isDefault = function isDefault() {
                    return this.foreground === 'white' && !this.underline && !this.italics && this.background === 'black' && !this.flash;
                };
                _proto2.equals = function equals(other) {
                    return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;
                };
                _proto2.copy = function copy(newPenState) {
                    this.foreground = newPenState.foreground;
                    this.underline = newPenState.underline;
                    this.italics = newPenState.italics;
                    this.background = newPenState.background;
                    this.flash = newPenState.flash;
                };
                _proto2.toString = function toString() {
                    return 'color=' + this.foreground + ', underline=' + this.underline + ', italics=' + this.italics + ', background=' + this.background + ', flash=' + this.flash;
                };
                return PenState1;
            }();
            /**
 * Unicode character with styling and background.
 * @constructor
 */ var StyledUnicodeChar = /*#__PURE__*/ function() {
                function StyledUnicodeChar1(uchar, foreground, underline, italics, background, flash) {
                    this.uchar = void 0;
                    this.penState = void 0;
                    this.uchar = uchar || ' '; // unicode character
                    this.penState = new PenState(foreground, underline, italics, background, flash);
                }
                var _proto3 = StyledUnicodeChar1.prototype;
                _proto3.reset = function reset() {
                    this.uchar = ' ';
                    this.penState.reset();
                };
                _proto3.setChar = function setChar(uchar, newPenState) {
                    this.uchar = uchar;
                    this.penState.copy(newPenState);
                };
                _proto3.setPenState = function setPenState(newPenState) {
                    this.penState.copy(newPenState);
                };
                _proto3.equals = function equals(other) {
                    return this.uchar === other.uchar && this.penState.equals(other.penState);
                };
                _proto3.copy = function copy(newChar) {
                    this.uchar = newChar.uchar;
                    this.penState.copy(newChar.penState);
                };
                _proto3.isEmpty = function isEmpty() {
                    return this.uchar === ' ' && this.penState.isDefault();
                };
                return StyledUnicodeChar1;
            }();
            /**
 * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
 * @constructor
 */ var Row = /*#__PURE__*/ function() {
                function Row1(logger1) {
                    this.chars = void 0;
                    this.pos = void 0;
                    this.currPenState = void 0;
                    this.cueStartTime = void 0;
                    this.logger = void 0;
                    this.chars = [];
                    for(var i = 0; i < NR_COLS; i++)this.chars.push(new StyledUnicodeChar());
                    this.logger = logger1;
                    this.pos = 0;
                    this.currPenState = new PenState();
                }
                var _proto4 = Row1.prototype;
                _proto4.equals = function equals(other) {
                    var equal = true;
                    for(var i = 0; i < NR_COLS; i++)if (!this.chars[i].equals(other.chars[i])) {
                        equal = false;
                        break;
                    }
                    return equal;
                };
                _proto4.copy = function copy(other) {
                    for(var i = 0; i < NR_COLS; i++)this.chars[i].copy(other.chars[i]);
                };
                _proto4.isEmpty = function isEmpty() {
                    var empty = true;
                    for(var i = 0; i < NR_COLS; i++)if (!this.chars[i].isEmpty()) {
                        empty = false;
                        break;
                    }
                    return empty;
                };
                _proto4.setCursor = function setCursor(absPos) {
                    if (this.pos !== absPos) this.pos = absPos;
                    if (this.pos < 0) {
                        this.logger.log(VerboseLevel.DEBUG, 'Negative cursor position ' + this.pos);
                        this.pos = 0;
                    } else if (this.pos > NR_COLS) {
                        this.logger.log(VerboseLevel.DEBUG, 'Too large cursor position ' + this.pos);
                        this.pos = NR_COLS;
                    }
                };
                _proto4.moveCursor = function moveCursor(relPos) {
                    var newPos = this.pos + relPos;
                    if (relPos > 1) for(var i = this.pos + 1; i < newPos + 1; i++)this.chars[i].setPenState(this.currPenState);
                    this.setCursor(newPos);
                };
                _proto4.backSpace = function backSpace() {
                    this.moveCursor(-1);
                    this.chars[this.pos].setChar(' ', this.currPenState);
                };
                _proto4.insertChar = function insertChar(_byte2) {
                    if (_byte2 >= 144) // Extended char
                    this.backSpace();
                    var _char = getCharForByte(_byte2);
                    if (this.pos >= NR_COLS) {
                        this.logger.log(VerboseLevel.ERROR, 'Cannot insert ' + _byte2.toString(16) + ' (' + _char + ') at position ' + this.pos + '. Skipping it!');
                        return;
                    }
                    this.chars[this.pos].setChar(_char, this.currPenState);
                    this.moveCursor(1);
                };
                _proto4.clearFromPos = function clearFromPos(startPos) {
                    var i;
                    for(i = startPos; i < NR_COLS; i++)this.chars[i].reset();
                };
                _proto4.clear = function clear() {
                    this.clearFromPos(0);
                    this.pos = 0;
                    this.currPenState.reset();
                };
                _proto4.clearToEndOfRow = function clearToEndOfRow() {
                    this.clearFromPos(this.pos);
                };
                _proto4.getTextString = function getTextString() {
                    var chars = [];
                    var empty = true;
                    for(var i = 0; i < NR_COLS; i++){
                        var _char2 = this.chars[i].uchar;
                        if (_char2 !== ' ') empty = false;
                        chars.push(_char2);
                    }
                    if (empty) return '';
                    else return chars.join('');
                };
                _proto4.setPenStyles = function setPenStyles(styles) {
                    this.currPenState.setStyles(styles);
                    var currChar = this.chars[this.pos];
                    currChar.setPenState(this.currPenState);
                };
                return Row1;
            }();
            /**
 * Keep a CEA-608 screen of 32x15 styled characters
 * @constructor
 */ var CaptionScreen = /*#__PURE__*/ function() {
                function CaptionScreen1(logger1) {
                    this.rows = void 0;
                    this.currRow = void 0;
                    this.nrRollUpRows = void 0;
                    this.lastOutputScreen = void 0;
                    this.logger = void 0;
                    this.rows = [];
                    for(var i = 0; i < NR_ROWS; i++)this.rows.push(new Row(logger1));
                     // Note that we use zero-based numbering (0-14)
                    this.logger = logger1;
                    this.currRow = NR_ROWS - 1;
                    this.nrRollUpRows = null;
                    this.lastOutputScreen = null;
                    this.reset();
                }
                var _proto5 = CaptionScreen1.prototype;
                _proto5.reset = function reset() {
                    for(var i = 0; i < NR_ROWS; i++)this.rows[i].clear();
                    this.currRow = NR_ROWS - 1;
                };
                _proto5.equals = function equals(other) {
                    var equal = true;
                    for(var i = 0; i < NR_ROWS; i++)if (!this.rows[i].equals(other.rows[i])) {
                        equal = false;
                        break;
                    }
                    return equal;
                };
                _proto5.copy = function copy(other) {
                    for(var i = 0; i < NR_ROWS; i++)this.rows[i].copy(other.rows[i]);
                };
                _proto5.isEmpty = function isEmpty() {
                    var empty = true;
                    for(var i = 0; i < NR_ROWS; i++)if (!this.rows[i].isEmpty()) {
                        empty = false;
                        break;
                    }
                    return empty;
                };
                _proto5.backSpace = function backSpace() {
                    var row = this.rows[this.currRow];
                    row.backSpace();
                };
                _proto5.clearToEndOfRow = function clearToEndOfRow() {
                    var row = this.rows[this.currRow];
                    row.clearToEndOfRow();
                };
                _proto5.insertChar = function insertChar(_char3) {
                    var row = this.rows[this.currRow];
                    row.insertChar(_char3);
                };
                _proto5.setPen = function setPen(styles) {
                    var row = this.rows[this.currRow];
                    row.setPenStyles(styles);
                };
                _proto5.moveCursor = function moveCursor(relPos) {
                    var row = this.rows[this.currRow];
                    row.moveCursor(relPos);
                };
                _proto5.setCursor = function setCursor(absPos) {
                    this.logger.log(VerboseLevel.INFO, 'setCursor: ' + absPos);
                    var row = this.rows[this.currRow];
                    row.setCursor(absPos);
                };
                _proto5.setPAC = function setPAC(pacData) {
                    this.logger.log(VerboseLevel.INFO, 'pacData = ' + JSON.stringify(pacData));
                    var newRow = pacData.row - 1;
                    if (this.nrRollUpRows && newRow < this.nrRollUpRows - 1) newRow = this.nrRollUpRows - 1;
                     // Make sure this only affects Roll-up Captions by checking this.nrRollUpRows
                    if (this.nrRollUpRows && this.currRow !== newRow) {
                        // clear all rows first
                        for(var i = 0; i < NR_ROWS; i++)this.rows[i].clear();
                         // Copy this.nrRollUpRows rows from lastOutputScreen and place it in the newRow location
                        // topRowIndex - the start of rows to copy (inclusive index)
                        var topRowIndex = this.currRow + 1 - this.nrRollUpRows; // We only copy if the last position was already shown.
                        // We use the cueStartTime value to check this.
                        var lastOutputScreen = this.lastOutputScreen;
                        if (lastOutputScreen) {
                            var prevLineTime = lastOutputScreen.rows[topRowIndex].cueStartTime;
                            var time = this.logger.time;
                            if (prevLineTime && time !== null && prevLineTime < time) for(var _i = 0; _i < this.nrRollUpRows; _i++)this.rows[newRow - this.nrRollUpRows + _i + 1].copy(lastOutputScreen.rows[topRowIndex + _i]);
                        }
                    }
                    this.currRow = newRow;
                    var row = this.rows[this.currRow];
                    if (pacData.indent !== null) {
                        var indent = pacData.indent;
                        var prevPos = Math.max(indent - 1, 0);
                        row.setCursor(pacData.indent);
                        pacData.color = row.chars[prevPos].penState.foreground;
                    }
                    var styles = {
                        foreground: pacData.color,
                        underline: pacData.underline,
                        italics: pacData.italics,
                        background: 'black',
                        flash: false
                    };
                    this.setPen(styles);
                };
                _proto5.setBkgData = function setBkgData(bkgData) {
                    this.logger.log(VerboseLevel.INFO, 'bkgData = ' + JSON.stringify(bkgData));
                    this.backSpace();
                    this.setPen(bkgData);
                    this.insertChar(32); // Space
                };
                _proto5.setRollUpRows = function setRollUpRows(nrRows) {
                    this.nrRollUpRows = nrRows;
                };
                _proto5.rollUp = function rollUp() {
                    if (this.nrRollUpRows === null) {
                        this.logger.log(VerboseLevel.DEBUG, 'roll_up but nrRollUpRows not set yet');
                        return; // Not properly setup
                    }
                    this.logger.log(VerboseLevel.TEXT, this.getDisplayText());
                    var topRowIndex = this.currRow + 1 - this.nrRollUpRows;
                    var topRow = this.rows.splice(topRowIndex, 1)[0];
                    topRow.clear();
                    this.rows.splice(this.currRow, 0, topRow);
                    this.logger.log(VerboseLevel.INFO, 'Rolling up'); // this.logger.log(VerboseLevel.TEXT, this.get_display_text())
                };
                _proto5.getDisplayText = function getDisplayText(asOneRow) {
                    asOneRow = asOneRow || false;
                    var displayText = [];
                    var text = '';
                    var rowNr = -1;
                    for(var i = 0; i < NR_ROWS; i++){
                        var rowText = this.rows[i].getTextString();
                        if (rowText) {
                            rowNr = i + 1;
                            if (asOneRow) displayText.push('Row ' + rowNr + ': \'' + rowText + '\'');
                            else displayText.push(rowText.trim());
                        }
                    }
                    if (displayText.length > 0) {
                        if (asOneRow) text = '[' + displayText.join(' | ') + ']';
                        else text = displayText.join('\n');
                    }
                    return text;
                };
                _proto5.getTextAndFormat = function getTextAndFormat() {
                    return this.rows;
                };
                return CaptionScreen1;
            }(); // var modes = ['MODE_ROLL-UP', 'MODE_POP-ON', 'MODE_PAINT-ON', 'MODE_TEXT'];
            var Cea608Channel = /*#__PURE__*/ function() {
                function Cea608Channel1(channelNumber, outputFilter, logger1) {
                    this.chNr = void 0;
                    this.outputFilter = void 0;
                    this.mode = void 0;
                    this.verbose = void 0;
                    this.displayedMemory = void 0;
                    this.nonDisplayedMemory = void 0;
                    this.lastOutputScreen = void 0;
                    this.currRollUpRow = void 0;
                    this.writeScreen = void 0;
                    this.cueStartTime = void 0;
                    this.logger = void 0;
                    this.chNr = channelNumber;
                    this.outputFilter = outputFilter;
                    this.mode = null;
                    this.verbose = 0;
                    this.displayedMemory = new CaptionScreen(logger1);
                    this.nonDisplayedMemory = new CaptionScreen(logger1);
                    this.lastOutputScreen = new CaptionScreen(logger1);
                    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
                    this.writeScreen = this.displayedMemory;
                    this.mode = null;
                    this.cueStartTime = null; // Keeps track of where a cue started.
                    this.logger = logger1;
                }
                var _proto6 = Cea608Channel1.prototype;
                _proto6.reset = function reset() {
                    this.mode = null;
                    this.displayedMemory.reset();
                    this.nonDisplayedMemory.reset();
                    this.lastOutputScreen.reset();
                    this.outputFilter.reset();
                    this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];
                    this.writeScreen = this.displayedMemory;
                    this.mode = null;
                    this.cueStartTime = null;
                };
                _proto6.getHandler = function getHandler() {
                    return this.outputFilter;
                };
                _proto6.setHandler = function setHandler(newHandler) {
                    this.outputFilter = newHandler;
                };
                _proto6.setPAC = function setPAC(pacData) {
                    this.writeScreen.setPAC(pacData);
                };
                _proto6.setBkgData = function setBkgData(bkgData) {
                    this.writeScreen.setBkgData(bkgData);
                };
                _proto6.setMode = function setMode(newMode) {
                    if (newMode === this.mode) return;
                    this.mode = newMode;
                    this.logger.log(VerboseLevel.INFO, 'MODE=' + newMode);
                    if (this.mode === 'MODE_POP-ON') this.writeScreen = this.nonDisplayedMemory;
                    else {
                        this.writeScreen = this.displayedMemory;
                        this.writeScreen.reset();
                    }
                    if (this.mode !== 'MODE_ROLL-UP') {
                        this.displayedMemory.nrRollUpRows = null;
                        this.nonDisplayedMemory.nrRollUpRows = null;
                    }
                    this.mode = newMode;
                };
                _proto6.insertChars = function insertChars(chars) {
                    for(var i = 0; i < chars.length; i++)this.writeScreen.insertChar(chars[i]);
                    var screen = this.writeScreen === this.displayedMemory ? 'DISP' : 'NON_DISP';
                    this.logger.log(VerboseLevel.INFO, screen + ': ' + this.writeScreen.getDisplayText(true));
                    if (this.mode === 'MODE_PAINT-ON' || this.mode === 'MODE_ROLL-UP') {
                        this.logger.log(VerboseLevel.TEXT, 'DISPLAYED: ' + this.displayedMemory.getDisplayText(true));
                        this.outputDataUpdate();
                    }
                };
                _proto6.ccRCL = function ccRCL() {
                    // Resume Caption Loading (switch mode to Pop On)
                    this.logger.log(VerboseLevel.INFO, 'RCL - Resume Caption Loading');
                    this.setMode('MODE_POP-ON');
                };
                _proto6.ccBS = function ccBS() {
                    // BackSpace
                    this.logger.log(VerboseLevel.INFO, 'BS - BackSpace');
                    if (this.mode === 'MODE_TEXT') return;
                    this.writeScreen.backSpace();
                    if (this.writeScreen === this.displayedMemory) this.outputDataUpdate();
                };
                _proto6.ccAOF = function ccAOF() {
                };
                _proto6.ccAON = function ccAON() {
                };
                _proto6.ccDER = function ccDER() {
                    // Delete to End of Row
                    this.logger.log(VerboseLevel.INFO, 'DER- Delete to End of Row');
                    this.writeScreen.clearToEndOfRow();
                    this.outputDataUpdate();
                };
                _proto6.ccRU = function ccRU(nrRows) {
                    // Roll-Up Captions-2,3,or 4 Rows
                    this.logger.log(VerboseLevel.INFO, 'RU(' + nrRows + ') - Roll Up');
                    this.writeScreen = this.displayedMemory;
                    this.setMode('MODE_ROLL-UP');
                    this.writeScreen.setRollUpRows(nrRows);
                };
                _proto6.ccFON = function ccFON() {
                    // Flash On
                    this.logger.log(VerboseLevel.INFO, 'FON - Flash On');
                    this.writeScreen.setPen({
                        flash: true
                    });
                };
                _proto6.ccRDC = function ccRDC() {
                    // Resume Direct Captioning (switch mode to PaintOn)
                    this.logger.log(VerboseLevel.INFO, 'RDC - Resume Direct Captioning');
                    this.setMode('MODE_PAINT-ON');
                };
                _proto6.ccTR = function ccTR() {
                    // Text Restart in text mode (not supported, however)
                    this.logger.log(VerboseLevel.INFO, 'TR');
                    this.setMode('MODE_TEXT');
                };
                _proto6.ccRTD = function ccRTD() {
                    // Resume Text Display in Text mode (not supported, however)
                    this.logger.log(VerboseLevel.INFO, 'RTD');
                    this.setMode('MODE_TEXT');
                };
                _proto6.ccEDM = function ccEDM() {
                    // Erase Displayed Memory
                    this.logger.log(VerboseLevel.INFO, 'EDM - Erase Displayed Memory');
                    this.displayedMemory.reset();
                    this.outputDataUpdate(true);
                };
                _proto6.ccCR = function ccCR() {
                    // Carriage Return
                    this.logger.log(VerboseLevel.INFO, 'CR - Carriage Return');
                    this.writeScreen.rollUp();
                    this.outputDataUpdate(true);
                };
                _proto6.ccENM = function ccENM() {
                    // Erase Non-Displayed Memory
                    this.logger.log(VerboseLevel.INFO, 'ENM - Erase Non-displayed Memory');
                    this.nonDisplayedMemory.reset();
                };
                _proto6.ccEOC = function ccEOC() {
                    // End of Caption (Flip Memories)
                    this.logger.log(VerboseLevel.INFO, 'EOC - End Of Caption');
                    if (this.mode === 'MODE_POP-ON') {
                        var tmp = this.displayedMemory;
                        this.displayedMemory = this.nonDisplayedMemory;
                        this.nonDisplayedMemory = tmp;
                        this.writeScreen = this.nonDisplayedMemory;
                        this.logger.log(VerboseLevel.TEXT, 'DISP: ' + this.displayedMemory.getDisplayText());
                    }
                    this.outputDataUpdate(true);
                };
                _proto6.ccTO = function ccTO(nrCols) {
                    // Tab Offset 1,2, or 3 columns
                    this.logger.log(VerboseLevel.INFO, 'TO(' + nrCols + ') - Tab Offset');
                    this.writeScreen.moveCursor(nrCols);
                };
                _proto6.ccMIDROW = function ccMIDROW(secondByte) {
                    // Parse MIDROW command
                    var styles = {
                        flash: false
                    };
                    styles.underline = secondByte % 2 === 1;
                    styles.italics = secondByte >= 46;
                    if (!styles.italics) {
                        var colorIndex = Math.floor(secondByte / 2) - 16;
                        var colors = [
                            'white',
                            'green',
                            'blue',
                            'cyan',
                            'red',
                            'yellow',
                            'magenta'
                        ];
                        styles.foreground = colors[colorIndex];
                    } else styles.foreground = 'white';
                    this.logger.log(VerboseLevel.INFO, 'MIDROW: ' + JSON.stringify(styles));
                    this.writeScreen.setPen(styles);
                };
                _proto6.outputDataUpdate = function outputDataUpdate(dispatch) {
                    if (dispatch === void 0) dispatch = false;
                    var time = this.logger.time;
                    if (time === null) return;
                    if (this.outputFilter) {
                        if (this.cueStartTime === null && !this.displayedMemory.isEmpty()) // Start of a new cue
                        this.cueStartTime = time;
                        else if (!this.displayedMemory.equals(this.lastOutputScreen)) {
                            this.outputFilter.newCue(this.cueStartTime, time, this.lastOutputScreen);
                            if (dispatch && this.outputFilter.dispatchCue) this.outputFilter.dispatchCue();
                            this.cueStartTime = this.displayedMemory.isEmpty() ? null : time;
                        }
                        this.lastOutputScreen.copy(this.displayedMemory);
                    }
                };
                _proto6.cueSplitAtTime = function cueSplitAtTime(t) {
                    if (this.outputFilter) {
                        if (!this.displayedMemory.isEmpty()) {
                            if (this.outputFilter.newCue) this.outputFilter.newCue(this.cueStartTime, t, this.displayedMemory);
                            this.cueStartTime = t;
                        }
                    }
                };
                return Cea608Channel1;
            }();
            var Cea608Parser = /*#__PURE__*/ function() {
                function Cea608Parser1(field, out1, out2) {
                    this.channels = void 0;
                    this.currentChannel = 0;
                    this.cmdHistory = void 0;
                    this.logger = void 0;
                    var logger1 = new cea_608_parser_CaptionsLogger();
                    this.channels = [
                        null,
                        new Cea608Channel(field, out1, logger1),
                        new Cea608Channel(field + 1, out2, logger1)
                    ];
                    this.cmdHistory = createCmdHistory();
                    this.logger = logger1;
                }
                var _proto7 = Cea608Parser1.prototype;
                _proto7.getHandler = function getHandler(channel) {
                    return this.channels[channel].getHandler();
                };
                _proto7.setHandler = function setHandler(channel, newHandler) {
                    this.channels[channel].setHandler(newHandler);
                };
                _proto7.addData = function addData(time, byteList) {
                    var cmdFound;
                    var a;
                    var b;
                    var charsFound = false;
                    this.logger.time = time;
                    for(var i = 0; i < byteList.length; i += 2){
                        a = byteList[i] & 127;
                        b = byteList[i + 1] & 127;
                        if (a === 0 && b === 0) continue;
                        else this.logger.log(VerboseLevel.DATA, '[' + numArrayToHexArray([
                            byteList[i],
                            byteList[i + 1]
                        ]) + '] -> (' + numArrayToHexArray([
                            a,
                            b
                        ]) + ')');
                        cmdFound = this.parseCmd(a, b);
                        if (!cmdFound) cmdFound = this.parseMidrow(a, b);
                        if (!cmdFound) cmdFound = this.parsePAC(a, b);
                        if (!cmdFound) cmdFound = this.parseBackgroundAttributes(a, b);
                        if (!cmdFound) {
                            charsFound = this.parseChars(a, b);
                            if (charsFound) {
                                var currChNr = this.currentChannel;
                                if (currChNr && currChNr > 0) {
                                    var channel = this.channels[currChNr];
                                    channel.insertChars(charsFound);
                                } else this.logger.log(VerboseLevel.WARNING, 'No channel found yet. TEXT-MODE?');
                            }
                        }
                        if (!cmdFound && !charsFound) this.logger.log(VerboseLevel.WARNING, 'Couldn\'t parse cleaned data ' + numArrayToHexArray([
                            a,
                            b
                        ]) + ' orig: ' + numArrayToHexArray([
                            byteList[i],
                            byteList[i + 1]
                        ]));
                    }
                };
                _proto7.parseCmd = function parseCmd(a, b) {
                    var cmdHistory = this.cmdHistory;
                    var cond1 = (a === 20 || a === 28 || a === 21 || a === 29) && b >= 32 && b <= 47;
                    var cond2 = (a === 23 || a === 31) && b >= 33 && b <= 35;
                    if (!(cond1 || cond2)) return false;
                    if (hasCmdRepeated(a, b, cmdHistory)) {
                        setLastCmd(null, null, cmdHistory);
                        this.logger.log(VerboseLevel.DEBUG, 'Repeated command (' + numArrayToHexArray([
                            a,
                            b
                        ]) + ') is dropped');
                        return true;
                    }
                    var chNr = a === 20 || a === 21 || a === 23 ? 1 : 2;
                    var channel = this.channels[chNr];
                    if (a === 20 || a === 21 || a === 28 || a === 29) {
                        if (b === 32) channel.ccRCL();
                        else if (b === 33) channel.ccBS();
                        else if (b === 34) channel.ccAOF();
                        else if (b === 35) channel.ccAON();
                        else if (b === 36) channel.ccDER();
                        else if (b === 37) channel.ccRU(2);
                        else if (b === 38) channel.ccRU(3);
                        else if (b === 39) channel.ccRU(4);
                        else if (b === 40) channel.ccFON();
                        else if (b === 41) channel.ccRDC();
                        else if (b === 42) channel.ccTR();
                        else if (b === 43) channel.ccRTD();
                        else if (b === 44) channel.ccEDM();
                        else if (b === 45) channel.ccCR();
                        else if (b === 46) channel.ccENM();
                        else if (b === 47) channel.ccEOC();
                    } else // a == 0x17 || a == 0x1F
                    channel.ccTO(b - 32);
                    setLastCmd(a, b, cmdHistory);
                    this.currentChannel = chNr;
                    return true;
                };
                _proto7.parseMidrow = function parseMidrow(a, b) {
                    var chNr = 0;
                    if ((a === 17 || a === 25) && b >= 32 && b <= 47) {
                        if (a === 17) chNr = 1;
                        else chNr = 2;
                        if (chNr !== this.currentChannel) {
                            this.logger.log(VerboseLevel.ERROR, 'Mismatch channel in midrow parsing');
                            return false;
                        }
                        var channel = this.channels[chNr];
                        if (!channel) return false;
                        channel.ccMIDROW(b);
                        this.logger.log(VerboseLevel.DEBUG, 'MIDROW (' + numArrayToHexArray([
                            a,
                            b
                        ]) + ')');
                        return true;
                    }
                    return false;
                };
                _proto7.parsePAC = function parsePAC(a, b) {
                    var row;
                    var cmdHistory = this.cmdHistory;
                    var case1 = (a >= 17 && a <= 23 || a >= 25 && a <= 31) && b >= 64 && b <= 127;
                    var case2 = (a === 16 || a === 24) && b >= 64 && b <= 95;
                    if (!(case1 || case2)) return false;
                    if (hasCmdRepeated(a, b, cmdHistory)) {
                        setLastCmd(null, null, cmdHistory);
                        return true; // Repeated commands are dropped (once)
                    }
                    var chNr = a <= 23 ? 1 : 2;
                    if (b >= 64 && b <= 95) row = chNr === 1 ? rowsLowCh1[a] : rowsLowCh2[a];
                    else // 0x60 <= b <= 0x7F
                    row = chNr === 1 ? rowsHighCh1[a] : rowsHighCh2[a];
                    var channel = this.channels[chNr];
                    if (!channel) return false;
                    channel.setPAC(this.interpretPAC(row, b));
                    setLastCmd(a, b, cmdHistory);
                    this.currentChannel = chNr;
                    return true;
                };
                _proto7.interpretPAC = function interpretPAC(row, _byte3) {
                    var pacIndex = _byte3;
                    var pacData = {
                        color: null,
                        italics: false,
                        indent: null,
                        underline: false,
                        row: row
                    };
                    if (_byte3 > 95) pacIndex = _byte3 - 96;
                    else pacIndex = _byte3 - 64;
                    pacData.underline = (pacIndex & 1) === 1;
                    if (pacIndex <= 13) pacData.color = [
                        'white',
                        'green',
                        'blue',
                        'cyan',
                        'red',
                        'yellow',
                        'magenta',
                        'white'
                    ][Math.floor(pacIndex / 2)];
                    else if (pacIndex <= 15) {
                        pacData.italics = true;
                        pacData.color = 'white';
                    } else pacData.indent = Math.floor((pacIndex - 16) / 2) * 4;
                    return pacData; // Note that row has zero offset. The spec uses 1.
                };
                _proto7.parseChars = function parseChars(a, b) {
                    var channelNr;
                    var charCodes = null;
                    var charCode1 = null;
                    if (a >= 25) {
                        channelNr = 2;
                        charCode1 = a - 8;
                    } else {
                        channelNr = 1;
                        charCode1 = a;
                    }
                    if (charCode1 >= 17 && charCode1 <= 19) {
                        // Special character
                        var oneCode = b;
                        if (charCode1 === 17) oneCode = b + 80;
                        else if (charCode1 === 18) oneCode = b + 112;
                        else oneCode = b + 144;
                        this.logger.log(VerboseLevel.INFO, 'Special char \'' + getCharForByte(oneCode) + '\' in channel ' + channelNr);
                        charCodes = [
                            oneCode
                        ];
                    } else if (a >= 32 && a <= 127) charCodes = b === 0 ? [
                        a
                    ] : [
                        a,
                        b
                    ];
                    if (charCodes) {
                        var hexCodes = numArrayToHexArray(charCodes);
                        this.logger.log(VerboseLevel.DEBUG, 'Char codes =  ' + hexCodes.join(','));
                        setLastCmd(a, b, this.cmdHistory);
                    }
                    return charCodes;
                };
                _proto7.parseBackgroundAttributes = function parseBackgroundAttributes(a, b) {
                    var case1 = (a === 16 || a === 24) && b >= 32 && b <= 47;
                    var case2 = (a === 23 || a === 31) && b >= 45 && b <= 47;
                    if (!(case1 || case2)) return false;
                    var index;
                    var bkgData = {
                    };
                    if (a === 16 || a === 24) {
                        index = Math.floor((b - 32) / 2);
                        bkgData.background = backgroundColors[index];
                        if (b % 2 === 1) bkgData.background = bkgData.background + '_semi';
                    } else if (b === 45) bkgData.background = 'transparent';
                    else {
                        bkgData.foreground = 'black';
                        if (b === 47) bkgData.underline = true;
                    }
                    var chNr = a <= 23 ? 1 : 2;
                    var channel = this.channels[chNr];
                    channel.setBkgData(bkgData);
                    setLastCmd(a, b, this.cmdHistory);
                    return true;
                };
                _proto7.reset = function reset() {
                    for(var i = 0; i < Object.keys(this.channels).length; i++){
                        var channel = this.channels[i];
                        if (channel) channel.reset();
                    }
                    this.cmdHistory = createCmdHistory();
                };
                _proto7.cueSplitAtTime = function cueSplitAtTime(t) {
                    for(var i = 0; i < this.channels.length; i++){
                        var channel = this.channels[i];
                        if (channel) channel.cueSplitAtTime(t);
                    }
                };
                return Cea608Parser1;
            }();
            function setLastCmd(a, b, cmdHistory) {
                cmdHistory.a = a;
                cmdHistory.b = b;
            }
            function hasCmdRepeated(a, b, cmdHistory) {
                return cmdHistory.a === a && cmdHistory.b === b;
            }
            function createCmdHistory() {
                return {
                    a: null,
                    b: null
                };
            }
            /* harmony default export */ var cea_608_parser = Cea608Parser;
            // CONCATENATED MODULE: ./src/utils/output-filter.ts
            var OutputFilter = /*#__PURE__*/ function() {
                function OutputFilter1(timelineController, trackName) {
                    this.timelineController = void 0;
                    this.cueRanges = [];
                    this.trackName = void 0;
                    this.startTime = null;
                    this.endTime = null;
                    this.screen = null;
                    this.timelineController = timelineController;
                    this.trackName = trackName;
                }
                var _proto = OutputFilter1.prototype;
                _proto.dispatchCue = function dispatchCue() {
                    if (this.startTime === null) return;
                    this.timelineController.addCues(this.trackName, this.startTime, this.endTime, this.screen, this.cueRanges);
                    this.startTime = null;
                };
                _proto.newCue = function newCue1(startTime, endTime, screen) {
                    if (this.startTime === null || this.startTime > startTime) this.startTime = startTime;
                    this.endTime = endTime;
                    this.screen = screen;
                    this.timelineController.createCaptionsTrack(this.trackName);
                };
                _proto.reset = function reset() {
                    this.cueRanges = [];
                };
                return OutputFilter1;
            }();
            // CONCATENATED MODULE: ./src/utils/webvtt-parser.js
            // String.prototype.startsWith is not supported in IE11
            var startsWith = function startsWith1(inputString, searchString, position) {
                return inputString.substr(position || 0, searchString.length) === searchString;
            };
            var webvtt_parser_cueString2millis = function cueString2millis(timeString) {
                var ts = parseInt(timeString.substr(-3));
                var secs = parseInt(timeString.substr(-6, 2));
                var mins = parseInt(timeString.substr(-9, 2));
                var hours = timeString.length > 9 ? parseInt(timeString.substr(0, timeString.indexOf(':'))) : 0;
                if (!Object(number["isFiniteNumber"])(ts) || !Object(number["isFiniteNumber"])(secs) || !Object(number["isFiniteNumber"])(mins) || !Object(number["isFiniteNumber"])(hours)) throw Error("Malformed X-TIMESTAMP-MAP: Local:" + timeString);
                ts += 1000 * secs;
                ts += 60000 * mins;
                ts += 3600000 * hours;
                return ts;
            }; // From https://github.com/darkskyapp/string-hash
            var hash = function hash1(text) {
                var hash1 = 5381;
                var i = text.length;
                while(i)hash1 = hash1 * 33 ^ text.charCodeAt(--i);
                return (hash1 >>> 0).toString();
            };
            var calculateOffset = function calculateOffset1(vttCCs, cc, presentationTime) {
                var currCC = vttCCs[cc];
                var prevCC = vttCCs[currCC.prevCC]; // This is the first discontinuity or cues have been processed since the last discontinuity
                // Offset = current discontinuity time
                if (!prevCC || !prevCC.new && currCC.new) {
                    vttCCs.ccOffset = vttCCs.presentationOffset = currCC.start;
                    currCC.new = false;
                    return;
                } // There have been discontinuities since cues were last parsed.
                // Offset = time elapsed
                while(prevCC && prevCC.new){
                    vttCCs.ccOffset += currCC.start - prevCC.start;
                    currCC.new = false;
                    currCC = prevCC;
                    prevCC = vttCCs[currCC.prevCC];
                }
                vttCCs.presentationOffset = presentationTime;
            };
            var WebVTTParser = {
                parse: function parse(vttByteArray, syncPTS, vttCCs, cc, callBack, errorCallBack) {
                    // Convert byteArray into string, replacing any somewhat exotic linefeeds with "\n", then split on that character.
                    var re = /\r\n|\n\r|\n|\r/g; // Uint8Array.prototype.reduce is not implemented in IE11
                    var vttLines = Object(id3["utf8ArrayToStr"])(new Uint8Array(vttByteArray)).trim().replace(re, '\n').split('\n');
                    var cueTime = '00:00.000';
                    var mpegTs = 0;
                    var localTime = 0;
                    var presentationTime = 0;
                    var cues = [];
                    var parsingError;
                    var inHeader = true;
                    var timestampMap = false; // let VTTCue = VTTCue || window.TextTrackCue;
                    // Create parser object using VTTCue with TextTrackCue fallback on certain browsers.
                    var parser = new vttparser();
                    parser.oncue = function(cue) {
                        // Adjust cue timing; clamp cues to start no earlier than - and drop cues that don't end after - 0 on timeline.
                        var currCC = vttCCs[cc];
                        var cueOffset = vttCCs.ccOffset; // Update offsets for new discontinuities
                        if (currCC && currCC.new) {
                            if (localTime !== undefined) // When local time is provided, offset = discontinuity start time - local time
                            cueOffset = vttCCs.ccOffset = currCC.start;
                            else calculateOffset(vttCCs, cc, presentationTime);
                        }
                        if (presentationTime) // If we have MPEGTS, offset = presentation time + discontinuity offset
                        cueOffset = presentationTime - vttCCs.presentationOffset;
                        if (timestampMap) {
                            cue.startTime += cueOffset - localTime;
                            cue.endTime += cueOffset - localTime;
                        } // Create a unique hash id for a cue based on start/end times and text.
                        // This helps timeline-controller to avoid showing repeated captions.
                        cue.id = hash(cue.startTime.toString()) + hash(cue.endTime.toString()) + hash(cue.text); // Fix encoding of special characters. TODO: Test with all sorts of weird characters.
                        cue.text = decodeURIComponent(encodeURIComponent(cue.text));
                        if (cue.endTime > 0) cues.push(cue);
                    };
                    parser.onparsingerror = function(e) {
                        parsingError = e;
                    };
                    parser.onflush = function() {
                        if (parsingError && errorCallBack) {
                            errorCallBack(parsingError);
                            return;
                        }
                        callBack(cues);
                    }; // Go through contents line by line.
                    vttLines.forEach(function(line) {
                        if (inHeader) {
                            // Look for X-TIMESTAMP-MAP in header.
                            if (startsWith(line, 'X-TIMESTAMP-MAP=')) {
                                // Once found, no more are allowed anyway, so stop searching.
                                inHeader = false;
                                timestampMap = true; // Extract LOCAL and MPEGTS.
                                line.substr(16).split(',').forEach(function(timestamp) {
                                    if (startsWith(timestamp, 'LOCAL:')) cueTime = timestamp.substr(6);
                                    else if (startsWith(timestamp, 'MPEGTS:')) mpegTs = parseInt(timestamp.substr(7));
                                });
                                try {
                                    // Calculate subtitle offset in milliseconds.
                                    if (syncPTS + (vttCCs[cc].start * 90000 || 0) < 0) syncPTS += 8589934592;
                                     // Adjust MPEGTS by sync PTS.
                                    mpegTs -= syncPTS; // Convert cue time to seconds
                                    localTime = webvtt_parser_cueString2millis(cueTime) / 1000; // Convert MPEGTS to seconds from 90kHz.
                                    presentationTime = mpegTs / 90000;
                                } catch (e) {
                                    timestampMap = false;
                                    parsingError = e;
                                } // Return without parsing X-TIMESTAMP-MAP line.
                                return;
                            } else if (line === '') inHeader = false;
                        } // Parse line by default.
                        parser.parse(line + '\n');
                    });
                    parser.flush();
                }
            };
            /* harmony default export */ var webvtt_parser = WebVTTParser;
            // CONCATENATED MODULE: ./src/controller/timeline-controller.ts
            function timeline_controller_assertThisInitialized(self) {
                if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return self;
            }
            function timeline_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            var timeline_controller_TimelineController = /*#__PURE__*/ function(_EventHandler) {
                timeline_controller_inheritsLoose(TimelineController, _EventHandler);
                function TimelineController(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHING, events["default"].MEDIA_DETACHING, events["default"].FRAG_PARSING_USERDATA, events["default"].FRAG_DECRYPTED, events["default"].MANIFEST_LOADING, events["default"].MANIFEST_LOADED, events["default"].FRAG_LOADED, events["default"].INIT_PTS_FOUND) || this;
                    _this.media = null;
                    _this.config = void 0;
                    _this.enabled = true;
                    _this.Cues = void 0;
                    _this.textTracks = [];
                    _this.tracks = [];
                    _this.initPTS = [];
                    _this.unparsedVttFrags = [];
                    _this.captionsTracks = {
                    };
                    _this.nonNativeCaptionsTracks = {
                    };
                    _this.captionsProperties = void 0;
                    _this.cea608Parser1 = void 0;
                    _this.cea608Parser2 = void 0;
                    _this.lastSn = -1;
                    _this.prevCC = -1;
                    _this.vttCCs = newVTTCCs();
                    _this.hls = hls;
                    _this.config = hls.config;
                    _this.Cues = hls.config.cueHandler;
                    _this.captionsProperties = {
                        textTrack1: {
                            label: _this.config.captionsTextTrack1Label,
                            languageCode: _this.config.captionsTextTrack1LanguageCode
                        },
                        textTrack2: {
                            label: _this.config.captionsTextTrack2Label,
                            languageCode: _this.config.captionsTextTrack2LanguageCode
                        },
                        textTrack3: {
                            label: _this.config.captionsTextTrack3Label,
                            languageCode: _this.config.captionsTextTrack3LanguageCode
                        },
                        textTrack4: {
                            label: _this.config.captionsTextTrack4Label,
                            languageCode: _this.config.captionsTextTrack4LanguageCode
                        }
                    };
                    if (_this.config.enableCEA708Captions) {
                        var channel1 = new OutputFilter(timeline_controller_assertThisInitialized(_this), 'textTrack1');
                        var channel2 = new OutputFilter(timeline_controller_assertThisInitialized(_this), 'textTrack2');
                        var channel3 = new OutputFilter(timeline_controller_assertThisInitialized(_this), 'textTrack3');
                        var channel4 = new OutputFilter(timeline_controller_assertThisInitialized(_this), 'textTrack4');
                        _this.cea608Parser1 = new cea_608_parser(1, channel1, channel2);
                        _this.cea608Parser2 = new cea_608_parser(3, channel3, channel4);
                    }
                    return _this;
                }
                var _proto = TimelineController.prototype;
                _proto.addCues = function addCues(trackName, startTime, endTime, screen, cueRanges) {
                    // skip cues which overlap more than 50% with previously parsed time ranges
                    var merged = false;
                    for(var i = cueRanges.length; i--;){
                        var cueRange = cueRanges[i];
                        var overlap = intersection(cueRange[0], cueRange[1], startTime, endTime);
                        if (overlap >= 0) {
                            cueRange[0] = Math.min(cueRange[0], startTime);
                            cueRange[1] = Math.max(cueRange[1], endTime);
                            merged = true;
                            if (overlap / (endTime - startTime) > 0.5) return;
                        }
                    }
                    if (!merged) cueRanges.push([
                        startTime,
                        endTime
                    ]);
                    if (this.config.renderTextTracksNatively) this.Cues.newCue(this.captionsTracks[trackName], startTime, endTime, screen);
                    else {
                        var cues = this.Cues.newCue(null, startTime, endTime, screen);
                        this.hls.trigger(events["default"].CUES_PARSED, {
                            type: 'captions',
                            cues: cues,
                            track: trackName
                        });
                    }
                } // Triggered when an initial PTS is found; used for synchronisation of WebVTT.
                ;
                _proto.onInitPtsFound = function onInitPtsFound(data) {
                    var _this2 = this;
                    var frag = data.frag, id = data.id, initPTS = data.initPTS;
                    var unparsedVttFrags = this.unparsedVttFrags;
                    if (id === 'main') this.initPTS[frag.cc] = initPTS;
                     // Due to asynchronous processing, initial PTS may arrive later than the first VTT fragments are loaded.
                    // Parse any unparsed fragments upon receiving the initial PTS.
                    if (unparsedVttFrags.length) {
                        this.unparsedVttFrags = [];
                        unparsedVttFrags.forEach(function(frag1) {
                            _this2.onFragLoaded(frag1);
                        });
                    }
                };
                _proto.getExistingTrack = function getExistingTrack(trackName) {
                    var media = this.media;
                    if (media) for(var i = 0; i < media.textTracks.length; i++){
                        var textTrack = media.textTracks[i];
                        if (textTrack[trackName]) return textTrack;
                    }
                    return null;
                };
                _proto.createCaptionsTrack = function createCaptionsTrack(trackName) {
                    if (this.config.renderTextTracksNatively) this.createNativeTrack(trackName);
                    else this.createNonNativeTrack(trackName);
                };
                _proto.createNativeTrack = function createNativeTrack(trackName) {
                    if (this.captionsTracks[trackName]) return;
                    var captionsProperties = this.captionsProperties, captionsTracks = this.captionsTracks, media = this.media;
                    var _captionsProperties$t = captionsProperties[trackName], label = _captionsProperties$t.label, languageCode = _captionsProperties$t.languageCode; // Enable reuse of existing text track.
                    var existingTrack = this.getExistingTrack(trackName);
                    if (!existingTrack) {
                        var textTrack = this.createTextTrack('captions', label, languageCode);
                        if (textTrack) {
                            // Set a special property on the track so we know it's managed by Hls.js
                            textTrack[trackName] = true;
                            captionsTracks[trackName] = textTrack;
                        }
                    } else {
                        captionsTracks[trackName] = existingTrack;
                        clearCurrentCues(captionsTracks[trackName]);
                        sendAddTrackEvent(captionsTracks[trackName], media);
                    }
                };
                _proto.createNonNativeTrack = function createNonNativeTrack(trackName) {
                    if (this.nonNativeCaptionsTracks[trackName]) return;
                     // Create a list of a single track for the provider to consume
                    var trackProperties = this.captionsProperties[trackName];
                    if (!trackProperties) return;
                    var label = trackProperties.label;
                    var track = {
                        _id: trackName,
                        label: label,
                        kind: 'captions',
                        default: trackProperties.media ? !!trackProperties.media.default : false,
                        closedCaptions: trackProperties.media
                    };
                    this.nonNativeCaptionsTracks[trackName] = track;
                    this.hls.trigger(events["default"].NON_NATIVE_TEXT_TRACKS_FOUND, {
                        tracks: [
                            track
                        ]
                    });
                };
                _proto.createTextTrack = function createTextTrack(kind, label, lang) {
                    var media = this.media;
                    if (!media) return;
                    return media.addTextTrack(kind, label, lang);
                };
                _proto.destroy = function destroy() {
                    _EventHandler.prototype.destroy.call(this);
                };
                _proto.onMediaAttaching = function onMediaAttaching(data) {
                    this.media = data.media;
                    this._cleanTracks();
                };
                _proto.onMediaDetaching = function onMediaDetaching() {
                    var captionsTracks = this.captionsTracks;
                    Object.keys(captionsTracks).forEach(function(trackName) {
                        clearCurrentCues(captionsTracks[trackName]);
                        delete captionsTracks[trackName];
                    });
                    this.nonNativeCaptionsTracks = {
                    };
                };
                _proto.onManifestLoading = function onManifestLoading() {
                    this.lastSn = -1; // Detect discontiguity in fragment parsing
                    this.prevCC = -1;
                    this.vttCCs = newVTTCCs(); // Detect discontinuity in subtitle manifests
                    this._cleanTracks();
                    this.tracks = [];
                    this.captionsTracks = {
                    };
                    this.nonNativeCaptionsTracks = {
                    };
                };
                _proto._cleanTracks = function _cleanTracks() {
                    // clear outdated subtitles
                    var media = this.media;
                    if (!media) return;
                    var textTracks = media.textTracks;
                    if (textTracks) for(var i = 0; i < textTracks.length; i++)clearCurrentCues(textTracks[i]);
                };
                _proto.onManifestLoaded = function onManifestLoaded(data) {
                    var _this3 = this;
                    this.textTracks = [];
                    this.unparsedVttFrags = this.unparsedVttFrags || [];
                    this.initPTS = [];
                    if (this.cea608Parser1 && this.cea608Parser2) {
                        this.cea608Parser1.reset();
                        this.cea608Parser2.reset();
                    }
                    if (this.config.enableWebVTT) {
                        var tracks = data.subtitles || [];
                        var sameTracks = this.tracks && tracks && this.tracks.length === tracks.length;
                        this.tracks = data.subtitles || [];
                        if (this.config.renderTextTracksNatively) {
                            var inUseTracks = this.media ? this.media.textTracks : [];
                            this.tracks.forEach(function(track, index) {
                                var textTrack;
                                if (index < inUseTracks.length) {
                                    var inUseTrack = null;
                                    for(var i = 0; i < inUseTracks.length; i++)if (canReuseVttTextTrack(inUseTracks[i], track)) {
                                        inUseTrack = inUseTracks[i];
                                        break;
                                    }
                                     // Reuse tracks with the same label, but do not reuse 608/708 tracks
                                    if (inUseTrack) textTrack = inUseTrack;
                                }
                                if (!textTrack) textTrack = _this3.createTextTrack('subtitles', track.name, track.lang);
                                if (track.default) textTrack.mode = _this3.hls.subtitleDisplay ? 'showing' : 'hidden';
                                else textTrack.mode = 'disabled';
                                _this3.textTracks.push(textTrack);
                            });
                        } else if (!sameTracks && this.tracks && this.tracks.length) {
                            // Create a list of tracks for the provider to consume
                            var tracksList = this.tracks.map(function(track) {
                                return {
                                    label: track.name,
                                    kind: track.type.toLowerCase(),
                                    default: track.default,
                                    subtitleTrack: track
                                };
                            });
                            this.hls.trigger(events["default"].NON_NATIVE_TEXT_TRACKS_FOUND, {
                                tracks: tracksList
                            });
                        }
                    }
                    if (this.config.enableCEA708Captions && data.captions) data.captions.forEach(function(captionsTrack) {
                        var instreamIdMatch = /(?:CC|SERVICE)([1-4])/.exec(captionsTrack.instreamId);
                        if (!instreamIdMatch) return;
                        var trackName = "textTrack" + instreamIdMatch[1];
                        var trackProperties = _this3.captionsProperties[trackName];
                        if (!trackProperties) return;
                        trackProperties.label = captionsTrack.name;
                        if (captionsTrack.lang) // optional attribute
                        trackProperties.languageCode = captionsTrack.lang;
                        trackProperties.media = captionsTrack;
                    });
                };
                _proto.onFragLoaded = function onFragLoaded(data) {
                    var frag = data.frag, payload = data.payload;
                    var cea608Parser1 = this.cea608Parser1, cea608Parser2 = this.cea608Parser2, initPTS = this.initPTS, lastSn = this.lastSn, unparsedVttFrags = this.unparsedVttFrags;
                    if (frag.type === 'main') {
                        var sn = frag.sn; // if this frag isn't contiguous, clear the parser so cues with bad start/end times aren't added to the textTrack
                        if (frag.sn !== lastSn + 1) {
                            if (cea608Parser1 && cea608Parser2) {
                                cea608Parser1.reset();
                                cea608Parser2.reset();
                            }
                        }
                        this.lastSn = sn;
                    } else if (frag.type === 'subtitle') {
                        if (payload.byteLength) {
                            // We need an initial synchronisation PTS. Store fragments as long as none has arrived.
                            if (!Object(number["isFiniteNumber"])(initPTS[frag.cc])) {
                                unparsedVttFrags.push(data);
                                if (initPTS.length) // finish unsuccessfully, otherwise the subtitle-stream-controller could be blocked from loading new frags.
                                this.hls.trigger(events["default"].SUBTITLE_FRAG_PROCESSED, {
                                    success: false,
                                    frag: frag
                                });
                                return;
                            }
                            var decryptData = frag.decryptdata; // If the subtitles are not encrypted, parse VTTs now. Otherwise, we need to wait.
                            if (decryptData == null || decryptData.key == null || decryptData.method !== 'AES-128') this._parseVTTs(frag, payload);
                        } else // In case there is no payload, finish unsuccessfully.
                        this.hls.trigger(events["default"].SUBTITLE_FRAG_PROCESSED, {
                            success: false,
                            frag: frag
                        });
                    }
                };
                _proto._parseVTTs = function _parseVTTs(frag, payload) {
                    var _this4 = this;
                    var hls = this.hls, prevCC = this.prevCC, textTracks = this.textTracks, vttCCs = this.vttCCs;
                    if (!vttCCs[frag.cc]) {
                        vttCCs[frag.cc] = {
                            start: frag.start,
                            prevCC: prevCC,
                            new: true
                        };
                        this.prevCC = frag.cc;
                    } // Parse the WebVTT file contents.
                    webvtt_parser.parse(payload, this.initPTS[frag.cc], vttCCs, frag.cc, function(cues) {
                        if (_this4.config.renderTextTracksNatively) {
                            var currentTrack = textTracks[frag.level]; // WebVTTParser.parse is an async method and if the currently selected text track mode is set to "disabled"
                            // before parsing is done then don't try to access currentTrack.cues.getCueById as cues will be null
                            // and trying to access getCueById method of cues will throw an exception
                            // Because we check if the mode is diabled, we can force check `cues` below. They can't be null.
                            if (currentTrack.mode === 'disabled') {
                                hls.trigger(events["default"].SUBTITLE_FRAG_PROCESSED, {
                                    success: false,
                                    frag: frag
                                });
                                return;
                            } // Add cues and trigger event with success true.
                            cues.forEach(function(cue) {
                                // Sometimes there are cue overlaps on segmented vtts so the same
                                // cue can appear more than once in different vtt files.
                                // This avoid showing duplicated cues with same timecode and text.
                                if (!currentTrack.cues.getCueById(cue.id)) try {
                                    currentTrack.addCue(cue);
                                    if (!currentTrack.cues.getCueById(cue.id)) throw new Error("addCue is failed for: " + cue);
                                } catch (err) {
                                    logger["logger"].debug("Failed occurred on adding cues: " + err);
                                    var textTrackCue = new window.TextTrackCue(cue.startTime, cue.endTime, cue.text);
                                    textTrackCue.id = cue.id;
                                    currentTrack.addCue(textTrackCue);
                                }
                            });
                        } else {
                            var trackId = _this4.tracks[frag.level].default ? 'default' : 'subtitles' + frag.level;
                            hls.trigger(events["default"].CUES_PARSED, {
                                type: 'subtitles',
                                cues: cues,
                                track: trackId
                            });
                        }
                        hls.trigger(events["default"].SUBTITLE_FRAG_PROCESSED, {
                            success: true,
                            frag: frag
                        });
                    }, function(e) {
                        // Something went wrong while parsing. Trigger event with success false.
                        logger["logger"].log("Failed to parse VTT cue: " + e);
                        hls.trigger(events["default"].SUBTITLE_FRAG_PROCESSED, {
                            success: false,
                            frag: frag
                        });
                    });
                };
                _proto.onFragDecrypted = function onFragDecrypted(data) {
                    var frag = data.frag, payload = data.payload;
                    if (frag.type === 'subtitle') {
                        if (!Object(number["isFiniteNumber"])(this.initPTS[frag.cc])) {
                            this.unparsedVttFrags.push(data);
                            return;
                        }
                        this._parseVTTs(frag, payload);
                    }
                };
                _proto.onFragParsingUserdata = function onFragParsingUserdata(data) {
                    var cea608Parser1 = this.cea608Parser1, cea608Parser2 = this.cea608Parser2;
                    if (!this.enabled || !(cea608Parser1 && cea608Parser2)) return;
                     // If the event contains captions (found in the bytes property), push all bytes into the parser immediately
                    // It will create the proper timestamps based on the PTS value
                    for(var i = 0; i < data.samples.length; i++){
                        var ccBytes = data.samples[i].bytes;
                        if (ccBytes) {
                            var ccdatas = this.extractCea608Data(ccBytes);
                            cea608Parser1.addData(data.samples[i].pts, ccdatas[0]);
                            cea608Parser2.addData(data.samples[i].pts, ccdatas[1]);
                        }
                    }
                };
                _proto.extractCea608Data = function extractCea608Data(byteArray) {
                    var count = byteArray[0] & 31;
                    var position = 2;
                    var actualCCBytes = [
                        [],
                        []
                    ];
                    for(var j = 0; j < count; j++){
                        var tmpByte = byteArray[position++];
                        var ccbyte1 = 127 & byteArray[position++];
                        var ccbyte2 = 127 & byteArray[position++];
                        var ccValid = (4 & tmpByte) !== 0;
                        var ccType = 3 & tmpByte;
                        if (ccbyte1 === 0 && ccbyte2 === 0) continue;
                        if (ccValid) {
                            if (ccType === 0 || ccType === 1) {
                                actualCCBytes[ccType].push(ccbyte1);
                                actualCCBytes[ccType].push(ccbyte2);
                            }
                        }
                    }
                    return actualCCBytes;
                };
                return TimelineController;
            }(event_handler);
            function canReuseVttTextTrack(inUseTrack, manifestTrack) {
                return inUseTrack && inUseTrack.label === manifestTrack.name && !(inUseTrack.textTrack1 || inUseTrack.textTrack2);
            }
            function intersection(x1, x2, y1, y2) {
                return Math.min(x2, y2) - Math.max(x1, y1);
            }
            function newVTTCCs() {
                return {
                    ccOffset: 0,
                    presentationOffset: 0,
                    0: {
                        start: 0,
                        prevCC: -1,
                        new: false
                    }
                };
            }
            /* harmony default export */ var timeline_controller = timeline_controller_TimelineController;
            // CONCATENATED MODULE: ./src/controller/subtitle-track-controller.js
            function subtitle_track_controller_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function subtitle_track_controller_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) subtitle_track_controller_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) subtitle_track_controller_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            function subtitle_track_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            var subtitle_track_controller_SubtitleTrackController = /*#__PURE__*/ function(_EventHandler) {
                subtitle_track_controller_inheritsLoose(SubtitleTrackController, _EventHandler);
                function SubtitleTrackController(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHING, events["default"].MANIFEST_LOADED, events["default"].SUBTITLE_TRACK_LOADED) || this;
                    _this.tracks = [];
                    _this.trackId = -1;
                    _this.media = null;
                    _this.stopped = true;
                    /**
     * @member {boolean} subtitleDisplay Enable/disable subtitle display rendering
     */ _this.subtitleDisplay = true;
                    /**
     * Keeps reference to a default track id when media has not been attached yet
     * @member {number}
     */ _this.queuedDefaultTrack = null;
                    return _this;
                }
                var _proto = SubtitleTrackController.prototype;
                _proto.destroy = function destroy() {
                    event_handler.prototype.destroy.call(this);
                } // Listen for subtitle track change, then extract the current track ID.
                ;
                _proto.onMediaAttached = function onMediaAttached(data) {
                    var _this2 = this;
                    this.media = data.media;
                    if (!this.media) return;
                    if (Object(number["isFiniteNumber"])(this.queuedDefaultTrack)) {
                        this.subtitleTrack = this.queuedDefaultTrack;
                        this.queuedDefaultTrack = null;
                    }
                    this.trackChangeListener = this._onTextTracksChanged.bind(this);
                    this.useTextTrackPolling = !(this.media.textTracks && 'onchange' in this.media.textTracks);
                    if (this.useTextTrackPolling) this.subtitlePollingInterval = setInterval(function() {
                        _this2.trackChangeListener();
                    }, 500);
                    else this.media.textTracks.addEventListener('change', this.trackChangeListener);
                };
                _proto.onMediaDetaching = function onMediaDetaching() {
                    if (!this.media) return;
                    if (this.useTextTrackPolling) clearInterval(this.subtitlePollingInterval);
                    else this.media.textTracks.removeEventListener('change', this.trackChangeListener);
                    if (Object(number["isFiniteNumber"])(this.subtitleTrack)) this.queuedDefaultTrack = this.subtitleTrack;
                    var textTracks = filterSubtitleTracks(this.media.textTracks); // Clear loaded cues on media detachment from tracks
                    textTracks.forEach(function(track) {
                        clearCurrentCues(track);
                    }); // Disable all subtitle tracks before detachment so when reattached only tracks in that content are enabled.
                    this.subtitleTrack = -1;
                    this.media = null;
                } // Fired whenever a new manifest is loaded.
                ;
                _proto.onManifestLoaded = function onManifestLoaded(data) {
                    var _this3 = this;
                    var tracks = data.subtitles || [];
                    this.tracks = tracks;
                    this.hls.trigger(events["default"].SUBTITLE_TRACKS_UPDATED, {
                        subtitleTracks: tracks
                    }); // loop through available subtitle tracks and autoselect default if needed
                    // TODO: improve selection logic to handle forced, etc
                    tracks.forEach(function(track) {
                        if (track.default) {
                            // setting this.subtitleTrack will trigger internal logic
                            // if media has not been attached yet, it will fail
                            // we keep a reference to the default track id
                            // and we'll set subtitleTrack when onMediaAttached is triggered
                            if (_this3.media) _this3.subtitleTrack = track.id;
                            else _this3.queuedDefaultTrack = track.id;
                        }
                    });
                };
                _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(data) {
                    var _this4 = this;
                    var id = data.id, details = data.details;
                    var trackId = this.trackId, tracks = this.tracks;
                    var currentTrack = tracks[trackId];
                    if (id >= tracks.length || id !== trackId || !currentTrack || this.stopped) {
                        this._clearReloadTimer();
                        return;
                    }
                    logger["logger"].log("subtitle track " + id + " loaded");
                    if (details.live) {
                        var reloadInterval = computeReloadInterval(currentTrack.details, details, data.stats.trequest);
                        logger["logger"].log("Reloading live subtitle playlist in " + reloadInterval + "ms");
                        this.timer = setTimeout(function() {
                            _this4._loadCurrentTrack();
                        }, reloadInterval);
                    } else this._clearReloadTimer();
                };
                _proto.startLoad = function startLoad() {
                    this.stopped = false;
                    this._loadCurrentTrack();
                };
                _proto.stopLoad = function stopLoad() {
                    this.stopped = true;
                    this._clearReloadTimer();
                };
                _proto._clearReloadTimer = function _clearReloadTimer() {
                    if (this.timer) {
                        clearTimeout(this.timer);
                        this.timer = null;
                    }
                };
                _proto._loadCurrentTrack = function _loadCurrentTrack() {
                    var trackId = this.trackId, tracks = this.tracks, hls = this.hls;
                    var currentTrack = tracks[trackId];
                    if (trackId < 0 || !currentTrack || currentTrack.details && !currentTrack.details.live) return;
                    logger["logger"].log("Loading subtitle track " + trackId);
                    hls.trigger(events["default"].SUBTITLE_TRACK_LOADING, {
                        url: currentTrack.url,
                        id: trackId
                    });
                };
                _proto._toggleTrackModes = function _toggleTrackModes(newId) {
                    var media = this.media, subtitleDisplay = this.subtitleDisplay, trackId = this.trackId;
                    if (!media) return;
                    var textTracks = filterSubtitleTracks(media.textTracks);
                    if (newId === -1) [].slice.call(textTracks).forEach(function(track) {
                        track.mode = 'disabled';
                    });
                    else {
                        var oldTrack = textTracks[trackId];
                        if (oldTrack) oldTrack.mode = 'disabled';
                    }
                    var nextTrack = textTracks[newId];
                    if (nextTrack) nextTrack.mode = subtitleDisplay ? 'showing' : 'hidden';
                };
                _proto._setSubtitleTrackInternal = function _setSubtitleTrackInternal(newId) {
                    var hls = this.hls, tracks = this.tracks;
                    if (!Object(number["isFiniteNumber"])(newId) || newId < -1 || newId >= tracks.length) return;
                    this.trackId = newId;
                    logger["logger"].log("Switching to subtitle track " + newId);
                    hls.trigger(events["default"].SUBTITLE_TRACK_SWITCH, {
                        id: newId
                    });
                    this._loadCurrentTrack();
                };
                _proto._onTextTracksChanged = function _onTextTracksChanged() {
                    // Media is undefined when switching streams via loadSource()
                    if (!this.media || !this.hls.config.renderTextTracksNatively) return;
                    var trackId = -1;
                    var tracks = filterSubtitleTracks(this.media.textTracks);
                    for(var id = 0; id < tracks.length; id++){
                        if (tracks[id].mode === 'hidden') // Do not break in case there is a following track with showing.
                        trackId = id;
                        else if (tracks[id].mode === 'showing') {
                            trackId = id;
                            break;
                        }
                    } // Setting current subtitleTrack will invoke code.
                    this.subtitleTrack = trackId;
                };
                subtitle_track_controller_createClass(SubtitleTrackController, [
                    {
                        key: "subtitleTracks",
                        get: function get() {
                            return this.tracks;
                        }
                    },
                    {
                        key: "subtitleTrack",
                        get: function get() {
                            return this.trackId;
                        },
                        set: function set(subtitleTrackId) {
                            if (this.trackId !== subtitleTrackId) {
                                this._toggleTrackModes(subtitleTrackId);
                                this._setSubtitleTrackInternal(subtitleTrackId);
                            }
                        }
                    }
                ]);
                return SubtitleTrackController;
            }(event_handler);
            function filterSubtitleTracks(textTrackList) {
                var tracks = [];
                for(var i = 0; i < textTrackList.length; i++){
                    var track = textTrackList[i]; // Edge adds a track without a label; we don't want to use it
                    if (track.kind === 'subtitles' && track.label) tracks.push(textTrackList[i]);
                }
                return tracks;
            }
            /* harmony default export */ var subtitle_track_controller = subtitle_track_controller_SubtitleTrackController;
            // EXTERNAL MODULE: ./src/crypt/decrypter.js + 3 modules
            var decrypter = __webpack_require__("./src/crypt/decrypter.js");
            // CONCATENATED MODULE: ./src/controller/subtitle-stream-controller.js
            function subtitle_stream_controller_assertThisInitialized(self) {
                if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return self;
            }
            function subtitle_stream_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /**
 * @class SubtitleStreamController
 */ var subtitle_stream_controller_window = window, subtitle_stream_controller_performance = subtitle_stream_controller_window.performance;
            var subtitle_stream_controller_TICK_INTERVAL = 500; // how often to tick in ms
            var subtitle_stream_controller_SubtitleStreamController = /*#__PURE__*/ function(_BaseStreamController) {
                subtitle_stream_controller_inheritsLoose(SubtitleStreamController, _BaseStreamController);
                function SubtitleStreamController(hls, fragmentTracker) {
                    var _this;
                    _this = _BaseStreamController.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHING, events["default"].ERROR, events["default"].KEY_LOADED, events["default"].FRAG_LOADED, events["default"].SUBTITLE_TRACKS_UPDATED, events["default"].SUBTITLE_TRACK_SWITCH, events["default"].SUBTITLE_TRACK_LOADED, events["default"].SUBTITLE_FRAG_PROCESSED, events["default"].LEVEL_UPDATED) || this;
                    _this.fragmentTracker = fragmentTracker;
                    _this.config = hls.config;
                    _this.state = State.STOPPED;
                    _this.tracks = [];
                    _this.tracksBuffered = [];
                    _this.currentTrackId = -1;
                    _this.decrypter = new decrypter["default"](hls, hls.config); // lastAVStart stores the time in seconds for the start time of a level load
                    _this.lastAVStart = 0;
                    _this._onMediaSeeking = _this.onMediaSeeking.bind(subtitle_stream_controller_assertThisInitialized(_this));
                    return _this;
                }
                var _proto = SubtitleStreamController.prototype;
                _proto.startLoad = function startLoad() {
                    this.stopLoad();
                    this.state = State.IDLE; // Check if we already have a track with necessary details to load fragments
                    var currentTrack = this.tracks[this.currentTrackId];
                    if (currentTrack && currentTrack.details) {
                        this.setInterval(subtitle_stream_controller_TICK_INTERVAL);
                        this.tick();
                    }
                };
                _proto.onSubtitleFragProcessed = function onSubtitleFragProcessed(data) {
                    var frag = data.frag, success = data.success;
                    this.fragPrevious = frag;
                    this.state = State.IDLE;
                    if (!success) return;
                    var buffered = this.tracksBuffered[this.currentTrackId];
                    if (!buffered) return;
                     // Create/update a buffered array matching the interface used by BufferHelper.bufferedInfo
                    // so we can re-use the logic used to detect how much have been buffered
                    var timeRange;
                    var fragStart = frag.start;
                    for(var i = 0; i < buffered.length; i++)if (fragStart >= buffered[i].start && fragStart <= buffered[i].end) {
                        timeRange = buffered[i];
                        break;
                    }
                    var fragEnd = frag.start + frag.duration;
                    if (timeRange) timeRange.end = fragEnd;
                    else {
                        timeRange = {
                            start: fragStart,
                            end: fragEnd
                        };
                        buffered.push(timeRange);
                    }
                };
                _proto.onMediaAttached = function onMediaAttached(_ref) {
                    var media = _ref.media;
                    this.media = media;
                    media.addEventListener('seeking', this._onMediaSeeking);
                    this.state = State.IDLE;
                };
                _proto.onMediaDetaching = function onMediaDetaching() {
                    var _this2 = this;
                    if (!this.media) return;
                    this.media.removeEventListener('seeking', this._onMediaSeeking);
                    this.fragmentTracker.removeAllFragments();
                    this.currentTrackId = -1;
                    this.tracks.forEach(function(track) {
                        _this2.tracksBuffered[track.id] = [];
                    });
                    this.media = null;
                    this.state = State.STOPPED;
                } // If something goes wrong, proceed to next frag, if we were processing one.
                ;
                _proto.onError = function onError(data) {
                    var frag = data.frag; // don't handle error not related to subtitle fragment
                    if (!frag || frag.type !== 'subtitle') return;
                    if (this.fragCurrent && this.fragCurrent.loader) this.fragCurrent.loader.abort();
                    this.state = State.IDLE;
                } // Got all new subtitle tracks.
                ;
                _proto.onSubtitleTracksUpdated = function onSubtitleTracksUpdated(data) {
                    var _this3 = this;
                    logger["logger"].log('subtitle tracks updated');
                    this.tracksBuffered = [];
                    this.tracks = data.subtitleTracks;
                    this.tracks.forEach(function(track) {
                        _this3.tracksBuffered[track.id] = [];
                    });
                };
                _proto.onSubtitleTrackSwitch = function onSubtitleTrackSwitch(data) {
                    this.currentTrackId = data.id;
                    if (!this.tracks || !this.tracks.length || this.currentTrackId === -1) {
                        this.clearInterval();
                        return;
                    } // Check if track has the necessary details to load fragments
                    var currentTrack = this.tracks[this.currentTrackId];
                    if (currentTrack && currentTrack.details) this.setInterval(subtitle_stream_controller_TICK_INTERVAL);
                } // Got a new set of subtitle fragments.
                ;
                _proto.onSubtitleTrackLoaded = function onSubtitleTrackLoaded(data) {
                    var id = data.id, details = data.details;
                    var currentTrackId = this.currentTrackId, tracks = this.tracks;
                    var currentTrack = tracks[currentTrackId];
                    if (id >= tracks.length || id !== currentTrackId || !currentTrack) return;
                    if (details.live) mergeSubtitlePlaylists(currentTrack.details, details, this.lastAVStart);
                    currentTrack.details = details;
                    this.setInterval(subtitle_stream_controller_TICK_INTERVAL);
                };
                _proto.onKeyLoaded = function onKeyLoaded() {
                    if (this.state === State.KEY_LOADING) this.state = State.IDLE;
                };
                _proto.onFragLoaded = function onFragLoaded(data) {
                    var fragCurrent = this.fragCurrent;
                    var decryptData = data.frag.decryptdata;
                    var fragLoaded = data.frag;
                    var hls = this.hls;
                    if (this.state === State.FRAG_LOADING && fragCurrent && data.frag.type === 'subtitle' && fragCurrent.sn === data.frag.sn) // check to see if the payload needs to be decrypted
                    {
                        if (data.payload.byteLength > 0 && decryptData && decryptData.key && decryptData.method === 'AES-128') {
                            var startTime = subtitle_stream_controller_performance.now(); // decrypt the subtitles
                            this.decrypter.decrypt(data.payload, decryptData.key.buffer, decryptData.iv.buffer, function(decryptedData) {
                                var endTime = subtitle_stream_controller_performance.now();
                                hls.trigger(events["default"].FRAG_DECRYPTED, {
                                    frag: fragLoaded,
                                    payload: decryptedData,
                                    stats: {
                                        tstart: startTime,
                                        tdecrypt: endTime
                                    }
                                });
                            });
                        }
                    }
                };
                _proto.onLevelUpdated = function onLevelUpdated(_ref2) {
                    var details = _ref2.details;
                    var frags = details.fragments;
                    this.lastAVStart = frags.length ? frags[0].start : 0;
                };
                _proto.doTick = function doTick() {
                    if (!this.media) {
                        this.state = State.IDLE;
                        return;
                    }
                    switch(this.state){
                        case State.IDLE:
                            var config = this.config, currentTrackId = this.currentTrackId, fragmentTracker = this.fragmentTracker, media = this.media, tracks = this.tracks;
                            if (!tracks || !tracks[currentTrackId] || !tracks[currentTrackId].details) break;
                            var maxBufferHole = config.maxBufferHole, maxFragLookUpTolerance = config.maxFragLookUpTolerance;
                            var maxConfigBuffer = Math.min(config.maxBufferLength, config.maxMaxBufferLength);
                            var bufferedInfo = BufferHelper.bufferedInfo(this._getBuffered(), media.currentTime, maxBufferHole);
                            var bufferEnd = bufferedInfo.end, bufferLen = bufferedInfo.len;
                            var trackDetails = tracks[currentTrackId].details;
                            var fragments = trackDetails.fragments;
                            var fragLen = fragments.length;
                            var end = fragments[fragLen - 1].start + fragments[fragLen - 1].duration;
                            if (bufferLen > maxConfigBuffer) return;
                            var foundFrag;
                            var fragPrevious = this.fragPrevious;
                            if (bufferEnd < end) {
                                if (fragPrevious && trackDetails.hasProgramDateTime) foundFrag = findFragmentByPDT(fragments, fragPrevious.endProgramDateTime, maxFragLookUpTolerance);
                                if (!foundFrag) foundFrag = findFragmentByPTS(fragPrevious, fragments, bufferEnd, maxFragLookUpTolerance);
                            } else foundFrag = fragments[fragLen - 1];
                            if (foundFrag && foundFrag.encrypted) {
                                logger["logger"].log("Loading key for " + foundFrag.sn);
                                this.state = State.KEY_LOADING;
                                this.hls.trigger(events["default"].KEY_LOADING, {
                                    frag: foundFrag
                                });
                            } else if (foundFrag && fragmentTracker.getState(foundFrag) === FragmentState.NOT_LOADED) {
                                // only load if fragment is not loaded
                                this.fragCurrent = foundFrag;
                                this.state = State.FRAG_LOADING;
                                this.hls.trigger(events["default"].FRAG_LOADING, {
                                    frag: foundFrag
                                });
                            }
                    }
                };
                _proto.stopLoad = function stopLoad() {
                    this.lastAVStart = 0;
                    this.fragPrevious = null;
                    _BaseStreamController.prototype.stopLoad.call(this);
                };
                _proto._getBuffered = function _getBuffered() {
                    return this.tracksBuffered[this.currentTrackId] || [];
                };
                _proto.onMediaSeeking = function onMediaSeeking() {
                    if (this.fragCurrent) {
                        var currentTime = this.media ? this.media.currentTime : 0;
                        var tolerance = this.config.maxFragLookUpTolerance;
                        var fragStartOffset = this.fragCurrent.start - tolerance;
                        var fragEndOffset = this.fragCurrent.start + this.fragCurrent.duration + tolerance; // check if position will be out of currently loaded frag range after seeking : if out, cancel frag load, if in, don't do anything
                        if (currentTime < fragStartOffset || currentTime > fragEndOffset) {
                            if (this.fragCurrent.loader) this.fragCurrent.loader.abort();
                            this.fragmentTracker.removeFragment(this.fragCurrent);
                            this.fragCurrent = null;
                            this.fragPrevious = null; // switch to IDLE state to load new fragment
                            this.state = State.IDLE; // speed up things
                            this.tick();
                        }
                    }
                };
                return SubtitleStreamController;
            }(base_stream_controller_BaseStreamController);
            // CONCATENATED MODULE: ./src/utils/mediakeys-helper.ts
            /**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess
 */ var KeySystems;
            (function(KeySystems1) {
                KeySystems1["WIDEVINE"] = "com.widevine.alpha";
                KeySystems1["PLAYREADY"] = "com.microsoft.playready";
            })(KeySystems || (KeySystems = {
            }));
            var requestMediaKeySystemAccess = function() {
                if (typeof window !== 'undefined' && window.navigator && window.navigator.requestMediaKeySystemAccess) return window.navigator.requestMediaKeySystemAccess.bind(window.navigator);
                else return null;
            }();
            // CONCATENATED MODULE: ./src/controller/eme-controller.ts
            function eme_controller_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function eme_controller_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) eme_controller_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) eme_controller_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            function eme_controller_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /**
 * @author Stephan Hesse <disparat@gmail.com> | <tchakabam@gmail.com>
 *
 * DRM support for Hls.js
 */ var MAX_LICENSE_REQUEST_FAILURES = 3;
            /**
 * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemConfiguration
 * @param {Array<string>} audioCodecs List of required audio codecs to support
 * @param {Array<string>} videoCodecs List of required video codecs to support
 * @param {object} drmSystemOptions Optional parameters/requirements for the key-system
 * @returns {Array<MediaSystemConfiguration>} An array of supported configurations
 */ var createWidevineMediaKeySystemConfigurations = function createWidevineMediaKeySystemConfigurations1(audioCodecs, videoCodecs, drmSystemOptions) {
                /* jshint ignore:line */ var baseConfig = {
                    // initDataTypes: ['keyids', 'mp4'],
                    // label: "",
                    // persistentState: "not-allowed", // or "required" ?
                    // distinctiveIdentifier: "not-allowed", // or "required" ?
                    // sessionTypes: ['temporary'],
                    audioCapabilities: [],
                    // { contentType: 'audio/mp4; codecs="mp4a.40.2"' }
                    videoCapabilities: [] // { contentType: 'video/mp4; codecs="avc1.42E01E"' }
                };
                audioCodecs.forEach(function(codec) {
                    baseConfig.audioCapabilities.push({
                        contentType: "audio/mp4; codecs=\"" + codec + "\"",
                        robustness: drmSystemOptions.audioRobustness || ''
                    });
                });
                videoCodecs.forEach(function(codec) {
                    baseConfig.videoCapabilities.push({
                        contentType: "video/mp4; codecs=\"" + codec + "\"",
                        robustness: drmSystemOptions.videoRobustness || ''
                    });
                });
                return [
                    baseConfig
                ];
            };
            /**
 * The idea here is to handle key-system (and their respective platforms) specific configuration differences
 * in order to work with the local requestMediaKeySystemAccess method.
 *
 * We can also rule-out platform-related key-system support at this point by throwing an error.
 *
 * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum
 * @param {Array<string>} audioCodecs List of required audio codecs to support
 * @param {Array<string>} videoCodecs List of required video codecs to support
 * @throws will throw an error if a unknown key system is passed
 * @returns {Array<MediaSystemConfiguration>} A non-empty Array of MediaKeySystemConfiguration objects
 */ var eme_controller_getSupportedMediaKeySystemConfigurations = function getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, drmSystemOptions) {
                switch(keySystem){
                    case KeySystems.WIDEVINE:
                        return createWidevineMediaKeySystemConfigurations(audioCodecs, videoCodecs, drmSystemOptions);
                    default:
                        throw new Error("Unknown key-system: " + keySystem);
                }
            };
            /**
 * Controller to deal with encrypted media extensions (EME)
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Encrypted_Media_Extensions_API
 *
 * @class
 * @constructor
 */ var eme_controller_EMEController = /*#__PURE__*/ function(_EventHandler) {
                eme_controller_inheritsLoose(EMEController, _EventHandler);
                /**
     * @constructs
     * @param {Hls} hls Our Hls.js instance
     */ function EMEController(hls) {
                    var _this;
                    _this = _EventHandler.call(this, hls, events["default"].MEDIA_ATTACHED, events["default"].MEDIA_DETACHED, events["default"].MANIFEST_PARSED) || this;
                    _this._widevineLicenseUrl = void 0;
                    _this._licenseXhrSetup = void 0;
                    _this._emeEnabled = void 0;
                    _this._requestMediaKeySystemAccess = void 0;
                    _this._drmSystemOptions = void 0;
                    _this._config = void 0;
                    _this._mediaKeysList = [];
                    _this._media = null;
                    _this._hasSetMediaKeys = false;
                    _this._requestLicenseFailureCount = 0;
                    _this.mediaKeysPromise = null;
                    _this._onMediaEncrypted = function(e) {
                        logger["logger"].log("Media is encrypted using \"" + e.initDataType + "\" init data type");
                        if (!_this.mediaKeysPromise) {
                            logger["logger"].error('Fatal: Media is encrypted but no CDM access or no keys have been requested');
                            _this.hls.trigger(events["default"].ERROR, {
                                type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
                                details: errors["ErrorDetails"].KEY_SYSTEM_NO_KEYS,
                                fatal: true
                            });
                            return;
                        }
                        var finallySetKeyAndStartSession = function finallySetKeyAndStartSession1(mediaKeys) {
                            if (!_this._media) return;
                            _this._attemptSetMediaKeys(mediaKeys);
                            _this._generateRequestWithPreferredKeySession(e.initDataType, e.initData);
                        }; // Could use `Promise.finally` but some Promise polyfills are missing it
                        _this.mediaKeysPromise.then(finallySetKeyAndStartSession).catch(finallySetKeyAndStartSession);
                    };
                    _this._config = hls.config;
                    _this._widevineLicenseUrl = _this._config.widevineLicenseUrl;
                    _this._licenseXhrSetup = _this._config.licenseXhrSetup;
                    _this._emeEnabled = _this._config.emeEnabled;
                    _this._requestMediaKeySystemAccess = _this._config.requestMediaKeySystemAccessFunc;
                    _this._drmSystemOptions = hls.config.drmSystemOptions;
                    return _this;
                }
                /**
   * @param {string} keySystem Identifier for the key-system, see `KeySystems` enum
   * @returns {string} License server URL for key-system (if any configured, otherwise causes error)
   * @throws if a unsupported keysystem is passed
   */ var _proto = EMEController.prototype;
                _proto.getLicenseServerUrl = function getLicenseServerUrl(keySystem) {
                    switch(keySystem){
                        case KeySystems.WIDEVINE:
                            if (!this._widevineLicenseUrl) break;
                            return this._widevineLicenseUrl;
                    }
                    throw new Error("no license server URL configured for key-system \"" + keySystem + "\"");
                };
                _proto._attemptKeySystemAccess = function _attemptKeySystemAccess(keySystem, audioCodecs, videoCodecs) {
                    var _this2 = this;
                    // This can throw, but is caught in event handler callpath
                    var mediaKeySystemConfigs = eme_controller_getSupportedMediaKeySystemConfigurations(keySystem, audioCodecs, videoCodecs, this._drmSystemOptions);
                    logger["logger"].log('Requesting encrypted media key-system access'); // expecting interface like window.navigator.requestMediaKeySystemAccess
                    var keySystemAccessPromise = this.requestMediaKeySystemAccess(keySystem, mediaKeySystemConfigs);
                    this.mediaKeysPromise = keySystemAccessPromise.then(function(mediaKeySystemAccess) {
                        return _this2._onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess);
                    });
                    keySystemAccessPromise.catch(function(err) {
                        logger["logger"].error("Failed to obtain key-system \"" + keySystem + "\" access:", err);
                    });
                };
                /**
     * Handles obtaining access to a key-system
     * @private
     * @param {string} keySystem
     * @param {MediaKeySystemAccess} mediaKeySystemAccess https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySystemAccess
     */ _proto._onMediaKeySystemAccessObtained = function _onMediaKeySystemAccessObtained(keySystem, mediaKeySystemAccess) {
                    var _this3 = this;
                    logger["logger"].log("Access for key-system \"" + keySystem + "\" obtained");
                    var mediaKeysListItem = {
                        mediaKeysSessionInitialized: false,
                        mediaKeySystemAccess: mediaKeySystemAccess,
                        mediaKeySystemDomain: keySystem
                    };
                    this._mediaKeysList.push(mediaKeysListItem);
                    var mediaKeysPromise = Promise.resolve().then(function() {
                        return mediaKeySystemAccess.createMediaKeys();
                    }).then(function(mediaKeys) {
                        mediaKeysListItem.mediaKeys = mediaKeys;
                        logger["logger"].log("Media-keys created for key-system \"" + keySystem + "\"");
                        _this3._onMediaKeysCreated();
                        return mediaKeys;
                    });
                    mediaKeysPromise.catch(function(err) {
                        logger["logger"].error('Failed to create media-keys:', err);
                    });
                    return mediaKeysPromise;
                };
                _proto._onMediaKeysCreated = function _onMediaKeysCreated() {
                    var _this4 = this;
                    // check for all key-list items if a session exists, otherwise, create one
                    this._mediaKeysList.forEach(function(mediaKeysListItem) {
                        if (!mediaKeysListItem.mediaKeysSession) {
                            // mediaKeys is definitely initialized here
                            mediaKeysListItem.mediaKeysSession = mediaKeysListItem.mediaKeys.createSession();
                            _this4._onNewMediaKeySession(mediaKeysListItem.mediaKeysSession);
                        }
                    });
                };
                _proto._onNewMediaKeySession = function _onNewMediaKeySession(keySession) {
                    var _this5 = this;
                    logger["logger"].log("New key-system session " + keySession.sessionId);
                    keySession.addEventListener('message', function(event) {
                        _this5._onKeySessionMessage(keySession, event.message);
                    }, false);
                };
                _proto._onKeySessionMessage = function _onKeySessionMessage(keySession, message) {
                    logger["logger"].log('Got EME message event, creating license request');
                    this._requestLicense(message, function(data) {
                        logger["logger"].log("Received license data (length: " + (data ? data.byteLength : data) + "), updating key-session");
                        keySession.update(data);
                    });
                };
                /**
   * @private
   */ _proto._attemptSetMediaKeys = function _attemptSetMediaKeys(mediaKeys) {
                    if (!this._media) throw new Error('Attempted to set mediaKeys without first attaching a media element');
                    if (!this._hasSetMediaKeys) {
                        // FIXME: see if we can/want/need-to really to deal with several potential key-sessions?
                        var keysListItem = this._mediaKeysList[0];
                        if (!keysListItem || !keysListItem.mediaKeys) {
                            logger["logger"].error('Fatal: Media is encrypted but no CDM access or no keys have been obtained yet');
                            this.hls.trigger(events["default"].ERROR, {
                                type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
                                details: errors["ErrorDetails"].KEY_SYSTEM_NO_KEYS,
                                fatal: true
                            });
                            return;
                        }
                        logger["logger"].log('Setting keys for encrypted media');
                        this._media.setMediaKeys(keysListItem.mediaKeys);
                        this._hasSetMediaKeys = true;
                    }
                };
                _proto._generateRequestWithPreferredKeySession = function _generateRequestWithPreferredKeySession(initDataType, initData) {
                    var _this6 = this;
                    // FIXME: see if we can/want/need-to really to deal with several potential key-sessions?
                    var keysListItem = this._mediaKeysList[0];
                    if (!keysListItem) {
                        logger["logger"].error('Fatal: Media is encrypted but not any key-system access has been obtained yet');
                        this.hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
                            details: errors["ErrorDetails"].KEY_SYSTEM_NO_ACCESS,
                            fatal: true
                        });
                        return;
                    }
                    if (keysListItem.mediaKeysSessionInitialized) {
                        logger["logger"].warn('Key-Session already initialized but requested again');
                        return;
                    }
                    var keySession = keysListItem.mediaKeysSession;
                    if (!keySession) {
                        logger["logger"].error('Fatal: Media is encrypted but no key-session existing');
                        this.hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
                            details: errors["ErrorDetails"].KEY_SYSTEM_NO_SESSION,
                            fatal: true
                        });
                        return;
                    } // initData is null if the media is not CORS-same-origin
                    if (!initData) {
                        logger["logger"].warn('Fatal: initData required for generating a key session is null');
                        this.hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
                            details: errors["ErrorDetails"].KEY_SYSTEM_NO_INIT_DATA,
                            fatal: true
                        });
                        return;
                    }
                    logger["logger"].log("Generating key-session request for \"" + initDataType + "\" init data type");
                    keysListItem.mediaKeysSessionInitialized = true;
                    keySession.generateRequest(initDataType, initData).then(function() {
                        logger["logger"].debug('Key-session generation succeeded');
                    }).catch(function(err) {
                        logger["logger"].error('Error generating key-session request:', err);
                        _this6.hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
                            details: errors["ErrorDetails"].KEY_SYSTEM_NO_SESSION,
                            fatal: false
                        });
                    });
                };
                _proto._createLicenseXhr = function _createLicenseXhr(url, keyMessage, callback) {
                    var xhr = new XMLHttpRequest();
                    var licenseXhrSetup = this._licenseXhrSetup;
                    try {
                        if (licenseXhrSetup) try {
                            licenseXhrSetup(xhr, url);
                        } catch (e) {
                            // let's try to open before running setup
                            xhr.open('POST', url, true);
                            licenseXhrSetup(xhr, url);
                        }
                         // if licenseXhrSetup did not yet call open, let's do it now
                        if (!xhr.readyState) xhr.open('POST', url, true);
                    } catch (e) {
                        // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS
                        throw new Error("issue setting up KeySystem license XHR " + e);
                    } // Because we set responseType to ArrayBuffer here, callback is typed as handling only array buffers
                    xhr.responseType = 'arraybuffer';
                    xhr.onreadystatechange = this._onLicenseRequestReadyStageChange.bind(this, xhr, url, keyMessage, callback);
                    return xhr;
                };
                _proto._onLicenseRequestReadyStageChange = function _onLicenseRequestReadyStageChange(xhr, url, keyMessage, callback) {
                    switch(xhr.readyState){
                        case 4:
                            if (xhr.status === 200) {
                                this._requestLicenseFailureCount = 0;
                                logger["logger"].log('License request succeeded');
                                if (xhr.responseType !== 'arraybuffer') logger["logger"].warn('xhr response type was not set to the expected arraybuffer for license request');
                                callback(xhr.response);
                            } else {
                                logger["logger"].error("License Request XHR failed (" + url + "). Status: " + xhr.status + " (" + xhr.statusText + ")");
                                this._requestLicenseFailureCount++;
                                if (this._requestLicenseFailureCount > MAX_LICENSE_REQUEST_FAILURES) {
                                    this.hls.trigger(events["default"].ERROR, {
                                        type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
                                        details: errors["ErrorDetails"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                                        fatal: true
                                    });
                                    return;
                                }
                                var attemptsLeft = MAX_LICENSE_REQUEST_FAILURES - this._requestLicenseFailureCount + 1;
                                logger["logger"].warn("Retrying license request, " + attemptsLeft + " attempts left");
                                this._requestLicense(keyMessage, callback);
                            }
                            break;
                    }
                };
                _proto._generateLicenseRequestChallenge = function _generateLicenseRequestChallenge(keysListItem, keyMessage) {
                    switch(keysListItem.mediaKeySystemDomain){
                        // case KeySystems.PLAYREADY:
                        // from https://github.com/MicrosoftEdge/Demos/blob/master/eme/scripts/demo.js
                        /*
        if (this.licenseType !== this.LICENSE_TYPE_WIDEVINE) {
          // For PlayReady CDMs, we need to dig the Challenge out of the XML.
          var keyMessageXml = new DOMParser().parseFromString(String.fromCharCode.apply(null, new Uint16Array(keyMessage)), 'application/xml');
          if (keyMessageXml.getElementsByTagName('Challenge')[0]) {
              challenge = atob(keyMessageXml.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue);
          } else {
              throw 'Cannot find <Challenge> in key message';
          }
          var headerNames = keyMessageXml.getElementsByTagName('name');
          var headerValues = keyMessageXml.getElementsByTagName('value');
          if (headerNames.length !== headerValues.length) {
              throw 'Mismatched header <name>/<value> pair in key message';
          }
          for (var i = 0; i < headerNames.length; i++) {
              xhr.setRequestHeader(headerNames[i].childNodes[0].nodeValue, headerValues[i].childNodes[0].nodeValue);
          }
        }
        break;
      */ case KeySystems.WIDEVINE:
                            // For Widevine CDMs, the challenge is the keyMessage.
                            return keyMessage;
                    }
                    throw new Error("unsupported key-system: " + keysListItem.mediaKeySystemDomain);
                };
                _proto._requestLicense = function _requestLicense(keyMessage, callback) {
                    logger["logger"].log('Requesting content license for key-system');
                    var keysListItem = this._mediaKeysList[0];
                    if (!keysListItem) {
                        logger["logger"].error('Fatal error: Media is encrypted but no key-system access has been obtained yet');
                        this.hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
                            details: errors["ErrorDetails"].KEY_SYSTEM_NO_ACCESS,
                            fatal: true
                        });
                        return;
                    }
                    try {
                        var _url = this.getLicenseServerUrl(keysListItem.mediaKeySystemDomain);
                        var _xhr = this._createLicenseXhr(_url, keyMessage, callback);
                        logger["logger"].log("Sending license request to URL: " + _url);
                        var challenge = this._generateLicenseRequestChallenge(keysListItem, keyMessage);
                        _xhr.send(challenge);
                    } catch (e) {
                        logger["logger"].error("Failure requesting DRM license: " + e);
                        this.hls.trigger(events["default"].ERROR, {
                            type: errors["ErrorTypes"].KEY_SYSTEM_ERROR,
                            details: errors["ErrorDetails"].KEY_SYSTEM_LICENSE_REQUEST_FAILED,
                            fatal: true
                        });
                    }
                };
                _proto.onMediaAttached = function onMediaAttached(data) {
                    if (!this._emeEnabled) return;
                    var media = data.media; // keep reference of media
                    this._media = media;
                    media.addEventListener('encrypted', this._onMediaEncrypted);
                };
                _proto.onMediaDetached = function onMediaDetached() {
                    var media = this._media;
                    var mediaKeysList = this._mediaKeysList;
                    if (!media) return;
                    media.removeEventListener('encrypted', this._onMediaEncrypted);
                    this._media = null;
                    this._mediaKeysList = []; // Close all sessions and remove media keys from the video element.
                    Promise.all(mediaKeysList.map(function(mediaKeysListItem) {
                        if (mediaKeysListItem.mediaKeysSession) return mediaKeysListItem.mediaKeysSession.close().catch(function() {
                        // generated no key requests will throw an error.
                        });
                    })).then(function() {
                        return media.setMediaKeys(null);
                    }).catch(function() {
                    });
                } // TODO: Use manifest types here when they are defined
                ;
                _proto.onManifestParsed = function onManifestParsed(data) {
                    if (!this._emeEnabled) return;
                    var audioCodecs = data.levels.map(function(level) {
                        return level.audioCodec;
                    });
                    var videoCodecs = data.levels.map(function(level) {
                        return level.videoCodec;
                    });
                    this._attemptKeySystemAccess(KeySystems.WIDEVINE, audioCodecs, videoCodecs);
                };
                eme_controller_createClass(EMEController, [
                    {
                        key: "requestMediaKeySystemAccess",
                        get: function get() {
                            if (!this._requestMediaKeySystemAccess) throw new Error('No requestMediaKeySystemAccess function configured');
                            return this._requestMediaKeySystemAccess;
                        }
                    }
                ]);
                return EMEController;
            }(event_handler);
            /* harmony default export */ var eme_controller = eme_controller_EMEController;
            // CONCATENATED MODULE: ./src/config.ts
            function ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) symbols = symbols.filter(function(sym) {
                        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                    });
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }
            function _objectSpread(target) {
                for(var i = 1; i < arguments.length; i++){
                    var source = arguments[i] != null ? arguments[i] : {
                    };
                    if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
                        _defineProperty(target, key, source[key]);
                    });
                    else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    else ownKeys(Object(source)).forEach(function(key) {
                        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                    });
                }
                return target;
            }
            function _defineProperty(obj, key, value) {
                if (key in obj) Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
                else obj[key] = value;
                return obj;
            }
            /**
 * HLS config
 */ // import FetchLoader from './utils/fetch-loader';
            // If possible, keep hlsDefaultConfig shallow
            // It is cloned whenever a new Hls instance is created, by keeping the config
            // shallow the properties are cloned, and we don't end up manipulating the default
            var hlsDefaultConfig = _objectSpread(_objectSpread({
                autoStartLoad: true,
                // used by stream-controller
                startPosition: -1,
                // used by stream-controller
                defaultAudioCodec: void 0,
                // used by stream-controller
                debug: false,
                // used by logger
                capLevelOnFPSDrop: false,
                // used by fps-controller
                capLevelToPlayerSize: false,
                // used by cap-level-controller
                initialLiveManifestSize: 1,
                // used by stream-controller
                maxBufferLength: 30,
                // used by stream-controller
                maxBufferSize: 60000000,
                // used by stream-controller
                maxBufferHole: 0.5,
                // used by stream-controller
                lowBufferWatchdogPeriod: 0.5,
                // used by stream-controller
                highBufferWatchdogPeriod: 3,
                // used by stream-controller
                nudgeOffset: 0.1,
                // used by stream-controller
                nudgeMaxRetry: 3,
                // used by stream-controller
                maxFragLookUpTolerance: 0.25,
                // used by stream-controller
                liveSyncDurationCount: 3,
                // used by stream-controller
                liveMaxLatencyDurationCount: Infinity,
                // used by stream-controller
                liveSyncDuration: void 0,
                // used by stream-controller
                liveMaxLatencyDuration: void 0,
                // used by stream-controller
                liveDurationInfinity: false,
                // used by buffer-controller
                liveBackBufferLength: Infinity,
                // used by buffer-controller
                maxMaxBufferLength: 600,
                // used by stream-controller
                enableWorker: true,
                // used by demuxer
                enableSoftwareAES: true,
                // used by decrypter
                manifestLoadingTimeOut: 10000,
                // used by playlist-loader
                manifestLoadingMaxRetry: 1,
                // used by playlist-loader
                manifestLoadingRetryDelay: 1000,
                // used by playlist-loader
                manifestLoadingMaxRetryTimeout: 64000,
                // used by playlist-loader
                startLevel: void 0,
                // used by level-controller
                levelLoadingTimeOut: 10000,
                // used by playlist-loader
                levelLoadingMaxRetry: 4,
                // used by playlist-loader
                levelLoadingRetryDelay: 1000,
                // used by playlist-loader
                levelLoadingMaxRetryTimeout: 64000,
                // used by playlist-loader
                fragLoadingTimeOut: 20000,
                // used by fragment-loader
                fragLoadingMaxRetry: 6,
                // used by fragment-loader
                fragLoadingRetryDelay: 1000,
                // used by fragment-loader
                fragLoadingMaxRetryTimeout: 64000,
                // used by fragment-loader
                startFragPrefetch: false,
                // used by stream-controller
                fpsDroppedMonitoringPeriod: 5000,
                // used by fps-controller
                fpsDroppedMonitoringThreshold: 0.2,
                // used by fps-controller
                appendErrorMaxRetry: 3,
                // used by buffer-controller
                loader: xhr_loader,
                // loader: FetchLoader,
                fLoader: void 0,
                // used by fragment-loader
                pLoader: void 0,
                // used by playlist-loader
                xhrSetup: void 0,
                // used by xhr-loader
                licenseXhrSetup: void 0,
                // used by eme-controller
                // fetchSetup: void 0,
                abrController: abr_controller,
                bufferController: buffer_controller,
                capLevelController: cap_level_controller,
                fpsController: fps_controller,
                stretchShortVideoTrack: false,
                // used by mp4-remuxer
                maxAudioFramesDrift: 1,
                // used by mp4-remuxer
                forceKeyFrameOnDiscontinuity: true,
                // used by ts-demuxer
                abrEwmaFastLive: 3,
                // used by abr-controller
                abrEwmaSlowLive: 9,
                // used by abr-controller
                abrEwmaFastVoD: 3,
                // used by abr-controller
                abrEwmaSlowVoD: 9,
                // used by abr-controller
                abrEwmaDefaultEstimate: 500000,
                // 500 kbps  // used by abr-controller
                abrBandWidthFactor: 0.95,
                // used by abr-controller
                abrBandWidthUpFactor: 0.7,
                // used by abr-controller
                abrMaxWithRealBitrate: false,
                // used by abr-controller
                maxStarvationDelay: 4,
                // used by abr-controller
                maxLoadingDelay: 4,
                // used by abr-controller
                minAutoBitrate: 0,
                // used by hls
                emeEnabled: false,
                // used by eme-controller
                widevineLicenseUrl: void 0,
                // used by eme-controller
                drmSystemOptions: {
                },
                // used by eme-controller
                requestMediaKeySystemAccessFunc: requestMediaKeySystemAccess,
                // used by eme-controller
                testBandwidth: true
            }, timelineConfig()), {
            }, {
                subtitleStreamController: subtitle_stream_controller_SubtitleStreamController,
                subtitleTrackController: subtitle_track_controller,
                timelineController: timeline_controller,
                audioStreamController: audio_stream_controller,
                audioTrackController: audio_track_controller,
                emeController: eme_controller
            });
            function timelineConfig() {
                return {
                    cueHandler: cues_namespaceObject,
                    // used by timeline-controller
                    enableCEA708Captions: true,
                    // used by timeline-controller
                    enableWebVTT: true,
                    // used by timeline-controller
                    captionsTextTrack1Label: 'English',
                    // used by timeline-controller
                    captionsTextTrack1LanguageCode: 'en',
                    // used by timeline-controller
                    captionsTextTrack2Label: 'Spanish',
                    // used by timeline-controller
                    captionsTextTrack2LanguageCode: 'es',
                    // used by timeline-controller
                    captionsTextTrack3Label: 'Unknown CC',
                    // used by timeline-controller
                    captionsTextTrack3LanguageCode: '',
                    // used by timeline-controller
                    captionsTextTrack4Label: 'Unknown CC',
                    // used by timeline-controller
                    captionsTextTrack4LanguageCode: '',
                    // used by timeline-controller
                    renderTextTracksNatively: true
                };
            }
            // CONCATENATED MODULE: ./src/hls.ts
            function hls_ownKeys(object, enumerableOnly) {
                var keys = Object.keys(object);
                if (Object.getOwnPropertySymbols) {
                    var symbols = Object.getOwnPropertySymbols(object);
                    if (enumerableOnly) symbols = symbols.filter(function(sym) {
                        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                    });
                    keys.push.apply(keys, symbols);
                }
                return keys;
            }
            function hls_objectSpread(target) {
                for(var i = 1; i < arguments.length; i++){
                    var source = arguments[i] != null ? arguments[i] : {
                    };
                    if (i % 2) hls_ownKeys(Object(source), true).forEach(function(key) {
                        hls_defineProperty(target, key, source[key]);
                    });
                    else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                    else hls_ownKeys(Object(source)).forEach(function(key) {
                        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
                    });
                }
                return target;
            }
            function hls_defineProperty(obj, key, value) {
                if (key in obj) Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
                else obj[key] = value;
                return obj;
            }
            function hls_assertThisInitialized(self) {
                if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return self;
            }
            function hls_defineProperties(target, props) {
                for(var i = 0; i < props.length; i++){
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ("value" in descriptor) descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            function hls_createClass(Constructor, protoProps, staticProps) {
                if (protoProps) hls_defineProperties(Constructor.prototype, protoProps);
                if (staticProps) hls_defineProperties(Constructor, staticProps);
                return Constructor;
            }
            function hls_inheritsLoose(subClass, superClass) {
                subClass.prototype = Object.create(superClass.prototype);
                subClass.prototype.constructor = subClass;
                subClass.__proto__ = superClass;
            }
            /**
 * @module Hls
 * @class
 * @constructor
 */ var hls_Hls = /*#__PURE__*/ function(_Observer) {
                hls_inheritsLoose(Hls, _Observer);
                /**
   * @type {boolean}
   */ Hls.isSupported = function isSupported() {
                    return is_supported_isSupported();
                };
                hls_createClass(Hls, null, [
                    {
                        key: "version",
                        /**
     * @type {string}
     */ get: function get() {
                            return "0.14.17";
                        }
                    },
                    {
                        key: "Events",
                        get: function get() {
                            return events["default"];
                        }
                    },
                    {
                        key: "ErrorTypes",
                        get: function get() {
                            return errors["ErrorTypes"];
                        }
                    },
                    {
                        key: "ErrorDetails",
                        get: function get() {
                            return errors["ErrorDetails"];
                        }
                    },
                    {
                        key: "DefaultConfig",
                        get: function get() {
                            if (!Hls.defaultConfig) return hlsDefaultConfig;
                            return Hls.defaultConfig;
                        },
                        set: function set(defaultConfig) {
                            Hls.defaultConfig = defaultConfig;
                        }
                    }
                ]);
                function Hls(userConfig) {
                    var _this;
                    if (userConfig === void 0) userConfig = {
                    };
                    _this = _Observer.call(this) || this;
                    _this.config = void 0;
                    _this._autoLevelCapping = void 0;
                    _this.abrController = void 0;
                    _this.capLevelController = void 0;
                    _this.levelController = void 0;
                    _this.streamController = void 0;
                    _this.networkControllers = void 0;
                    _this.audioTrackController = void 0;
                    _this.subtitleTrackController = void 0;
                    _this.emeController = void 0;
                    _this.coreComponents = void 0;
                    _this.media = null;
                    _this.url = null;
                    var defaultConfig = Hls.DefaultConfig;
                    if ((userConfig.liveSyncDurationCount || userConfig.liveMaxLatencyDurationCount) && (userConfig.liveSyncDuration || userConfig.liveMaxLatencyDuration)) throw new Error('Illegal hls.js config: don\'t mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration');
                     // Shallow clone
                    _this.config = hls_objectSpread(hls_objectSpread({
                    }, defaultConfig), userConfig);
                    var _assertThisInitialize = hls_assertThisInitialized(_this), config = _assertThisInitialize.config;
                    if (config.liveMaxLatencyDurationCount !== void 0 && config.liveMaxLatencyDurationCount <= config.liveSyncDurationCount) throw new Error('Illegal hls.js config: "liveMaxLatencyDurationCount" must be gt "liveSyncDurationCount"');
                    if (config.liveMaxLatencyDuration !== void 0 && (config.liveSyncDuration === void 0 || config.liveMaxLatencyDuration <= config.liveSyncDuration)) throw new Error('Illegal hls.js config: "liveMaxLatencyDuration" must be gt "liveSyncDuration"');
                    Object(logger["enableLogs"])(config.debug);
                    _this._autoLevelCapping = -1; // core controllers and network loaders
                    /**
     * @member {AbrController} abrController
     */ var abrController = _this.abrController = new config.abrController(hls_assertThisInitialized(_this)); // eslint-disable-line new-cap
                    var bufferController = new config.bufferController(hls_assertThisInitialized(_this)); // eslint-disable-line new-cap
                    var capLevelController = _this.capLevelController = new config.capLevelController(hls_assertThisInitialized(_this)); // eslint-disable-line new-cap
                    var fpsController = new config.fpsController(hls_assertThisInitialized(_this)); // eslint-disable-line new-cap
                    var playListLoader = new playlist_loader(hls_assertThisInitialized(_this));
                    var fragmentLoader = new fragment_loader(hls_assertThisInitialized(_this));
                    var keyLoader = new key_loader(hls_assertThisInitialized(_this));
                    var id3TrackController = new id3_track_controller(hls_assertThisInitialized(_this)); // network controllers
                    /**
     * @member {LevelController} levelController
     */ var levelController = _this.levelController = new level_controller_LevelController(hls_assertThisInitialized(_this)); // FIXME: FragmentTracker must be defined before StreamController because the order of event handling is important
                    var fragmentTracker = new fragment_tracker_FragmentTracker(hls_assertThisInitialized(_this));
                    /**
     * @member {StreamController} streamController
     */ var streamController = _this.streamController = new stream_controller(hls_assertThisInitialized(_this), fragmentTracker);
                    var networkControllers = [
                        levelController,
                        streamController
                    ]; // optional audio stream controller
                    /**
     * @var {ICoreComponent | Controller}
     */ var Controller = config.audioStreamController;
                    if (Controller) networkControllers.push(new Controller(hls_assertThisInitialized(_this), fragmentTracker));
                    /**
     * @member {INetworkController[]} networkControllers
     */ _this.networkControllers = networkControllers;
                    /**
     * @var {ICoreComponent[]}
     */ var coreComponents = [
                        playListLoader,
                        fragmentLoader,
                        keyLoader,
                        abrController,
                        bufferController,
                        capLevelController,
                        fpsController,
                        id3TrackController,
                        fragmentTracker
                    ]; // optional audio track and subtitle controller
                    Controller = config.audioTrackController;
                    if (Controller) {
                        var audioTrackController = new Controller(hls_assertThisInitialized(_this));
                        /**
       * @member {AudioTrackController} audioTrackController
       */ _this.audioTrackController = audioTrackController;
                        coreComponents.push(audioTrackController);
                    }
                    Controller = config.subtitleTrackController;
                    if (Controller) {
                        var subtitleTrackController = new Controller(hls_assertThisInitialized(_this));
                        /**
       * @member {SubtitleTrackController} subtitleTrackController
       */ _this.subtitleTrackController = subtitleTrackController;
                        networkControllers.push(subtitleTrackController);
                    }
                    Controller = config.emeController;
                    if (Controller) {
                        var emeController = new Controller(hls_assertThisInitialized(_this));
                        /**
       * @member {EMEController} emeController
       */ _this.emeController = emeController;
                        coreComponents.push(emeController);
                    } // optional subtitle controllers
                    Controller = config.subtitleStreamController;
                    if (Controller) networkControllers.push(new Controller(hls_assertThisInitialized(_this), fragmentTracker));
                    Controller = config.timelineController;
                    if (Controller) coreComponents.push(new Controller(hls_assertThisInitialized(_this)));
                    /**
     * @member {ICoreComponent[]}
     */ _this.coreComponents = coreComponents;
                    return _this;
                }
                /**
   * Dispose of the instance
   */ var _proto = Hls.prototype;
                _proto.destroy = function destroy() {
                    logger["logger"].log('destroy');
                    this.trigger(events["default"].DESTROYING);
                    this.detachMedia();
                    this.coreComponents.concat(this.networkControllers).forEach(function(component) {
                        component.destroy();
                    });
                    this.url = null;
                    this.removeAllListeners();
                    this._autoLevelCapping = -1;
                };
                _proto.attachMedia = function attachMedia(media) {
                    logger["logger"].log('attachMedia');
                    this.media = media;
                    this.trigger(events["default"].MEDIA_ATTACHING, {
                        media: media
                    });
                };
                _proto.detachMedia = function detachMedia() {
                    logger["logger"].log('detachMedia');
                    this.trigger(events["default"].MEDIA_DETACHING);
                    this.media = null;
                };
                _proto.loadSource = function loadSource(url) {
                    url = url_toolkit["buildAbsoluteURL"](window.location.href, url, {
                        alwaysNormalize: true
                    });
                    logger["logger"].log("loadSource:" + url);
                    this.url = url; // when attaching to a source URL, trigger a playlist load
                    this.trigger(events["default"].MANIFEST_LOADING, {
                        url: url
                    });
                };
                _proto.startLoad = function startLoad(startPosition) {
                    if (startPosition === void 0) startPosition = -1;
                    logger["logger"].log("startLoad(" + startPosition + ")");
                    this.networkControllers.forEach(function(controller) {
                        controller.startLoad(startPosition);
                    });
                };
                _proto.stopLoad = function stopLoad() {
                    logger["logger"].log('stopLoad');
                    this.networkControllers.forEach(function(controller) {
                        controller.stopLoad();
                    });
                };
                _proto.swapAudioCodec = function swapAudioCodec() {
                    logger["logger"].log('swapAudioCodec');
                    this.streamController.swapAudioCodec();
                };
                _proto.recoverMediaError = function recoverMediaError() {
                    logger["logger"].log('recoverMediaError');
                    var media = this.media;
                    this.detachMedia();
                    if (media) this.attachMedia(media);
                };
                _proto.removeLevel = function removeLevel(levelIndex, urlId) {
                    if (urlId === void 0) urlId = 0;
                    this.levelController.removeLevel(levelIndex, urlId);
                };
                hls_createClass(Hls, [
                    {
                        key: "levels",
                        get: function get() {
                            return this.levelController.levels;
                        }
                    },
                    {
                        key: "currentLevel",
                        get: function get() {
                            return this.streamController.currentLevel;
                        },
                        set: function set(newLevel) {
                            logger["logger"].log("set currentLevel:" + newLevel);
                            this.loadLevel = newLevel;
                            this.streamController.immediateLevelSwitch();
                        }
                    },
                    {
                        key: "nextLevel",
                        get: function get() {
                            return this.streamController.nextLevel;
                        },
                        set: function set(newLevel) {
                            logger["logger"].log("set nextLevel:" + newLevel);
                            this.levelController.manualLevel = newLevel;
                            this.streamController.nextLevelSwitch();
                        }
                    },
                    {
                        key: "loadLevel",
                        get: function get() {
                            return this.levelController.level;
                        },
                        set: function set(newLevel) {
                            logger["logger"].log("set loadLevel:" + newLevel);
                            this.levelController.manualLevel = newLevel;
                        }
                    },
                    {
                        key: "nextLoadLevel",
                        get: function get() {
                            return this.levelController.nextLoadLevel;
                        },
                        set: function set(level) {
                            this.levelController.nextLoadLevel = level;
                        }
                    },
                    {
                        key: "firstLevel",
                        get: function get() {
                            return Math.max(this.levelController.firstLevel, this.minAutoLevel);
                        },
                        set: function set(newLevel) {
                            logger["logger"].log("set firstLevel:" + newLevel);
                            this.levelController.firstLevel = newLevel;
                        }
                    },
                    {
                        key: "startLevel",
                        get: function get() {
                            return this.levelController.startLevel;
                        },
                        set: function set(newLevel) {
                            logger["logger"].log("set startLevel:" + newLevel); // if not in automatic start level detection, ensure startLevel is greater than minAutoLevel
                            if (newLevel !== -1) newLevel = Math.max(newLevel, this.minAutoLevel);
                            this.levelController.startLevel = newLevel;
                        }
                    },
                    {
                        key: "capLevelToPlayerSize",
                        set: function set(shouldStartCapping) {
                            var newCapLevelToPlayerSize = !!shouldStartCapping;
                            if (newCapLevelToPlayerSize !== this.config.capLevelToPlayerSize) {
                                if (newCapLevelToPlayerSize) this.capLevelController.startCapping(); // If capping occurs, nextLevelSwitch will happen based on size.
                                else {
                                    this.capLevelController.stopCapping();
                                    this.autoLevelCapping = -1;
                                    this.streamController.nextLevelSwitch(); // Now we're uncapped, get the next level asap.
                                }
                                this.config.capLevelToPlayerSize = newCapLevelToPlayerSize;
                            }
                        }
                    },
                    {
                        key: "autoLevelCapping",
                        get: function get() {
                            return this._autoLevelCapping;
                        },
                        /**
     * Capping/max level value that should be used by automatic level selection algorithm (`ABRController`)
     * @type {number}
     */ set: function set(newLevel) {
                            logger["logger"].log("set autoLevelCapping:" + newLevel);
                            this._autoLevelCapping = newLevel;
                        }
                    },
                    {
                        key: "bandwidthEstimate",
                        get: function get() {
                            var bwEstimator = this.abrController._bwEstimator;
                            return bwEstimator ? bwEstimator.getEstimate() : NaN;
                        }
                    },
                    {
                        key: "autoLevelEnabled",
                        get: function get() {
                            return this.levelController.manualLevel === -1;
                        }
                    },
                    {
                        key: "manualLevel",
                        get: function get() {
                            return this.levelController.manualLevel;
                        }
                    },
                    {
                        key: "minAutoLevel",
                        get: function get() {
                            var levels = this.levels, minAutoBitrate = this.config.minAutoBitrate;
                            var len = levels ? levels.length : 0;
                            for(var i = 0; i < len; i++){
                                var levelNextBitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate, levels[i].bitrate) : levels[i].bitrate;
                                if (levelNextBitrate > minAutoBitrate) return i;
                            }
                            return 0;
                        }
                    },
                    {
                        key: "maxAutoLevel",
                        get: function get() {
                            var levels = this.levels, autoLevelCapping = this.autoLevelCapping;
                            var maxAutoLevel;
                            if (autoLevelCapping === -1 && levels && levels.length) maxAutoLevel = levels.length - 1;
                            else maxAutoLevel = autoLevelCapping;
                            return maxAutoLevel;
                        }
                    },
                    {
                        key: "nextAutoLevel",
                        get: function get() {
                            // ensure next auto level is between  min and max auto level
                            return Math.min(Math.max(this.abrController.nextAutoLevel, this.minAutoLevel), this.maxAutoLevel);
                        },
                        set: function set(nextLevel) {
                            this.abrController.nextAutoLevel = Math.max(this.minAutoLevel, nextLevel);
                        }
                    },
                    {
                        key: "audioTracks",
                        get: function get() {
                            var audioTrackController = this.audioTrackController;
                            return audioTrackController ? audioTrackController.audioTracks : [];
                        }
                    },
                    {
                        key: "audioTrack",
                        get: function get() {
                            var audioTrackController = this.audioTrackController;
                            return audioTrackController ? audioTrackController.audioTrack : -1;
                        },
                        set: function set(audioTrackId) {
                            var audioTrackController = this.audioTrackController;
                            if (audioTrackController) audioTrackController.audioTrack = audioTrackId;
                        }
                    },
                    {
                        key: "liveSyncPosition",
                        get: function get() {
                            return this.streamController.liveSyncPosition;
                        }
                    },
                    {
                        key: "subtitleTracks",
                        get: function get() {
                            var subtitleTrackController = this.subtitleTrackController;
                            return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];
                        }
                    },
                    {
                        key: "subtitleTrack",
                        get: function get() {
                            var subtitleTrackController = this.subtitleTrackController;
                            return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;
                        },
                        set: function set(subtitleTrackId) {
                            var subtitleTrackController = this.subtitleTrackController;
                            if (subtitleTrackController) subtitleTrackController.subtitleTrack = subtitleTrackId;
                        }
                    },
                    {
                        key: "subtitleDisplay",
                        get: function get() {
                            var subtitleTrackController = this.subtitleTrackController;
                            return subtitleTrackController ? subtitleTrackController.subtitleDisplay : false;
                        },
                        set: function set(value) {
                            var subtitleTrackController = this.subtitleTrackController;
                            if (subtitleTrackController) subtitleTrackController.subtitleDisplay = value;
                        }
                    }
                ]);
                return Hls;
            }(Observer1);
            hls_Hls.defaultConfig = void 0;
        /***/ },
        /***/ "./src/polyfills/number.js": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFiniteNumber", function() {
                return isFiniteNumber;
            });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_SAFE_INTEGER", function() {
                return MAX_SAFE_INTEGER;
            });
            var isFiniteNumber = Number.isFinite || function(value) {
                return typeof value === 'number' && isFinite(value);
            };
            var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
        /***/ },
        /***/ "./src/utils/get-self-scope.js": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSelfScope", function() {
                return getSelfScope;
            });
            function getSelfScope() {
                // see https://stackoverflow.com/a/11237259/589493
                if (typeof window === 'undefined') /* eslint-disable-next-line no-undef */ return self;
                else return window;
            }
        /***/ },
        /***/ "./src/utils/logger.js": function(module, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableLogs", function() {
                return enableLogs;
            });
            /* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "logger", function() {
                return logger;
            });
            /* harmony import */ var _get_self_scope__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-self-scope */ "./src/utils/get-self-scope.js");
            function noop() {
            }
            var fakeLogger = {
                trace: noop,
                debug: noop,
                log: noop,
                warn: noop,
                info: noop,
                error: noop
            };
            var exportedLogger = fakeLogger; // let lastCallTime;
            // function formatMsgWithTimeInfo(type, msg) {
            //   const now = Date.now();
            //   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';
            //   lastCallTime = now;
            //   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';
            //   return msg;
            // }
            function formatMsg(type, msg) {
                msg = '[' + type + '] > ' + msg;
                return msg;
            }
            var global = Object(_get_self_scope__WEBPACK_IMPORTED_MODULE_0__["getSelfScope"])();
            function consolePrintFn(type) {
                var func = global.console[type];
                if (func) return function() {
                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
                    if (args[0]) args[0] = formatMsg(type, args[0]);
                    func.apply(global.console, args);
                };
                return noop;
            }
            function exportLoggerFunctions(debugConfig) {
                for(var _len2 = arguments.length, functions = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)functions[_key2 - 1] = arguments[_key2];
                functions.forEach(function(type) {
                    exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);
                });
            }
            var enableLogs = function enableLogs1(debugConfig) {
                // check that console is available
                if (global.console && debugConfig === true || typeof debugConfig === 'object') {
                    exportLoggerFunctions(debugConfig, // 'trace',
                    'debug', 'log', 'info', 'warn', 'error'); // Some browsers don't allow to use bind on console object anyway
                    // fallback to default if needed
                    try {
                        exportedLogger.log();
                    } catch (e) {
                        exportedLogger = fakeLogger;
                    }
                } else exportedLogger = fakeLogger;
            };
            var logger = exportedLogger;
        /***/ }
    })["default"]);
});

},{}],"5V79J":[function(require,module,exports) {
"use strict";
var Refresh = require('react-refresh/runtime');
function debounce(func, delay) {
    var args;
    var timeout = undefined;
    return function(args1) {
        clearTimeout(timeout);
        timeout = setTimeout(function() {
            timeout = undefined;
            func.call(null, args1);
        }, delay);
    };
}
var enqueueUpdate = debounce(function() {
    Refresh.performReactRefresh();
}, 30); // Everthing below is either adapted or copied from
// https://github.com/facebook/metro/blob/61de16bd1edd7e738dd0311c89555a644023ab2d/packages/metro/src/lib/polyfills/require.js
// MIT License - Copyright (c) Facebook, Inc. and its affiliates.
module.exports.prelude = function(module) {
    window.$RefreshReg$ = function(type, id) {
        Refresh.register(type, module.id + ' ' + id);
    };
    window.$RefreshSig$ = Refresh.createSignatureFunctionForTransform;
};
module.exports.postlude = function(module) {
    if (isReactRefreshBoundary(module.exports)) {
        registerExportsForReactRefresh(module);
        if (module.hot) {
            module.hot.dispose(function(data) {
                if (Refresh.hasUnrecoverableErrors()) window.location.reload();
                data.prevExports = module.exports;
            });
            module.hot.accept(function(getParents) {
                var prevExports = module.hot.data.prevExports;
                var nextExports = module.exports; // Since we just executed the code for it, it's possible
                // that the new exports make it ineligible for being a boundary.
                var isNoLongerABoundary = !isReactRefreshBoundary(nextExports); // It can also become ineligible if its exports are incompatible
                // with the previous exports.
                // For example, if you add/remove/change exports, we'll want
                // to re-execute the importing modules, and force those components
                // to re-render. Similarly, if you convert a class component
                // to a function, we want to invalidate the boundary.
                var didInvalidate = shouldInvalidateReactRefreshBoundary(prevExports, nextExports);
                if (isNoLongerABoundary || didInvalidate) {
                    // We'll be conservative. The only case in which we won't do a full
                    // reload is if all parent modules are also refresh boundaries.
                    // In that case we'll add them to the current queue.
                    var parents = getParents();
                    if (parents.length === 0) {
                        // Looks like we bubbled to the root. Can't recover from that.
                        window.location.reload();
                        return;
                    }
                    return parents;
                }
                enqueueUpdate();
            });
        }
    }
};
function isReactRefreshBoundary(exports) {
    if (Refresh.isLikelyComponentType(exports)) return true;
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    return false;
    var hasExports = false;
    var areAllExportsComponents = true;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        hasExports = true;
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) // Don't invoke getters for CJS as they may have side effects.
        return false;
        var exportValue = exports[key];
        if (!Refresh.isLikelyComponentType(exportValue)) areAllExportsComponents = false;
    }
    return hasExports && areAllExportsComponents;
}
function shouldInvalidateReactRefreshBoundary(prevExports, nextExports) {
    var prevSignature = getRefreshBoundarySignature(prevExports);
    var nextSignature = getRefreshBoundarySignature(nextExports);
    if (prevSignature.length !== nextSignature.length) return true;
    for(var i = 0; i < nextSignature.length; i++){
        if (prevSignature[i] !== nextSignature[i]) return true;
    }
    return false;
} // When this signature changes, it's unsafe to stop at this refresh boundary.
function getRefreshBoundarySignature(exports) {
    var signature = [];
    signature.push(Refresh.getFamilyByType(exports));
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return signature;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        if (key === '__esModule') continue;
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        signature.push(key);
        signature.push(Refresh.getFamilyByType(exportValue));
    }
    return signature;
}
function registerExportsForReactRefresh(module) {
    var exports = module.exports, id = module.id;
    Refresh.register(exports, id + ' %exports%');
    if (exports == null || typeof exports !== 'object') // Exit if we can't iterate over exports.
    // (This is important for legacy environments.)
    return;
    let isESM = '__esModule' in exports;
    for(var key in exports){
        var desc = Object.getOwnPropertyDescriptor(exports, key);
        if (desc && desc.get && !isESM) continue;
        var exportValue = exports[key];
        Refresh.register(exportValue, id + ' %exports% ' + key);
    }
}

},{"react-refresh/runtime":"fNmB3"}],"8xIwr":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/react-jsx-runtime.development.js');

},{"./cjs/react-jsx-runtime.development.js":"hw7vv"}],"hw7vv":[function(require,module,exports) {
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    exports.Fragment = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        exports.Fragment = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableScopeAPI = false; // Experimental Create Event Handle API.
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
         // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).
        if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case exports.Fragment:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {
    };
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentName(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error("Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", getComponentName(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    /**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */ var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner
        };
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {
        }; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        }); // self and source are DEV only properties.
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    /**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */ function jsxDEV(type, config, maybeKey, source, self) {
        var propName; // Reserved names are extracted
        var props = {
        };
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.
        if (maybeKey !== undefined) key = '' + maybeKey;
        if (hasValidKey(config)) key = '' + config.key;
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
         // Resolve default props
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    /**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */ function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentName(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    /**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */ var ownerHasKeyUseWarning = {
    };
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    /**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */ function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error("Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.", currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    /**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */ function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (Array.isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) // This element was passed in a valid location.
        {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    /**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */ function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            // Intentionally inside to avoid triggering lazy initializers:
            var name = getComponentName(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:
            var _name = getComponentName(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    /**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */ function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (Array.isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.
        if (element == null) return element;
         // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (Array.isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === exports.Fragment) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions
    var jsxs = jsxWithValidationStatic;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();

},{"react":"6TuXu","object-assign":"jzTFF"}],"gkWJK":[function(require,module,exports) {
'use strict';
function checkDCE() {
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
}
module.exports = require('./cjs/react-dom.development.js');

},{"./cjs/react-dom.development.js":"uMwNA"}],"uMwNA":[function(require,module,exports) {
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var React = require('react');
    var _assign = require('object-assign');
    var Scheduler = require('scheduler');
    var tracing = require('scheduler/tracing');
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return '' + item;
        }); // Careful: RN currently depends on this prefix
        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    if (!React) throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class
    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.
    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var FundamentalComponent = 20;
    var ScopeComponent = 21;
    var Block = 22;
    var OffscreenComponent = 23;
    var LegacyHiddenComponent = 24;
    // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.
    var enableProfilerTimer = true; // Record durations for commit and passive effects phases.
    var enableFundamentalAPI = false; // Experimental Scope support.
    var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
    var warnAboutStringRefs = false;
    var allNativeEvents = new Set();
    /**
 * Mapping from registration name to event name
 */ var registrationNameDependencies = {
    };
    /**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */ var possibleRegistrationNames = {
    }; // Trust the developer to only use possibleRegistrationNames in true
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.
    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the filter are presumed to have this type.
    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.
    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.
    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.
    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.
    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */ var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    /* eslint-enable max-len */ var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {
    };
    var validatedAttributeNameCache = {
    };
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                // eslint-disable-line
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.
    var properties = {
    }; // These props are reserved by React. They shouldn't be written to the DOM.
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    }); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    }); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    }); // These are HTML boolean attributes.
    [
        'allowFullScreen',
        'async',
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    }); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.
    [
        'checked',
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    }); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.
    [
        'capture',
        'download' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    }); // These are HTML attributes that must be positive numbers.
    [
        'cols',
        'rows',
        'size',
        'span' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    }); // These are HTML attributes that must be numbers.
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML attribute filter.
    // Some of these attributes can be hard to find. This list was created by
    // scraping the MDN documentation.
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    }); // String SVG attributes with the xlink namespace.
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    }); // String SVG attributes with the xml namespace.
    [
        'xml:base',
        'xml:lang',
        'xml:space' // NOTE: if you add a camelCased prop to this list,
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    }); // These attributes accept URLs. These must not allow javascript: URLS.
    // These will also need to accept Trusted Types object in the future.
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    // and any newline or tab are filtered out as if they're not part of the URL.
    // https://url.spec.whatwg.org/#url-parsing
    // Tab or newline are defined as \r\n\t:
    // https://infra.spec.whatwg.org/#ascii-tab-or-newline
    // A C0 control is a code point in the range \u0000 NULL to \u001F
    // INFORMATION SEPARATOR ONE, inclusive:
    // https://infra.spec.whatwg.org/#c0-control-or-space
    /* eslint-disable max-len */ var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    /**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */ function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            if (propertyInfo.sanitizeURL) // If we haven't fully disabled javascript: URLs, and if
            // the hydration is successful of a javascript: URL, we
            // still want to warn on the client.
            sanitizeURL('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected;
                 // Even if this property uses a namespace we use getAttribute
                // because we assume its namespaced name is the same as our config.
                // To use getAttributeNS we need the local name which we don't have
                // in our config atm.
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    /**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */ function getValueForAttribute(node, name, expected) {
        if (!isAttributeNameSafe(name)) return;
         // If the object is an opaque reference ID, it's expected that
        // the next prop is different than the server value, so just return
        // expected
        if (isOpaqueHydratingObject(expected)) return expected;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        if (value === '' + expected) return expected;
        return value;
    }
    /**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */ function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
         // If the prop isn't in the special list, treat it as a simple attribute.
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else node.setAttribute(_attributeName, '' + value);
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value;
            return;
        } // The rest are treated as attributes with special cases.
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = '';
            else {
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.
    var REACT_ELEMENT_TYPE = 60103;
    var REACT_PORTAL_TYPE = 60106;
    var REACT_FRAGMENT_TYPE = 60107;
    var REACT_STRICT_MODE_TYPE = 60108;
    var REACT_PROFILER_TYPE = 60114;
    var REACT_PROVIDER_TYPE = 60109;
    var REACT_CONTEXT_TYPE = 60110;
    var REACT_FORWARD_REF_TYPE = 60112;
    var REACT_SUSPENSE_TYPE = 60113;
    var REACT_SUSPENSE_LIST_TYPE = 60120;
    var REACT_MEMO_TYPE = 60115;
    var REACT_LAZY_TYPE = 60116;
    var REACT_BLOCK_TYPE = 60121;
    var REACT_SERVER_BLOCK_TYPE = 60122;
    var REACT_FUNDAMENTAL_TYPE = 60117;
    var REACT_SCOPE_TYPE = 60119;
    var REACT_OPAQUE_ID_TYPE = 60128;
    var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
    var REACT_OFFSCREEN_TYPE = 60130;
    var REACT_LEGACY_HIDDEN_TYPE = 60131;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        REACT_ELEMENT_TYPE = symbolFor('react.element');
        REACT_PORTAL_TYPE = symbolFor('react.portal');
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
        REACT_PROFILER_TYPE = symbolFor('react.profiler');
        REACT_PROVIDER_TYPE = symbolFor('react.provider');
        REACT_CONTEXT_TYPE = symbolFor('react.context');
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
        REACT_MEMO_TYPE = symbolFor('react.memo');
        REACT_LAZY_TYPE = symbolFor('react.lazy');
        REACT_BLOCK_TYPE = symbolFor('react.block');
        REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
        REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
        REACT_SCOPE_TYPE = symbolFor('react.scope');
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
    }
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {
    }
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        /* eslint-enable react-internal/no-production-logging */ }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */ var props = {
                configurable: true,
                enumerable: true,
                writable: true
            }; // $FlowFixMe Flow thinks console is immutable.
            Object.defineProperties(console, {
                log: _assign({
                }, props, {
                    value: prevLog
                }),
                info: _assign({
                }, props, {
                    value: prevInfo
                }),
                warn: _assign({
                }, props, {
                    value: prevWarn
                }),
                error: _assign({
                }, props, {
                    value: prevError
                }),
                group: _assign({
                }, props, {
                    value: prevGroup
                }),
                groupCollapsed: _assign({
                }, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: _assign({
                }, props, {
                    value: prevGroupEnd
                })
            });
        /* eslint-enable react-internal/no-production-logging */ }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) // Extract the VM specific prefix used by each line.
        try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
         // We use the prefix to ensure our stacks line up with native stack frames.
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            // This should throw.
            if (construct) {
                // Something should be setting the props in the constructor.
                var Fake = function() {
                    throw Error();
                }; // $FlowFixMe
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        // We use a throwing setter instead of frozen or non-writable props
                        // because that won't throw in a non-strict mode function.
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    // We construct a different control for this case to include any extra
                    // frames added by the construct call.
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
                // This extracts the first frame from the sample that isn't also in the control.
                // Skipping one frame that we assume is the frame that calls the two.
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])// We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--;
                for(; s >= 1 && c >= 0; s--, c--)// Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                    // In V8, the first line is describing the message but other VMs don't.
                    // If we're about to return the first line, and the control is also on the same
                    // line, that's a pretty good indicator that our sample threw at same line as
                    // the control. I.e. before we entered the sample frame. So we ignore this result.
                    // This can happen if you passed a class to function component, or non-function.
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--; // We may still have similar intermediate frames from the construct call.
                        // The next one that isn't the same should be our match though.
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        } // Fallback to just using the name if we couldn't make it throw.
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    // Lazy may contain any component type so we recursively resolve it.
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {
                }
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case Block:
                return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentName(type) {
        if (type == null) // Host root, text node or just invalid type.
        return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                return getComponentName(type.type);
            case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentName(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentName(owner.type);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
         // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    function getIsRendering() {
        return isRendering;
    }
    // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'object':
            case 'string':
            case 'undefined':
                return value;
            default:
                // function, symbol are assigned as empty strings
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                currentValue = '' + value;
                set.call(this, value);
            }
        }); // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
         // TODO: Once it's just Fiber we can move this to node._wrapperState
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
        // that trying again will succeed
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    /**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */ function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = _assign({
        }, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || // eslint-disable-next-line
                node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            // Submit/reset inputs need the attribute removed completely to avoid
            // blank-text buttons.
            node.removeAttribute('value');
            return;
        }
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element; // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
            // default value provided by the browser. See: #12872
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
            // from being lost during SSR hydration.
            if (!isHydrating) // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            {
                if (initialValue !== node.value) node.value = initialValue;
            }
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue;
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.
        var name = node.name;
        if (name !== '') node.name = '';
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
             // If `rootNode.form` was non-null, then we could try `form.elements`,
            // but that sometimes behaves strangely in IE8. We could also try using
            // `form.getElementsByName`, but that will only return direct children
            // and won't include inputs that use the HTML5 `form=` attribute. Since
            // the input might not even be in a form. It might not even be in the
            // document. Let's just use the local `querySelectorAll` to ensure we don't
            // miss anything.
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                 // This will throw if radio buttons rendered by different copies of React
                // and the same name are rendered into the same form (same as #1939).
                // That's probably okay; we don't support it just as we don't support
                // mixing React radio buttons with non-React ones.
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                 // We need update the tracked value on the named cousin since the value
                // was changed but the input saw no event or value set
                updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
                // was previously checked to update will cause it to be come re-checked
                // as appropriate.
                updateWrapper(otherNode, otherProps);
            }
        }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    function flattenChildren(children) {
        var content = ''; // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).
        React.Children.forEach(children, function(child) {
            if (child == null) return;
            content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration code path too.
        });
        return content;
    }
    /**
 * Implements an <option> host component that warns when `selected` is set.
 */ function validateProps(element, props) {
        // This mirrors the code path above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
            if (child == null) return;
            if (typeof child === 'string' || typeof child === 'number') return;
            if (typeof child.type !== 'string') return;
            if (!didWarnInvalidChild) {
                didWarnInvalidChild = true;
                error('Only strings and numbers are supported as <option> children.');
            }
        });
         // TODO: Remove support for `selected` in <option>.
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    function getHostProps$1(element, props) {
        var hostProps = _assign({
            children: undefined
        }, props);
        var content = flattenChildren(props.children);
        if (content) hostProps.children = content;
        return hostProps;
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    /**
 * Validation function for `value` and `defaultValue`.
 */ function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var isArray = Array.isArray(props[propName]);
            if (props.multiple && !isArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && isArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {
            };
            for(var i = 0; i < selectedValues.length; i++)// Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            // Do not set `select.value` as exact behavior isn't consistent across all
            // browsers for all cases.
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    /**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */ function getHostProps$2(element, props) {
        return _assign({
        }, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            // For simplicity, reapply `defaultValue` if `multiple` is toggled.
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else // Revert the select back to its default unselected state.
            updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    /**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */ function getHostProps$3(element, props) {
        var node = element;
        if (!(props.dangerouslySetInnerHTML == null)) throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
         // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.
        var hostProps = _assign({
        }, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value; // Only bother fetching default value if we're going to use it
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (!(defaultValue == null)) throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                if (Array.isArray(children)) {
                    if (!(children.length <= 1)) throw Error("<textarea> can only have at most one child.");
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            // Cast `value` to a string to ensure the value is set correctly. While
            // browsers typically do this as necessary, jsdom doesn't.
            var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element; // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.
        var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') // We're leaving SVG.
        return HTML_NAMESPACE;
         // By default, pass namespace below.
        return parentNamespace;
    }
    /* globals MSApp */ /**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */ var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    /**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */ var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === Namespaces.svg) {
            if (!('innerHTML' in node)) {
                // IE does not have innerHTML for SVG nodes, so instead we inject the
                // new markup in a temp node and then move the child nodes across into
                // the target node
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    /**
 * HTML nodeType values that represent the type of the node
 */ var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */ var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    /**
 * CSS properties which accept numbers but are not in units of "px".
 */ var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    /**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */ function prefixKey(prefix1, key) {
        return prefix1 + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */ var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ]; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix1) {
            isUnitlessNumber[prefixKey(prefix1, prop)] = isUnitlessNumber[prop];
        });
    });
    /**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */ function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */ function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {
    };
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {
    };
    var warnedStyleValues = {
    };
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error("Style property values shouldn't contain a semicolon. Try \"%s: %s\" instead.", name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    /**
 * Operations for dealing with CSS properties.
 */ /**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */ function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    /**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */ function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    /**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */ function expandShorthandMap(styles) {
        var expanded = {
        };
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    /**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */ function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {
        };
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    // For HTML, certain tags should omit their close tag. We keep a list for
    // those special-case tags.
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.
    };
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.
    var voidElementTags = _assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
         // Note the use of `==` which checks for null or undefined.
        if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (!(props.style == null || typeof props.style === 'object')) throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    // When adding attributes to the HTML or SVG allowed attribute list, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.
    var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {
    };
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    function validateProperty(tagName, name) {
        if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            } // aria-* attributes should be lowercase; suggest the lowercase version.
            if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {
    };
    var warnedProperties$1 = {
    };
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        } // We can't rely on the event system being injected on the server.
        if (eventRegistry != null) {
            var registrationNameDependencies1 = eventRegistry.registrationNameDependencies, possibleRegistrationNames1 = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies1.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames1.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames1[lowerCasedName] : null;
            if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        } // Let the ARIA attribute hook validate ARIA attributes
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.", value, name, name, value, name);
            else error("Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props
        if (isReserved) return true;
         // Warn when a known attribute is a bad type
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    var IS_REPLAYED = 16;
    // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
    // we call willDeferLaterForLegacyFBSupport, thus not bailing out
    // will result in endless cycles like an infinite loop.
    // We also don't want to defer during event replaying.
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    /**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */ function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963
        if (target.correspondingUseElement) target = target.correspondingUseElement;
         // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) // Unmounted
        return;
        if (!(typeof restoreImpl === 'function')) throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var discreteUpdatesImpl = function(fn, a, b, c, d) {
        return fn(a, b, c, d);
    };
    var flushDiscreteUpdatesImpl = function() {
    };
    var batchedEventUpdatesImpl = batchedUpdatesImpl;
    var isInsideEventHandler = false;
    var isBatchingEventUpdates = false;
    function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            // If a controlled event was fired, we may need to restore the state of
            // the DOM node back to the controlled value. This is necessary when React
            // bails out of the update without touching the DOM.
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, bookkeeping);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(a, b);
        isBatchingEventUpdates = true;
        try {
            return batchedEventUpdatesImpl(fn, a, b);
        } finally{
            isBatchingEventUpdates = false;
            finishEventHandler();
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler;
        isInsideEventHandler = true;
        try {
            return discreteUpdatesImpl(fn, a, b, c, d);
        } finally{
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) finishEventHandler();
        }
    }
    function flushDiscreteUpdatesIfNeeded(timeStamp) {
        if (!isInsideEventHandler) flushDiscreteUpdatesImpl();
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        discreteUpdatesImpl = _discreteUpdatesImpl;
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    /**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */ function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) // Work in progress (ex: onload events in incremental mode).
        return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) // Work in progress.
        return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (!(!listener || typeof listener === 'function')) throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
    if (canUseDOM) try {
        var options = {
        }; // $FlowFixMe: Ignore Flow complaining about needing a value
        Object.defineProperty(options, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error1) {
            this.onError(error1);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    // In DEV mode, we swap out invokeGuardedCallback for a special version
    // that plays more nicely with the browser's DevTools. The idea is to preserve
    // "Pause on exceptions" behavior. Because React wraps all user-provided
    // functions in invokeGuardedCallback, and the production version of
    // invokeGuardedCallback uses a try-catch, all user exceptions are treated
    // like caught exceptions, and the DevTools won't pause unless the developer
    // takes the extra step of enabling pause on caught exceptions. This is
    // unintuitive, though, because even though React has caught the error, from
    // the developer's perspective, the error is uncaught.
    //
    // To preserve the expected "Pause on exceptions" behavior, we don't use a
    // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
    // DOM node, and call the user-provided callback from inside an event handler
    // for that fake event. If the callback throws, the error is "captured" using
    // a global event handler. But because the error happens in a different
    // event loop context, it does not interrupt the normal program flow.
    // Effectively, this gives us try-catch behavior without actually using
    // try-catch. Neat!
    // Check that the browser supports the APIs we need to implement our special
    // DEV version of invokeGuardedCallback
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.
            var didError = true; // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.
            var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                // We immediately remove the callback from event listeners so that
                // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
                // nested call would trigger the fake event handlers of any call higher
                // in the stack.
                fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
                // window.event assignment in both IE <= 10 as they throw an error
                // "Member not found" in strict mode, and in Firefox which does not
                // support window.event.
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.
            var error1; // Use this to track whether the error event is ever called.
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error1 = event.error;
                didSetError = true;
                if (error1 === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    // Some other error handler has prevented default.
                    // Browsers silence the error report if this happens.
                    // We'll remember this to later decide whether to log it or not.
                    if (error1 != null && typeof error1 === 'object') try {
                        error1._suppressLogging = true;
                    } catch (inner) {
                    }
                }
            } // Create a fake event type.
            var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) // The callback errored, but the error event never fired.
                error1 = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error1 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error1);
            } // Remove our event listeners
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                // Something went really wrong, and our event was not dispatched.
                // https://github.com/facebook/react/issues/16734
                // https://github.com/facebook/react/issues/16585
                // Fall back to the production implementation.
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error1) {
            hasError = true;
            caughtError = error1;
        }
    };
    /**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */ function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error1 = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error1;
            }
        }
    }
    /**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */ function rethrowCaughtError() {
        if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error3 = caughtError;
            hasError = false;
            caughtError = null;
            return error3;
        } else throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    /**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */ function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    // Don't change these two values. They're used by React Dev Tools.
    var NoFlags = /*                      */ 0;
    var PerformedWork = /*                */ 1; // You can change the rest (and add more).
    var Placement = /*                    */ 2;
    var Update = /*                       */ 4;
    var PlacementAndUpdate = /*           */ 6;
    var Deletion = /*                     */ 8;
    var ContentReset = /*                 */ 16;
    var Callback = /*                     */ 32;
    var DidCapture = /*                   */ 64;
    var Ref = /*                          */ 128;
    var Snapshot = /*                     */ 256;
    var Passive = /*                      */ 512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.
    var PassiveUnmountPendingDev = /*     */ 8192;
    var Hydrating = /*                    */ 1024;
    var HydratingAndUpdate = /*           */ 1028; // Passive & Update & Callback & Ref & Snapshot
    var LifecycleEffectMask = /*          */ 932; // Union of all host effects
    var HostEffectMask = /*               */ 2047; // These are not really side effects, but we still reuse this field.
    var Incomplete = /*                   */ 2048;
    var ShouldCapture = /*                */ 4096;
    var ForceUpdateForLegacySuspense = /* */ 16384; // Static tags describe aspects of a fiber that are not specific to a render,
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            // If there is no alternate, this might be a new tree that isn't inserted
            // yet. If it is, then it will have a pending insertion effect on it.
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) // This is an insertion or in-progress hydration. The nearest possible
                // mounted fiber is the parent but we need to continue to figure out
                // if that one is still mounted.
                nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return nearestMounted;
         // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current1 = fiber.alternate;
                if (current1 !== null) suspenseState = current1.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) throw Error("Unable to find node on an unmounted component.");
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            // If there is no alternate, then we only need to check if it is mounted.
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) throw Error("Unable to find node on an unmounted component.");
            if (nearestMounted !== fiber) return null;
            return fiber;
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                // There is no alternate. This is an unusual case. Currently, it only
                // happens when a Suspense component is hidden. An extra fragment fiber
                // is inserted in between the Suspense fiber and its children. Skip
                // over this extra fragment fiber and proceed to the next parent.
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                } // If there's no parent, we're at the root.
                break;
            } // If both copies of the parent fiber point to the same child, we can
            // assume that the child is current. This happens when we bailout on low
            // priority: the bailed out fiber's child reuses the current child.
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        // We've determined that A is the current branch.
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        // We've determined that B is the current branch.
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                } // We should never have an alternate for any mounting node. So the only
                throw Error("Unable to find node on an unmounted component.");
            }
            if (a.return !== b.return) {
                // The return pointer of A and the return pointer of B point to different
                // fibers. We assume that return pointers never criss-cross, so A must
                // belong to the child set of A.return, and B must belong to the child
                // set of B.return.
                a = parentA;
                b = parentB;
            } else {
                // The return pointers point to the same fiber. We'll have to use the
                // default, slow path: scan the child sets of each parent alternate to see
                // which child belongs to which set.
                //
                // Search parent A's child set
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    // Search parent B's child set
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (!(a.alternate === b)) throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.
        if (!(a.tag === HostRoot)) throw Error("Unable to find node on an unmounted component.");
        if (a.stateNode.current === a) // We've determined that A is the current branch.
        return fiber;
         // Otherwise B has to be current branch.
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText) return node;
            else if (node.child) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        if (!currentParent) return null;
         // Next we'll drill down this component to find the first HostComponent/Text.
        var node = currentParent;
        while(true){
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) return node;
            else if (node.child && node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === currentParent) return null;
            while(!node.sibling){
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable
        return null;
    }
    function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber;
        var parentFiberAlternate = parentFiber.alternate;
        while(node !== null){
            if (node === parentFiber || node === parentFiberAlternate) return true;
            node = node.return;
        }
        return false;
    }
    var attemptUserBlockingHydration;
    function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn;
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    } // TODO: Upgrade this definition once we're on a newer version of Flow that
    var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.
    var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
    // if the last target was dehydrated.
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null; // For pointer events there can be one latest event per pointerId.
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.
    var queuedExplicitHydrationTargets = [];
    function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0;
    }
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
        queuedDiscreteEvents.push(queuedEvent);
    } // Resets the replaying for this type of continuous event to no event.
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) // Attempt to increase the priority of this target.
                attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    } // Check if this target is unblocked. Returns true if it's unblocked.
    function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        // We're blocked on hydrating this boundary.
                        // Increase its priority.
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                            Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                                attemptHydrationAtCurrentPriority(nearestMounted);
                            });
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
                        // a root other than sync.
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
                // We're still blocked. Try again later.
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            } // This target container was successfully dispatched. Try the next.
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false; // First replay discrete events.
        while(queuedDiscreteEvents.length > 0){
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
                // We're still blocked.
                // Increase the priority of this boundary to unblock
                // the next discrete event.
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) attemptUserBlockingHydration(_fiber4);
                break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while(targetContainers.length > 0){
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                    // We're still blocked. Try again later.
                    nextDiscreteEvent.blockedOn = nextBlockedOn;
                    break;
                } // This target container was successfully dispatched. Try the next.
                targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift();
        } // Next replay any continuous events.
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
                // now unblocked. This first might not actually be unblocked yet.
                // We could check it early to avoid scheduling an unnecessary callback.
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
            // worth it because we expect very few discrete events to queue up and once
            // we are actually fully unblocked it will be fast to replay them.
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) // We're unblocked.
                queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var DiscreteEvent = 0;
    var UserBlockingEvent = 1;
    var ContinuousEvent = 2;
    /**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */ function makePrefixMap(styleProp, eventName) {
        var prefixes1 = {
        };
        prefixes1[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes1['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes1['Moz' + styleProp] = 'moz' + eventName;
        return prefixes1;
    }
    /**
 * A list of event names to a configurable list of vendor prefixes.
 */ var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
 * Event names that have already been detected and prefixed (if applicable).
 */ var prefixedEventNames = {
    };
    /**
 * Element to check for prefixes on.
 */ var style = {
    };
    /**
 * Bootstrap if a DOM exists.
 */ if (canUseDOM) {
        style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        } // Same as above
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    /**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */ function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
    // the code required to apply the same logic for event prioritization and that of the
    // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
    // duplication (for which there would be quite a bit). For the events that are not needed
    // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
    // array of top level events.
    // Lastly, we ignore prettier so we can keep the formatting sane.
    // prettier-ignore
    var discreteEventPairsForSimpleEventPlugin = [
        'cancel',
        'cancel',
        'click',
        'click',
        'close',
        'close',
        'contextmenu',
        'contextMenu',
        'copy',
        'copy',
        'cut',
        'cut',
        'auxclick',
        'auxClick',
        'dblclick',
        'doubleClick',
        'dragend',
        'dragEnd',
        'dragstart',
        'dragStart',
        'drop',
        'drop',
        'focusin',
        'focus',
        'focusout',
        'blur',
        'input',
        'input',
        'invalid',
        'invalid',
        'keydown',
        'keyDown',
        'keypress',
        'keyPress',
        'keyup',
        'keyUp',
        'mousedown',
        'mouseDown',
        'mouseup',
        'mouseUp',
        'paste',
        'paste',
        'pause',
        'pause',
        'play',
        'play',
        'pointercancel',
        'pointerCancel',
        'pointerdown',
        'pointerDown',
        'pointerup',
        'pointerUp',
        'ratechange',
        'rateChange',
        'reset',
        'reset',
        'seeked',
        'seeked',
        'submit',
        'submit',
        'touchcancel',
        'touchCancel',
        'touchend',
        'touchEnd',
        'touchstart',
        'touchStart',
        'volumechange',
        'volumeChange'
    ];
    var otherDiscreteEvents = [
        'change',
        'selectionchange',
        'textInput',
        'compositionstart',
        'compositionend',
        'compositionupdate'
    ];
    var userBlockingPairsForSimpleEventPlugin = [
        'drag',
        'drag',
        'dragenter',
        'dragEnter',
        'dragexit',
        'dragExit',
        'dragleave',
        'dragLeave',
        'dragover',
        'dragOver',
        'mousemove',
        'mouseMove',
        'mouseout',
        'mouseOut',
        'mouseover',
        'mouseOver',
        'pointermove',
        'pointerMove',
        'pointerout',
        'pointerOut',
        'pointerover',
        'pointerOver',
        'scroll',
        'scroll',
        'toggle',
        'toggle',
        'touchmove',
        'touchMove',
        'wheel',
        'wheel'
    ]; // prettier-ignore
    var continuousPairsForSimpleEventPlugin = [
        'abort',
        'abort',
        ANIMATION_END,
        'animationEnd',
        ANIMATION_ITERATION,
        'animationIteration',
        ANIMATION_START,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        TRANSITION_END,
        'transitionEnd',
        'waiting',
        'waiting'
    ];
    /**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */ function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for(var i = 0; i < eventTypes.length; i += 2){
            var topEvent = eventTypes[i];
            var event = eventTypes[i + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = 'on' + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [
                topEvent
            ]);
        }
    }
    function setEventPriorities(eventTypes, priority) {
        for(var i = 0; i < eventTypes.length; i++)eventPriorities.set(eventTypes[i], priority);
    }
    function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.
        return priority === undefined ? ContinuousEvent : priority;
    }
    function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
        registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
        registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
        setEventPriorities(otherDiscreteEvents, DiscreteEvent);
    }
    var Scheduler_now = Scheduler.unstable_now;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority = 99;
    var UserBlockingPriority = 98;
    var NormalPriority = 97;
    var LowPriority = 96;
    var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority = 90;
    var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    var SyncLanePriority = 15;
    var SyncBatchedLanePriority = 14;
    var InputDiscreteHydrationLanePriority = 13;
    var InputDiscreteLanePriority = 12;
    var InputContinuousHydrationLanePriority = 11;
    var InputContinuousLanePriority = 10;
    var DefaultHydrationLanePriority = 9;
    var DefaultLanePriority = 8;
    var TransitionHydrationPriority = 7;
    var TransitionPriority = 6;
    var RetryLanePriority = 5;
    var SelectiveHydrationLanePriority = 4;
    var IdleHydrationLanePriority = 3;
    var IdleLanePriority = 2;
    var OffscreenLanePriority = 1;
    var NoLanePriority = 0;
    var TotalLanes = 31;
    var NoLanes = /*                        */ 0;
    var NoLane = /*                          */ 0;
    var SyncLane = /*                        */ 1;
    var SyncBatchedLane = /*                 */ 2;
    var InputDiscreteHydrationLane = /*      */ 4;
    var InputDiscreteLanes = /*                    */ 24;
    var InputContinuousHydrationLane = /*           */ 32;
    var InputContinuousLanes = /*                  */ 192;
    var DefaultHydrationLane = /*            */ 256;
    var DefaultLanes = /*                   */ 3584;
    var TransitionHydrationLane = /*                */ 4096;
    var TransitionLanes = /*                       */ 4186112;
    var RetryLanes = /*                            */ 62914560;
    var SomeRetryLane = /*                  */ 33554432;
    var SelectiveHydrationLane = /*          */ 67108864;
    var NonIdleLanes = /*                                 */ 134217727;
    var IdleHydrationLane = /*               */ 134217728;
    var IdleLanes = /*                             */ 805306368;
    var OffscreenLane = /*                   */ 1073741824;
    var NoTimestamp = -1;
    function setCurrentUpdateLanePriority(newLanePriority) {
    } // "Registers" used to "return" multiple values
    // Used by getHighestPriorityLanes and getNextLanes:
    var return_highestLanePriority = DefaultLanePriority;
    function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
        }
        if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
        }
        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
        }
        var inputDiscreteLanes = InputDiscreteLanes & lanes;
        if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
        }
        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
        }
        var inputContinuousLanes = InputContinuousLanes & lanes;
        if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
        }
        if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
        }
        var defaultLanes = DefaultLanes & lanes;
        if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
        }
        if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
        }
        var transitionLanes = TransitionLanes & lanes;
        if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
        }
        var retryLanes = RetryLanes & lanes;
        if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
        }
        if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
        }
        if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
        }
        var idleLanes = IdleLanes & lanes;
        if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
        }
        if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
        }
        error('Should have found matching lanes. This is a bug in React.');
        return_highestLanePriority = DefaultLanePriority;
        return lanes;
    }
    function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch(schedulerPriorityLevel){
            case ImmediatePriority:
                return SyncLanePriority;
            case UserBlockingPriority:
                return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
                // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
                return DefaultLanePriority;
            case IdlePriority:
                return IdleLanePriority;
            default:
                return NoLanePriority;
        }
    }
    function lanePriorityToSchedulerPriority(lanePriority) {
        switch(lanePriority){
            case SyncLanePriority:
            case SyncBatchedLanePriority:
                return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
                return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
                return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
                return IdlePriority;
            case NoLanePriority:
                return NoPriority;
            default:
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
        }
    }
    function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
        }
        var nextLanes = NoLanes;
        var nextLanePriority = NoLanePriority;
        var expiredLanes = root.expiredLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes; // Check if any work has expired.
        if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
        } else {
            // Do not work on any idle work until all the non-idle work has finished,
            // even if the work is suspended.
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else {
                    var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                    if (nonIdlePingedLanes !== NoLanes) {
                        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                        nextLanePriority = return_highestLanePriority;
                    }
                }
            } else {
                // The only remaining work is Idle.
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(unblockedLanes);
                    nextLanePriority = return_highestLanePriority;
                } else if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                }
            }
        }
        if (nextLanes === NoLanes) // This should only be reachable if we're suspended
        // TODO: Consider warning in this path if a fallback timer is not scheduled.
        return NoLanes;
         // If there are higher priority lanes, we'll include them even if they
        // are suspended.
        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && // bother waiting until the root is complete.
        (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) return wipLanes;
            else return_highestLanePriority = nextLanePriority;
        } // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        // TODO: Expiration heuristic is constant per lane, so could use a map.
        getHighestPriorityLanes(lane);
        var priority = return_highestLanePriority;
        if (priority >= InputContinuousLanePriority) // User interactions should expire slightly more quickly.
        //
        // NOTE: This is set to the corresponding constant as in Scheduler.js. When
        // we made it larger, a product metric in www regressed, suggesting there's
        // a user interaction that's being starved by a series of synchronous
        // updates. If that theory is correct, the proper solution is to fix the
        // starvation. However, this scenario supports the idea that expiration
        // times are an important safeguard when starvation does happen.
        //
        // Also note that, in the case of user input specifically, this will soon no
        // longer be an issue because we plan to make user input synchronous by
        // default (until you enter `startTransition`, of course.)
        //
        // If weren't planning to make these updates synchronous soon anyway, I
        // would probably make this number a configurable parameter.
        return currentTime + 250;
        else if (priority >= TransitionPriority) return currentTime + 5000;
        else // Anything idle priority or lower should never expire.
        return NoTimestamp;
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) // Assumes timestamps are monotonically increasing.
                expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) // This lane expired
            root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    } // This returns the highest priority pending lanes regardless of whether they
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function returnNextLanesPriority() {
        return return_highestLanePriority;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    } // To ensure consistency across multiple updates in the same event, this should
    // be a pure function, so that it always returns the same lane for given inputs.
    function findUpdateLane(lanePriority, wipLanes) {
        switch(lanePriority){
            case NoLanePriority:
                break;
            case SyncLanePriority:
                return SyncLane;
            case SyncBatchedLanePriority:
                return SyncBatchedLane;
            case InputDiscreteLanePriority:
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) // Shift to the next priority level
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
                return _lane;
            case InputContinuousLanePriority:
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) // Shift to the next priority level
                return findUpdateLane(DefaultLanePriority, wipLanes);
                return _lane2;
            case DefaultLanePriority:
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                    // If all the default lanes are already being worked on, look for a
                    // lane in the transition range.
                    _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                    if (_lane3 === NoLane) // All the transition lanes are taken, too. This should be very
                    // rare, but as a last resort, pick a default lane. This will have
                    // the effect of interrupting the current work-in-progress render.
                    _lane3 = pickArbitraryLane(DefaultLanes);
                }
                return _lane3;
            case TransitionPriority:
            case RetryLanePriority:
                break;
            case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) lane = pickArbitraryLane(IdleLanes);
                return lane;
        }
        throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findTransitionLane(wipLanes, pendingLanes) {
        // First look for lanes that are completely unclaimed, i.e. have no
        // pending work.
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
        if (lane === NoLane) {
            // If all lanes have pending work, look for a lane that isn't currently
            // being worked on.
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) // If everything is being worked on, pick any lane. This has the
            // effect of interrupting the current work-in-progress.
            lane = pickArbitraryLane(TransitionLanes);
        }
        return lane;
    } // To ensure consistency across multiple updates in the same event, this should
    // be pure function, so that it always returns the same lane for given inputs.
    function findRetryLane(wipLanes) {
        // This is a fork of `findUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
        if (lane === NoLane) lane = pickArbitraryLane(RetryLanes);
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function getLowestPriorityLane(lanes) {
        // This finds the most significant non-zero bit.
        var index = 31 - clz32(lanes);
        return index < 0 ? NoLanes : 1 << index;
    }
    function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1;
    }
    function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set1, subset) {
        return (set1 & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set1, subset) {
        return set1 & ~subset;
    } // Seems redundant, but it changes the type from a single lane (used for
    // updates) to a group of lanes (used for flushing work).
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
        // it's not practical to try every single possible combination. We need a
        // heuristic to decide which lanes to attempt to render, and in which batches.
        // For now, we use the same heuristic as in the old ExpirationTimes model:
        // retry any lane at equal or lower priority, but don't try updates at higher
        // priority without also including the lower priority updates. This works well
        // when considering updates across different priority levels, but isn't
        // sufficient for updates within the same priority, since we want to treat
        // those updates as parallel.
        // Unsuspend any update at equal or lower priority.
        var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111
        root.suspendedLanes &= higherPriorityLanes;
        root.pingedLanes &= higherPriorityLanes;
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markDiscreteUpdatesExpired(root) {
        root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
    }
    function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes;
    }
    function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes; // Let's try everything again
        root.suspendedLanes = 0;
        root.pingedLanes = 0;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = entangledLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
    // Based on:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(lanes) {
        if (lanes === 0) return 32;
        return 31 - (log(lanes) / LN2 | 0) | 0;
    }
    // Intentionally not named imports because Rollup would use dynamic dispatch for
    var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?
    var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
    // We'd like to remove this but it's not clear if this is safe.
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
            case ContinuousEvent:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
        discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
    }
    function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
        runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        var allowReplay = true;
        // TODO: replaying capture phase events is currently broken
        // because we used to do it during top-level native bubble handlers
        // but now we use different bubble and capture handlers.
        // In eager mode, we attach capture listeners early, so we need
        // to filter them out until we fix the logic to handle them correctly.
        // This could've been outside the flag but I put it inside to reduce risk.
        allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
        if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            // If we already have a queue of discrete events, and this is another discrete
            // event, then we can't dispatch it regardless of its target, since they
            // need to dispatch in order.
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
        }
        var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            // We successfully dispatched this event.
            if (allowReplay) clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
                // This this to be replayed later once the target is available.
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) return;
             // We need to clear only if we didn't queue because
            // queueing is accummulative.
            clearIfContinuousEvent(domEventName, nativeEvent);
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.
    function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) // This tree has been unmounted already. Dispatch without a target.
            targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) // Queue the event to be replayed later. Abort dispatching since we
                    // don't want this event dispatched twice through the event system.
                    // TODO: If this is the first discrete event in the queue. Schedule an increased
                    // priority for this boundary.
                    return instance;
                     // This shouldn't happen, something went wrong but to avoid blocking
                    // the whole system, dispatch the event without a target.
                    // TODO: Warn.
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (root.hydrate) // If this happens during a replay something went wrong and it might block
                    // the whole system.
                    return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) // If we get an event (ex: img onload) before committing that
                // component's mount, ignore it for now (that is, treat it as if it was an
                // event on a non-React tree). We might also consider queueing events and
                // dispatching them after the mount.
                targetInst = null;
            }
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.
        return null;
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    /**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */ var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    /**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */ function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
         // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.
        if (charCode === 10) charCode = 13;
         // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    } // This is intentionally a factory so that we have different returned constructors.
    // If we had a single constructor, it would be megamorphic and engines would deopt.
    function createSyntheticEvent(Interface) {
        /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */ function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
                else if (typeof event.cancelBubble !== 'unknown') // The ChangeEventPlugin registers a "propertychange" event for
                // IE. This event does not support bubbling or cancelling, and
                // any references to cancelBubble throw "Member not found".  A
                // typeof check of "unknown" circumvents this issue (and is also
                // IE specific).
                event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */ persist: function() {
            },
            /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */ isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = _assign({
    }, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    /**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var MouseEventInterface = _assign({
    }, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
             // Don't need to call updateMouseMovementPolyfillState() here
            // because it's guaranteed to have already run when movementX
            // was copied.
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    /**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var DragEventInterface = _assign({
    }, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    /**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var FocusEventInterface = _assign({
    }, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */ var AnimationEventInterface = _assign({
    }, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */ var ClipboardEventInterface = _assign({
    }, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */ var CompositionEventInterface = _assign({
    }, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */ // Happens to share the same list for now.
    var SyntheticInputEvent = SyntheticCompositionEvent;
    /**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    /**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */ var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    /**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */ function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            // Normalize inconsistent values reported by browsers due to
            // implementations of a working draft specification.
            // FireFox implements `key` but returns `MozPrintableKey` for all
            // printable characters (normalized to `Unidentified`), ignore it.
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        } // Browser does not implement `key`, polyfill as much of it as we can.
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
            // thus be captured by `keypress`, no other non-printable key should.
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    /**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */ var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    /**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var KeyboardEventInterface = _assign({
    }, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function(event) {
            // `charCode` is the result of a KeyPress event and represents the value of
            // the actual printable character.
            // KeyPress is deprecated, but its replacement is not yet final and not
            // implemented in any major browser. Only KeyPress has charCode.
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            // `keyCode` is the result of a KeyDown/Up event and represents the value of
            // physical keyboard key.
            // The actual meaning of the value depends on the users' keyboard layout
            // which cannot be detected. Assuming that it is a US keyboard layout
            // provides a surprisingly accurate mapping for US and European users.
            // Due to this, it is left to the user to implement at this time.
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            // `which` is an alias for either `keyCode` or `charCode` depending on the
            // type of the event.
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    /**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */ var PointerEventInterface = _assign({
    }, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    /**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */ var TouchEventInterface = _assign({
    }, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    /**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */ var TransitionEventInterface = _assign({
    }, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    /**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */ var WheelEventInterface = _assign({
    }, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ]; // Tab, Return, Esc, Space
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
     // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    } // Track whether we've ever handled a keypress on the space key.
    var hasSpaceKeypress = false;
    /**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */ function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
 * Translate native top level events into event types.
 */ function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    /**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */ function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
 * Does our fallback mode think that this event is the end of composition?
 */ function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                // Command keys insert or clear IME input.
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                // Expect IME keyCode on each keydown. If we get any other
                // code we must have exited earlier.
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                // Events are not possible without cancelling IME.
                return true;
            default:
                return false;
        }
    }
    /**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */ function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    /**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */ function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.
    var isComposing = false;
    /**
 * @return {?object} A SyntheticCompositionEvent.
 */ function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            // The current composition is stored statically and must not be
            // overwritten while composition continues.
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */ var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                // Record the characters to be added to the DOM.
                var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
                // it at the keypress level and bail immediately. Android Chrome
                // doesn't give us keycodes, so we need to ignore it.
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                // For other native event types, do nothing.
                return null;
        }
    }
    /**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */ function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                // If a paste event occurs after a keypress, throw out the input
                // chars. Paste events should not lead to BeforeInput events.
                return null;
            case 'keypress':
                /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */ if (!isKeypressCommand(nativeEvent)) {
                    // IE fires the `keypress` event when a user types an emoji via
                    // Touch keyboard of Windows.  In such a case, the `char` property
                    // holds an emoji character like `\uD83D\uDE0A`.  Because its length
                    // is 2, the property `which` does not represent an emoji correctly.
                    // In such a case, we directly return the `char` property instead of
                    // using `which`.
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    /**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */ function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
         // If no characters are being inserted, no BeforeInput event should
        // be fired.
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    /**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */ function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    /**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */ var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    /**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */ function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    /**
 * For IE shims
 */ var activeElement = null;
    var activeElementInst = null;
    /**
 * SECTION: handle `change` event
 */ function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    /**
 * SECTION: handle `input` event
 */ var isInputEventSupported = false;
    if (canUseDOM) // IE9 claims to support the input event but fails to trigger it when
    // deleting text, so we ignore its input events.
    isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    /**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */ function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */ function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    /**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */ function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            // In IE9, propertychange fires for most input events but is buggy and
            // doesn't fire when text is deleted, but conveniently, selectionchange
            // appears to fire in all of the remaining cases so we catch those and
            // forward the event if the value has changed
            // In either case, we don't want to call the event handler if the value
            // is changed from JS so we redefine a setter for `.value` that updates
            // our activeElementValue variable, allowing us to ignore those changes
            //
            // stopWatching() should be a noop here but we call it just in case we
            // missed a blur event somehow.
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    } // For IE8 and IE9.
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
    }
    /**
 * SECTION: handle `click` event
 */ function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
    }
    /**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */ function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
         // When blurring, set the value attribute for number inputs
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    /**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */ function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            // If this is an over event with a target, we might have already dispatched
            // the event in the out event of the other target. If this is replayed,
            // then it's because we couldn't dispatch against this target previously
            // so we have to do it now instead.
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                // If the related node is managed by React, we can assume that we have
                // already dispatched the corresponding events during its mouseout.
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) // Must not be a mouse or pointer in or out - ignoring.
        return;
        var win; // TODO: why is this nullable in the types but we read from it?
        if (nativeEventTarget.window === nativeEventTarget) // `nativeEventTarget` is probably a window object.
        win = nativeEventTarget;
        else {
            // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            // Moving to a node from outside the window.
            from = null;
            to = targetInst;
        }
        if (from === to) // Nothing pertains to our managed components.
        return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null; // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    /**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */ function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
        ;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
    /**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */ function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
         // Test for A's keys different from B.
        for(var i = 0; i < keysA.length; i++){
            if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) return false;
        }
        return true;
    }
    /**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */ function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    /**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */ function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    /**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */ function getNodeForCharacterOffset(root1, offset) {
        var node = getLeafNode(root1);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    /**
 * @param {DOMElement} outerNode
 * @return {?object}
 */ function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
        try {
            /* eslint-disable no-unused-expressions */ anchorNode.nodeType;
            focusNode.nodeType;
        /* eslint-enable no-unused-expressions */ } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */ function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                 // Moving from `node` to its first child `next`.
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && (++indexWithinAnchor) === anchorOffset) start = length;
                if (parentNode === focusNode && (++indexWithinFocus) === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            } // Moving from `node` to its next sibling `next`.
            node = next;
        }
        if (start === -1 || end === -1) // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
        return {
            start: start,
            end: end
        };
    }
    /**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */ function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            // Accessing the contentDocument of a HTMLIframeElement can cause the browser
            // to throw, e.g. if it has a cross-origin src attribute.
            // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
            // iframe.contentDocument.defaultView;
            // A safety way is to access one of the cross origin properties: Window or Location
            // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
            // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    /**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */ /**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */ function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    /**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */ function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
             // Focusing a node can change the scroll position, which is undesirable
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    /**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */ function getSelection(input) {
        var selection;
        if ('selectionStart' in input) // Modern browser with input or textarea.
        selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else // Content editable or old IE textarea.
        selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    /**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */ function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */ function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    /**
 * Get document associated with the event target.
 */ function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */ function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
         // Only fire when selection has actually changed.
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    /**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */ function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            // Track the input node that has focus.
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            // falls through
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                // Firefox creates a keypress event for function keys too. This removes
                // the unwanted keypress events. Enter is however both printable and
                // non-printable. One would expect Tab to be as well (but it isn't).
                if (getEventCharCode(nativeEvent) === 0) return;
            /* falls through */ case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                // Firefox creates a click event on right mouse clicks. This removes the
                // unwanted click events.
                if (nativeEvent.button === 2) return;
            /* falls through */ case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            /* falls through */ case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        // Some events don't bubble in the browser.
        // In the past, React has always bubbled them, but this can be surprising.
        // We're going to try aligning closer to the browser behavior by not bubbling
        // them in React either. We'll start by not bubbling onScroll, and then expand.
        var accumulateTargetOnly = !inCapturePhase && // nonDelegatedEvents list in DOMPluginEventSystem.
        // Then we can remove this special list.
        // This is a breaking change that can wait until React 18.
        domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    // TODO: remove top-level side effect.
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't forsee right now.
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    } // List of events that need to be individually attached to media elements.
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ]; // We should not delegate these events to the container, but rather
    // set them on the actual target element itself. This is primarily
    // because these events do not consistently bubble in the DOM.
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (rootContainerElement[listeningMarker]) // Performance optimization: don't iterate through events
        // for the same portal container or root node more than once.
        // TODO: once we remove the flag, we may be able to also
        // remove some of the bookkeeping maps used for laziness.
        return;
        rootContainerElement[listeningMarker] = true;
        allNativeEvents.forEach(function(domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement, null);
            listenToNativeEvent(domEventName, true, rootContainerElement, null);
        });
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
        var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var target = rootContainerElement; // selectionchange needs to be attached to the document
        // otherwise it won't capture incoming events that are only
        // triggered on the document directly.
        if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) target = rootContainerElement.ownerDocument;
         // If the event can be delegated (or is capture phase), we can
        // register it to the root container. Otherwise, we should
        // register the event to the target element and mark it as
        // a non-delegated event.
        if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            // For all non-delegated events, apart from scroll, we attach
            // their event listeners to the respective elements that their
            // events fire on. That means we can skip this step, as event
            // listener has already been added previously. However, we
            // special case the scroll event because the reality is that any
            // element can scroll.
            // TODO: ideally, we'd eventually apply the same logic to all
            // events from the nonDelegatedEvents list. Then we can remove
            // this special case and use the same logic for all events.
            if (domEventName !== 'scroll') return;
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
        }
        var listenerSet = getEventListenerSet(target);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
        // we need to trap an event listener onto the target.
        if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
        // active and not passive.
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) // Browsers introduced an intervention, making these events
        // passive by default on document. React doesn't bind them
        // to document anymore, but changing this now would undo
        // the performance wins from the change. So we emulate
        // the existing behavior manually on the roots now.
        // https://github.com/facebook/react/issues/19651
        {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we
            if (targetInst !== null) {
                // The below logic attempts to work out if we need to change
                // the target fiber to a different ancestor. We had similar logic
                // in the legacy event system, except the big difference between
                // systems is that the modern event system now has an event listener
                // attached to each React Root and React Portal Root. Together,
                // the DOM nodes representing these roots are the "rootContainer".
                // To figure out which ancestor instance we should use, we traverse
                // up the fiber tree from the target instance and attempt to find
                // root boundaries that match that of our current "rootContainer".
                // If we find that "rootContainer", we find the parent fiber
                // sub-tree for that root and make that our ancestor instance.
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            // The target is a portal, but it's not the rootContainer we're looking for.
                            // Normally portals handle their own events all the way down to the root.
                            // So we should be able to stop now. However, we don't know if this portal
                            // was part of *our* root.
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) // This is the rootContainer we're looking for and we found it as
                                    // a parent of the Portal. That means we can ignore it because the
                                    // Portal will bubble through to us.
                                    return;
                                }
                                grandNode = grandNode.return;
                            }
                        } // Now we need to find it's corresponding host fiber in the other
                        // tree. To do this we can use getClosestInstanceFromNode, but we
                        // need to validate that the fiber is a host instance, otherwise
                        // we need to traverse up through the DOM till we find the correct
                        // node that is from the other tree.
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode; // createEventHandle listeners
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            } // If we are only accumulating events for the target, then we don't
            // continue to propagate through the React fiber tree to find other
            // listeners.
            if (accumulateTargetOnly) break;
            instance = instance.return;
        }
        return listeners;
    } // We should only use this function for:
    // - BeforeInputEventPlugin
    // - ChangeEventPlugin
    // - SelectEventPlugin
    // This is because we only process these plugins
    // in the bubble phase, so we need to accumulate two
    // phase event listeners (via emulation).
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    /**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */ function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
         // If A is deeper, crawl up.
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        } // If B is deeper, crawl up.
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        } // Walk in lockstep until we find a match.
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    } // We should only use this function for:
    // - EnterLeaveEventPlugin
    // This is because we only process this plugin
    // in the bubble phase, so we need to accumulate two
    // phase event listeners.
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var HTML_NAMESPACE$1 = Namespaces.html;
    var warnedUnknownTags;
    var suppressHydrationWarning;
    var validatePropertiesInDevelopment;
    var warnForTextDifference;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeMarkupForTextOrAttribute;
    var normalizeHTML;
    warnedUnknownTags = {
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    }; // IE 11 parses & normalizes the style attribute as opposed to other
    // browsers. It adds spaces and sorts the properties in some
    // non-alphabetical order. Handling that would require sorting CSS
    // properties in the client & server versions or applying
    // `expectedStyle` to a temporary DOM node to read its `style` attribute
    // normalized. Since it only affects IE, we're skipping style warnings
    // in that browser completely in favor of doing all that work.
    // See https://github.com/facebook/react/issues/11807
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
    // It also can turn \u0000 into \uFFFD inside attributes.
    // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
    // If we have a mismatch, it might be caused by that.
    // We will still patch up in this case but not fire the warning.
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    normalizeMarkupForTextOrAttribute = function(markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    };
    warnForTextDifference = function(serverText, clientText) {
        if (didWarnInvalidHydration) return;
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        didWarnInvalidHydration = true;
        error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
    };
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }; // Parse the HTML and read it back to normalize the HTML string so that it
    // can be used for comparison.
    normalizeHTML = function(parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {
    }
    function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    // Avoid setting initial textContent when the text is empty. In IE11 setting
                    // textContent on a <textarea> will cause the placeholder to not
                    // show within the <textarea> until it has been focused and blurred again.
                    // https://github.com/facebook/react/issues/6731#issuecomment-254874553
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        // TODO: Handle wasCustomComponentTag
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE$1) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                // Create the script via .innerHTML so its "parser-inserted" flag is
                // set to true and it does not execute
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>"; // eslint-disable-line
                // This is guaranteed to yield a script element.
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
                // See discussion in https://github.com/facebook/react/pull/6896
                // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
                domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
                // attributes on `select`s needs to be added before `option`s are inserted.
                // This prevents:
                // - a bug where the `select` does not scroll to the correct option because singular
                //  `select` elements automatically pick the first item #13222
                // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
                // See https://github.com/facebook/react/issues/13222
                // and https://github.com/facebook/react/issues/14239
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                    // it is possible that no option is selected.
                    //
                    // This is only necessary when a select in "single selection mode".
                    node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE$1) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
    } // Calculate the diff between the two objects.
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'option':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {
                    };
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            {
                if (!updatePayload) updatePayload = [];
            } else // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp);
                if (lastProp) {
                    // Unset styles on `lastProp` but not on `nextProp`.
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = '';
                    }
                     // Update styles that changed since `lastProp`.
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {
                        };
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    // Relies on `updateStylesByID` not mutating `styleUpdates`.
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    // We eagerly listen to this even though we haven't committed yet.
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) // This is a special case. If any listener updates we need to ensure
                // that the "current" props pointer gets updated so we need a commit
                // to update this element.
                updatePayload = [];
            } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
            // In this case, call the opaque object's toString function which generates a new client
            // ID so client and server IDs match and throws to rerender.
            nextProp.toString();
            else // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    } // Apply the diff.
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.
        switch(tag){
            case 'input':
                // Update the wrapper around inputs *after* updating props. This has to
                // happen after `updateDOMProperties`. Otherwise HTML5 input validations
                // raise warnings and prevent the new value from being assigned.
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                // <select> value update needs to occur after <option> children
                // reconciliation
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
        var isCustomComponentTag;
        var extraAttributeNames;
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the load event.
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for all the media events.
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the error event.
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                // We listen to these events in case to ensure emulated bubble
                // listeners still fire for error and load events.
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the toggle event.
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
                // listeners still fire for the invalid event.
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                // Built-in SSR attribute is allowed
                case 'data-reactroot':
                    break;
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    // Intentionally use the original name.
                    // See discussion in https://github.com/facebook/react/pull/10676.
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                // For text content children we compare against textContent. This
                // might match additional HTML that is hidden when we read it using
                // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
                // satisfies our requirement. Our requirement is not to produce perfect
                // HTML and attributes. Ideally we should preserve structure but it's
                // ok not to if the visible content is still enough to indicate what
                // even listeners these nodes might be wired up to.
                // TODO: Warn if there is more than a single textNode as a child.
                // TODO: Should we use domElement.firstChild.nodeValue to compare?
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (!suppressHydrationWarning) warnForTextDifference(domElement.textContent, nextProp);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (typeof isCustomComponentTag === 'boolean') {
                // Validate that the properties correspond to their expected values.
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // TODO: Only ignore them on controlled tags.
                propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag) {
                    // $FlowFixMe - Should be inferred as not undefined.
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE$1) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE$1) // $FlowFixMe - Should be inferred as not undefined.
                        extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                // If an SVG prop is supplied with bad casing, it will
                                // be successfully parsed from HTML, but will produce a mismatch
                                // (and would be incorrectly rendered on the client).
                                // However, we already warn about bad casing elsewhere.
                                // So we'll skip the misleading extra mismatch warning in this case.
                                isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.
                                extraAttributeNames.delete(standardName);
                            } // $FlowFixMe - Should be inferred as not undefined.
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    if (nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) // $FlowFixMe - Should be inferred as not undefined.
        warnForExtraAttributes(extraAttributeNames);
        switch(tag){
            case 'input':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                // TODO: Make sure we check if this is still unmounted or do any clean
                // up necessary since we never stop tracking anymore.
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') // TODO: This cast may not be sound for SVG, MathML or custom elements.
                trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForUnmatchedText(textNode, text) {
        warnForTextDifference(textNode.nodeValue, text);
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') // We expect to insert empty text nodes since they're not represented in
        // the HTML.
        // TODO: Remove this special case if we can just avoid inserting empty
        // text nodes.
        return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {
    };
    var updatedAncestorInfo = function() {
    };
    // This validation code was written based on the HTML5 parsing spec:
    // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    //
    // Note: this does not catch all invalid nesting, nor does it try to (as it's
    // not clear what practical benefit doing so provides); instead, we warn only
    // for cases where the parser will give a parse tree differing from what React
    // intended. For example, <b><div></div></b> is invalid but we don't warn
    // because it still parses correctly; we do warn for other cases like nested
    // <p> tags where the beginning of the second element implicitly closes the
    // first, causing a confusing mess.
    // https://html.spec.whatwg.org/multipage/syntax.html#special
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        'foreignObject',
        'desc',
        'title'
    ]; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = _assign({
        }, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
         // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    /**
   * Returns whether
   */ var isTagValidWithParent = function(tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch(parentTag){
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but
            case 'option':
                return tag === '#text';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                // These tags are only valid with a few parents that have special child
                // parsing rules -- if we're down here, then none of those matched and
                // so we allow it only if we don't know what the parent is, as all other
                // cases are invalid.
                return parentTag == null;
        }
        return true;
    };
    /**
   * Returns whether
   */ var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                // Spec says something about storing a list of markers, but it sounds
                // equivalent to this check.
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {
    };
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1;
    SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function shouldAutoFocusHostComponent(type, props) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
        }
        return false;
    }
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root1 = rootContainerInstance.documentElement;
                namespace = root1 ? root1.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        return shouldAutoFocusHostComponent(type, props);
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1; // -------------------
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) domElement.focus();
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function hideInstance(instance) {
        var style1 = instance.style;
        if (typeof style1.setProperty === 'function') style1.setProperty('display', 'none', 'important');
        else style1.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) body.textContent = '';
        }
    } // -------------------
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
         // This has now been refined to an element node.
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
         // This has now been refined to a text node.
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
        // get attached.
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        return diffHydratedProperties(instance, type, props, parentNamespace);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        return diffHydratedText(textInstance, text);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        } // TODO: Warn, we didn't find the end comment boundary.
        return null;
    } // Returns the SuspenseInstance if this node is a direct child of a
    // SuspenseInstance. I.e. if its previous sibling is a Comment with
    // SUSPENSE_x_START_DATA. Otherwise, null.
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance);
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
        warnForUnmatchedText(textInstance, text);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForUnmatchedText(textInstance, text);
    }
    function didNotHydrateContainerInstance(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
        parentProps[SUPPRESS_HYDRATION_WARNING$1];
    }
    var clientId = 0;
    function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = 'r:' + (clientId++).toString(36);
        return {
            toString: function() {
                warnOnAccessInDEV();
                return id;
            },
            valueOf: function() {
                warnOnAccessInDEV();
                return id;
            }
        };
    }
    function isOpaqueHydratingObject(value) {
        return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
    }
    function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
        };
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
    // If the target node is part of a hydrated or not yet rendered subtree, then
    // this may also return a SuspenseComponent or HostRoot to indicate that.
    // Conceptually the HostRoot fiber is a child of the Container node. So if you
    // pass the Container node as the targetNode, you will not actually get the
    // HostRoot back. To get to the HostRoot, you need to pass a child of it.
    // The same thing applies to Suspense boundaries.
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) // Don't return HostRoot or SuspenseComponent here.
        return targetInst;
         // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.
        var parentNode = targetNode.parentNode;
        while(parentNode){
            // We'll check if this is a container root that could include
            // React nodes in the future. We need to check this first because
            // if we're a child of a dehydrated container, we need to first
            // find that inner container before moving on to finding the parent
            // instance. Note that we don't check this field on  the targetNode
            // itself because the fibers are conceptually between the container
            // node and the first child. It isn't surrounding the container node.
            // If it's not a container, we check if it's an instance.
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                // Since this wasn't the direct target of the event, we might have
                // stepped past dehydrated DOM nodes to get here. However they could
                // also have been non-React nodes. We need to answer which one.
                // If we the instance doesn't have any children, then there can't be
                // a nested suspense boundary within it. So we can use this as a fast
                // bailout. Most of the time, when people add non-React children to
                // the tree, it is using a ref to a child-less DOM node.
                // Normally we'd only need to check one of the fibers because if it
                // has ever gone from having children to deleting them or vice versa
                // it would have deleted the dehydrated boundary nested inside already.
                // However, since the HostRoot starts out with an alternate it might
                // have one on the alternate so we need to check in case this was a
                // root.
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    // Next we need to figure out if the node that skipped past is
                    // nested within a dehydrated boundary and if so, which one.
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        // We found a suspense instance. That means that we haven't
                        // hydrated it yet. Even though we leave the comments in the
                        // DOM after hydrating, and there are boundaries in the DOM
                        // that could already be hydrated, we wouldn't have found them
                        // through this pass since if the target is hydrated it would
                        // have had an internalInstanceKey on it.
                        // Let's get the fiber associated with the SuspenseComponent
                        // as the deepest instance.
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                         // If we don't find a Fiber on the comment, it might be because
                        // we haven't gotten to hydrate it yet. There might still be a
                        // parent boundary that hasn't above this one so we need to find
                        // the outer most that is known.
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
                    // host component also hasn't hydrated yet. We can return it
                    // below since it will bail out on the isMounted check later.
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    /**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */ function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    /**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */ function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
         // Without this first invariant, passing a non-DOM-component triggers the next
        throw Error("getNodeFromInstance: Invalid argument.");
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {
    };
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has1 = Function.call.bind(Object.prototype.hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has1(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.
            try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) error('Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {
    };
    var emptyContextObject = {
    };
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.
    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
         // Avoid recreating masked context unless unmasked context has changed.
        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
        // This may trigger infinite loops if componentWillReceiveProps calls setState.
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {
        };
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        // Context is created before the class component is instantiated so check for instance.
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (!(contextStackCursor.current === emptyContextObject)) throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
        // It has only been added in Fiber to match the (unintentional) behavior in Stack.
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentName(type) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw Error((getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return _assign({
        }, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
        // If the instance does not exist yet, we will push null at first,
        // and replace it on the stack later when invalidating the context.
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        // Currently this is only used with renderSubtreeIntoContainer; not sure if it
        // makes sense elsewhere
        if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var BlockingRoot = 1;
    var ConcurrentRoot = 2;
    var rendererID = null;
    var injectedHook = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') // No DevTools
        return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.
            injectedHook = hook;
        } catch (err) {
            error('React instrumentation encountered an error: %s.', err);
        } // DevTools exists
        return true;
    }
    function onScheduleRoot(root1, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root1, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root1, priorityLevel) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root1.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) injectedHook.onCommitFiberRoot(rendererID, root1, priorityLevel, didError);
            else injectedHook.onCommitFiberRoot(rendererID, root1, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
    // Provide explicit error message when production+profiling bundle of e.g.
    // react-dom is used with production (non-profiling) bundle of
    // scheduler/tracing
    if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
    var fakeCallbackNode = {
    }; // Except for NoPriority, these correspond to Scheduler priorities. We use
    // ascending numbers so we can compare them like numbers. They start at 90 to
    // avoid clashing with Scheduler's priorities.
    var ImmediatePriority$1 = 99;
    var UserBlockingPriority$2 = 98;
    var NormalPriority$1 = 97;
    var LowPriority$1 = 96;
    var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.
    var NoPriority$1 = 90;
    var shouldYield = Scheduler_shouldYield;
    var requestPaint = Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function() {
    };
    var syncQueue = null;
    var immediateQueueCallbackNode = null;
    var isFlushingSyncQueue = false;
    var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
    // This will be the case for modern browsers that support `performance.now`. In
    // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
    // timestamp. In that case, subtract the module initialization time to simulate
    // the behavior of performance.now and keep our times small enough to fit
    // within 32 bits.
    // TODO: Consider lifting this into Scheduler.
    var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function() {
        return Scheduler_now$1() - initialTimeMs$1;
    };
    function getCurrentPriorityLevel() {
        switch(Scheduler_getCurrentPriorityLevel()){
            case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
                return NormalPriority$1;
            case Scheduler_LowPriority:
                return LowPriority$1;
            case Scheduler_IdlePriority:
                return IdlePriority$1;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch(reactPriorityLevel){
            case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
                return Scheduler_NormalPriority;
            case LowPriority$1:
                return Scheduler_LowPriority;
            case IdlePriority$1:
                return Scheduler_IdlePriority;
            default:
                throw Error("Unknown priority level.");
        }
    }
    function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_runWithPriority(priorityLevel, fn);
    }
    function scheduleCallback(reactPriorityLevel, callback, options1) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
        return Scheduler_scheduleCallback(priorityLevel, callback, options1);
    }
    function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
            syncQueue = [
                callback
            ]; // Flush the queue in the next tick, at the earliest.
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
        } else // Push onto existing queue. Don't need to schedule a callback because
        // we already scheduled one when we created the queue.
        syncQueue.push(callback);
        return fakeCallbackNode;
    }
    function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) Scheduler_cancelCallback(callbackNode);
    }
    function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
        }
        flushSyncCallbackQueueImpl();
    }
    function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            // Prevent re-entrancy.
            isFlushingSyncQueue = true;
            var i = 0;
            try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                    for(; i < _queue.length; i++){
                        var callback = _queue[i];
                        do callback = callback(_isSync2);
                        while (callback !== null)
                    }
                });
                syncQueue = null;
            } catch (error4) {
                // If something throws, leave the remaining callbacks on the queue.
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                 // Resume flushing in the next tick
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error4;
            } finally{
                isFlushingSyncQueue = false;
            }
        }
    }
    // TODO: this is special because it gets imported during build.
    var ReactVersion = '17.0.2';
    var NoMode = 0;
    var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
    // tag instead
    var BlockingMode = 2;
    var ConcurrentMode = 4;
    var ProfileMode = 8;
    var DebugTracingMode = 16;
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = 0;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set1) {
        var array = [];
        set1.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        // We do an initial pass to gather component names
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        } // Finally, we flush all the warnings
        // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        } // Dedup strategy: Warn once per component.
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            // Resolve default props. Taken from ReactElement
            var props = _assign({
            }, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var MAX_SIGNED_31_BIT_INT = 1073741823;
    var valueCursor = createCursor(null);
    var rendererSigil;
    // Use this to detect multiple renderers using the same context
    rendererSigil = {
    };
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context;
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        var context = providerFiber.type._context;
        context._currentValue = currentValue;
    }
    function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) // No change
        return 0;
        else {
            var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
            return changedBits | 0;
        }
    }
    function scheduleWorkOnParentPath(parent, renderLanes) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            else break;
            node = node.return;
        }
    }
    function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0; // Visit this fiber.
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    // Check if the context matches.
                    if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                        // Match! Schedule an update on this fiber.
                        if (fiber.tag === ClassComponent) {
                            // Schedule a force update on the work-in-progress.
                            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
                            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                            // update to the current fiber, too, which means it will persist even if
                            // this render is thrown away. Since it's a race condition, not sure it's
                            // worth fixing.
                            enqueueUpdate(fiber, update);
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.
                        list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else // Traverse down.
            nextFiber = fiber.child;
            if (nextFiber !== null) // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber;
            else {
                // No child. Traverse to next sibling.
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        // We're back to the root of this subtree. Exit.
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        // Set the return pointer of the sibling to the work-in-progress fiber.
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    } // No more siblings. Traverse up.
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastContextWithAllBitsObserved = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) // Context list has a pending update. Mark that this fiber performed work.
                markWorkInProgressReceivedUpdate();
                 // Reset the work-in-progress list
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context, observedBits) {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        if (lastContextWithAllBitsObserved === context) ;
        else if (observedBits === false || observedBits === 0) ;
        else {
            var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.
            if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
                // Observe all updates.
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else resolvedObservedBits = observedBits;
            var contextItem = {
                context: context,
                observedBits: resolvedObservedBits,
                next: null
            };
            if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                 // This is the first dependency for this component. Create a new list.
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem,
                    responders: null
                };
            } else // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem;
        }
        return context._currentValue;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current2, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) // Only occurs if the fiber has been unmounted.
        return;
        var sharedQueue = updateQueue.shared;
        var pending = sharedQueue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        sharedQueue.pending = update;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.
        var current2 = workInProgress.alternate;
        if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
                // The work-in-progress queue is the same as current. This happens when
                // we bail out on a parent fiber that then captures an error thrown by
                // a child. Since we want to append the update only to the work-in
                // -progress queue, we need to clone the updates. We usually clone during
                // processUpdateQueue, but that didn't happen in this case because we
                // skipped over the parent when we bailed out.
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    // Loop through the updates and clone them.
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null) // Append the captured update the end of the cloned list.
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else // There are no base updates.
                newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        } // Append the update to the end of the list.
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                } // State object
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            // Intentional fallthrough
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictMode) {
                        disableLogs();
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            reenableLogs();
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else // Partial state object
                partialState = _payload;
                if (partialState === null || partialState === undefined) // Null and undefined are treated as no-ops.
                return prevState;
                 // Merge the partial state and the previous state.
                return _assign({
                }, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
            // and last so that it's non-circular.
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null; // Append pending updates to base queue
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
            // we need to transfer the updates to that queue, too. Because the base
            // queue is a singly-linked list with no cycles, we can append to both
            // lists and take advantage of structural sharing.
            // TODO: Pass `current` as argument
            var current2 = workInProgress.alternate;
            if (current2 !== null) {
                // This is always non-null on a ClassComponent or HostRoot
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        } // These values may change as we process the queue.
        if (firstBaseUpdate !== null) {
            // Iterate through the list of updates to compute the result.
            var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
            // from the original lanes.
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                     // Update the remaining priority in the queue.
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    } // Process this update.
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        // An update was scheduled from inside a reducer. Add the new
                        // pending updates to the end of the list and keep processing.
                        var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
                        // unravel them when transferring them to the base queue.
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
            // This should be fine because the only two other things that contribute to
            // expiration time are props and context. We're already in the middle of the
            // begin phase by the time we start processing the queue, so we've already
            // dealt with the props. Context in components that specify
            // shouldComponentUpdate is tricky; but we'll have to account for
            // that regardless.
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (!(typeof callback === 'function')) throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {
    };
    var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    }; // This is so gross but it's at least non-critical and can be removed if
    // it causes problems. This is meant to give a nicer error message for
    // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
    // ...)) which otherwise throws a "_processChildContext is not a function"
    // exception.
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                // Invoke the function an extra time to help detect side-effects.
                getDerivedStateFromProps(nextProps, prevState);
            } finally{
                reenableLogs();
            }
        }
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({
        }, prevState, partialState);
        workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
        // base state.
        if (workInProgress.lanes === NoLanes) {
            // Queue is always non-null for classes
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    // Invoke the function an extra time to help detect side-effects.
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    reenableLogs();
                }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) // <Context.Consumer>
                addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        } // Instantiate twice to help detect side-effects.
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                new ctor(props, context); // eslint-disable-line no-new
            } finally{
                reenableLogs();
            }
        }
        var instance = new ctor(props, context);
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        // ReactFiberContext usually updates this cache but can't for newly-created instances.
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress.type) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentName(workInProgress.type) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    } // Invokes the mount life-cycles on a previously never rendered instance.
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
            // process them now.
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidMount === 'function') workInProgress.flags |= Update;
             // If shouldComponentUpdate returned false, we should still update the
            // memoized state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.
    function updateClassInstance(current3, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current3, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            // In order to support react-lifecycles-compat polyfilled components,
            // Unsafe lifecycles should not be invoked for components using the new APIs.
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            // If an update was already in progress, we should schedule an Update
            // effect even though we're bailing out, so that cWU/cDU are called.
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current3.memoizedProps || oldState !== current3.memoizedState) workInProgress.flags |= Snapshot;
            } // If shouldComponentUpdate returned false, we should still update the
            // memoized props/state to indicate that this work can be reused.
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {
    };
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {
    };
    /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ ownerHasKeyUseWarning = {
    };
    ownerHasFunctionTypeWarning = {
    };
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (!(typeof child._store === 'object')) throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error("Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.");
    };
    var isArray$1 = Array.isArray;
    function coerceRef(returnFiber, current3, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // because these cannot be automatically converted to an arrow function
            // using a codemod. Therefore, we don't have to warn about string refs again.
            !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error("A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref", mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (!(ownerFiber.tag === ClassComponent)) throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref
                if (current3 !== null && current3.ref !== null && typeof current3.ref === 'function' && current3.ref._stringRef === stringRef) return current3.ref;
                var ref = function(value) {
                    var refs = inst.refs;
                    if (refs === emptyRefsObject) // This is a lazy pooled frozen object, so we need to initialize.
                    refs = inst.refs = {
                    };
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (!(typeof mixedRef === 'string')) throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                if (!element._owner) throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead.");
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentName(returnFiber.type) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    } // We avoid inlining this to avoid potential deopts from using try/catch.
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) // Noop.
            return;
             // Deletions are added in reversed order so we add it to the front.
            // At this point, the return fiber's effect list is empty except for
            // deletions, so we can just append the deletion to the list. The remaining
            // effects aren't added until the complete phase. Once we implement
            // resuming, this may not be true.
            var last = returnFiber.lastEffect;
            if (last !== null) {
                last.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
            } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) // Noop.
            return null;
             // TODO: For the shouldClone case, this could be micro-optimized a bit by
            // assuming that after the first child we've already added everything.
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            // Add the remaining children to a temporary map so that we can find them by
            // keys quickly. Implicit (null) keys get added to this set with their index
            // instead.
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            // We currently set sibling to null and index to 0 here because it is easy
            // to forget to do before returning it. E.g. for the single child case.
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) // Noop.
            return lastPlacedIndex;
            var current3 = newFiber.alternate;
            if (current3 !== null) {
                var oldIndex = current3.index;
                if (oldIndex < lastPlacedIndex) {
                    // This is a move.
                    newFiber.flags = Placement;
                    return lastPlacedIndex;
                } else // This item can stay in place.
                return oldIndex;
            } else {
                // This is an insertion.
                newFiber.flags = Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            // This is simpler for the single child case. We only need to do a
            // placement for inserting new children.
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags = Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current3, textContent, lanes) {
            if (current3 === null || current3.tag !== HostText) {
                // Insert
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current3, element, lanes) {
            if (current3 !== null) {
                if (current3.elementType === element.type || isCompatibleFamilyForHotReloading(current3, element)) {
                    // Move based on index
                    var existing = useFiber(current3, element.props);
                    existing.ref = coerceRef(returnFiber, current3, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            } // Insert
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current3, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current3, portal, lanes) {
            if (current3 === null || current3.tag !== HostPortal || current3.stateNode.containerInfo !== portal.containerInfo || current3.stateNode.implementation !== portal.implementation) {
                // Insert
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current3, fragment, lanes, key) {
            if (current3 === null || current3.tag !== Fragment) {
                // Insert
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                // Update
                var existing = useFiber(current3, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            // Update the fiber if the keys match, otherwise return null.
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys. If the previous node is implicitly keyed
                // we can continue to replace it without aborting even if it is not a text
                // node.
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) {
                            if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
                            return updateElement(returnFiber, oldFiber, newChild, lanes);
                        } else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' || typeof newChild === 'number') {
                // Text nodes don't have keys, so we neither have to check the old nor
                // new node for the key. If both are text nodes, they match.
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        if (newChild.type === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        /**
   * Warns if there is a duplicate or missing key
   */ function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            // First, validate keys.
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            // This is the same implementation as reconcileChildrenArray(),
            // but using the iterator instead.
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === 'function')) throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            } // Warn about using Maps as children
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) throw Error("An iterable object provided no iterator.");
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    // TODO: This breaks on empty slots like null children. That's
                    // unfortunate because it triggers the slow path all the time. We need
                    // a better way to communicate whether this was a miss or null,
                    // boolean, undefined, etc.
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) // We matched the slot, but we didn't reuse the existing fiber, so we
                    // need to delete the existing child.
                    deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = newFiber;
                else // TODO: Defer siblings if we're not at the right index for this slot.
                // I.e. if we had null values before, then we want to defer this
                // for each null value. However, we also don't want to call updateSlot
                // with the previous one.
                previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                // We've reached the end of the new children. We can delete the rest.
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                // If we don't have any more existing children we can choose a fast path
                // since the rest will all be insertions.
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) // TODO: Move out of the loop. This only happens for the first run.
                    resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
            } // Add all children to a key map for quick lookups.
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) // The new fiber is a work in progress, but if there exists a
                        // current, that means that we reused the fiber. We need to delete
                        // it from the child list so that we don't add it to the deletion
                        // list.
                        existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            // There's no need to check for keys on text nodes since we don't have a
            // way to define them.
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                // We already have an existing node so let's just update it and delete
                // the rest.
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            } // The existing first child is not a text node so we need to create one
            // and delete the existing ones.
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    switch(child.tag){
                        case Fragment:
                            if (element.type === REACT_FRAGMENT_TYPE) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var existing = useFiber(child, element.props.children);
                                existing.return = returnFiber;
                                existing._debugSource = element._source;
                                existing._debugOwner = element._owner;
                                return existing;
                            }
                            break;
                        case Block:
                        // We intentionally fallthrough here if enableBlocksAPI is not on.
                        // eslint-disable-next-lined no-fallthrough
                        default:
                            if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                                deleteRemainingChildren(returnFiber, child.sibling);
                                var _existing3 = useFiber(child, element.props);
                                _existing3.ref = coerceRef(returnFiber, child, element);
                                _existing3.return = returnFiber;
                                _existing3._debugSource = element._source;
                                _existing3._debugOwner = element._owner;
                                return _existing3;
                            }
                            break;
                    } // Didn't match.
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                // TODO: If key === null and child.key === null, then this only applies to
                // the first item in the list.
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            // This function is not recursive.
            // If the top level item is an array, we treat it as a set of children,
            // not as a fragment. Nested arrays on the other hand will be treated as
            // fragment nodes. Recursion happens at the normal flow.
            // Handle top level unkeyed fragments as if they were arrays.
            // This leads to an ambiguity between <>{[...]}</> and <>...</>.
            // We treat the ambiguous cases above the same.
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
             // Handle object types
            var isObject = typeof newChild === 'object' && newChild !== null;
            if (isObject) switch(newChild.$$typeof){
                case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
            }
            if (typeof newChild === 'string' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (isArray$1(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            if (isObject) throwOnInvalidObjectType(returnFiber, newChild);
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch(returnFiber.tag){
                case ClassComponent:
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) break;
                // Intentionally fall through to the next case, which handles both
                // functions and classes
                // eslint-disable-next-lined no-fallthrough
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    throw Error((getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
            }
             // Remaining cases are all treated as empty.
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current3, workInProgress) {
        if (!(current3 === null || workInProgress.child === current3.child)) throw Error("Resuming work not yet implemented.");
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    } // Reset a workInProgress child set to prepare it for a second pass.
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {
    };
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.
        if (context === nextContext) return;
         // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
    // inherited deeply down the subtree. The upper bits only affect
    // this immediate suspense boundary and gets reset each new
    // boundary or suspense list.
    var SubtreeSuspenseContextMask = 1; // Subtree Flags:
    // InvisibleParentSuspenseContext indicates that one of our parent Suspense
    // boundaries is not currently showing visible main content.
    // Either because it is already showing a fallback or is not mounted at all.
    // We can use this to determine if it is desirable to trigger a fallback at
    // the parent. If not, then we might need to trigger undesirable boundaries
    // and/or suspend the commit to avoid hiding the parent content.
    var InvisibleParentSuspenseContext = 1; // Shallow Flags:
    // ForceSuspenseFallback can be used by SuspenseList to force newly added
    // items into their fallback state during one of the render passes.
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) // A dehydrated boundary always captures.
            return true;
            return false;
        }
        var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.
        if (props.fallback === undefined) return false;
         // Regular boundaries always capture.
        if (props.unstable_avoidThisFallback !== true) return true;
         // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.
        if (hasInvisibleParent) return false;
         // If the parent is not able to handle it, we must handle it.
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = /*  */ 0; // Represents whether effect should fire.
    var HasEffect = /* */ 1; // Represents the phase in which the effect (not the clean-up) fires.
    var Layout = /*    */ 2;
    var Passive$1 = /*   */ 4;
    // This may have been an insertion or a hydration.
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChild(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        return true;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
        }
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.
        if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
        } else returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableContainerInstance(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableContainerTextInstance(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                        break;
                    case SuspenseComponent:
                        didNotFindHydratableSuspenseInstance(parentType, parentProps);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    return true;
                }
                return false;
            case SuspenseComponent:
                return false;
            default:
                return false;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            // If we can't hydrate this instance let's try the next one.
            // We use this as a heuristic. It's based on intuition and not data so it
            // might be flawed or unnecessary.
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                // Nothing to hydrate. Make it an insertion.
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            } // We matched the next one, we'll now assume that the first one was
            // superfluous and we'll delete it. Since we can't eagerly delete it
            // we'll have to schedule a deletion. To do that, this node needs a dummy
            // fiber associated with it.
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
        }
        hydrationParentFiber = fiber;
        nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.
        fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
            }
        }
        return shouldUpdate;
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
        if (!isHydrating) {
            // If we're not currently hydrating but we're in a hydration context, then
            // we were an insertion and now need to pop up reenter hydration of our
            // siblings.
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.
        if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while(nextInstance){
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
    }
    function getIsHydrating() {
        return isHydrating;
    }
    // and should be reset before starting a new render.
    // This tracks which mutable sources need to be reset after a render.
    var workInProgressSources = [];
    var rendererSigil$1;
    // Used to detect multiple renderers using the same mutable source.
    rendererSigil$1 = {
    };
    function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource);
    }
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    function getWorkInProgressVersion(mutableSource) {
        return mutableSource._workInProgressVersionPrimary;
    }
    function setWorkInProgressVersion(mutableSource, version) {
        mutableSource._workInProgressVersionPrimary = version;
        workInProgressSources.push(mutableSource);
    }
    function warnAboutMultipleRenderersDEV(mutableSource) {
        if (mutableSource._currentPrimaryRenderer == null) mutableSource._currentPrimaryRenderer = rendererSigil$1;
        else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
    } // Eager reads the version of a mutable source and stores it on the root.
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnAboutUseOpaqueIdentifier;
    didWarnAboutUseOpaqueIdentifier = {
    };
    didWarnAboutMismatchedHooksForComponent = new Set();
    // These are set right before calling the component.
    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.
    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.
    var currentHook = null;
    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
    // does not get reset if we do another render pass; only when we're completely
    // finished evaluating this component. This is an optimization so we know
    // whether we need to clear render phase updates after a throw.
    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
    // gets reset after each attempt.
    // TODO: Maybe there's some way to consolidate this with
    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook
    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
    // When true, such Hooks will always be "remounted". Only used during hot reload.
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !Array.isArray(deps)) // Verify deps, but only on mount to avoid extra checks.
        // It's unlikely their type would change as usually you define them inline.
        error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
                    // lol @ IE not supporting String#repeat
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) // Only true when this component is being hot reloaded.
        return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current3, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current3 !== null ? current3._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1; // Used for hot reloading:
        ignorePreviousDependencies = current3 !== null && current3.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes; // The following should have already been reset
        if (current3 !== null && current3.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) // This dispatcher handles an edge case where a component is updating,
        // but no stateful hooks have been used.
        // We want to match the production code behavior (which will use HooksDispatcherOnMount),
        // but with the extra DEV validation to ensure hooks ordering hasn't changed.
        // This dispatcher does that.
        ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg); // Check if there was a render phase update
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            // Keep rendering in a loop for as long as render phase updates continue to
            // be scheduled. Use a counter to prevent infinite loops.
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                // Even when hot reloading, allow dependencies to stabilize
                // after first render to prevent infinite render phase updates.
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                // Also validate hook order for cascading updates.
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        didScheduleRenderPhaseUpdate = false;
        if (!!didRenderTooFewHooks) throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function bailoutHooks(current3, workInProgress, lanes) {
        workInProgress.updateQueue = current3.updateQueue;
        workInProgress.flags &= ~(Passive | Update);
        current3.lanes = removeLanes(current3.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            // There were render phase updates. These are only valid for this render
            // phase, which we are now aborting. Remove the updates from the queues so
            // they do not persist to the next render. Do not remove updates from hooks
            // that weren't processed.
            //
            // Only reset the updates from the queue if it has a clone. If it does
            // not have a clone, that means it wasn't processed, and the updates were
            // scheduled before we entered the render phase.
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) // This is the first hook in the list
        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook;
        if (currentHook === null) {
            var current3 = currentlyRenderingFiber$1.alternate;
            if (current3 !== null) nextCurrentHook = current3.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            // There's already a work-in-progress. Reuse it.
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            // Clone from the current hook.
            if (!(nextCurrentHook !== null)) throw Error("Rendered more hooks than during the previous render.");
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null
        };
    }
    function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer;
        var current4 = currentHook; // The last rebase update that is NOT part of the base state.
        var baseQueue = current4.baseQueue; // The last pending update that hasn't been processed yet.
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            // We have new updates that haven't been processed yet.
            // We'll add them to the base queue.
            if (baseQueue !== null) {
                // Merge the pending queue and the base queue.
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current4.baseQueue !== baseQueue) // Internal invariant that should never happen, but feasibly could in
            // the future if we implement resuming, or some form of that.
            error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current4.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            // We have a queue to process.
            var first = baseQueue.next;
            var newState = current4.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    // Priority is insufficient. Skip this update. If this is the first
                    // skipped update, the previous update/state is the new base
                    // update/state.
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        eagerReducer: update.eagerReducer,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                     // Update the remaining priority in the queue.
                    // TODO: Don't need to accumulate this. Instead, we can remove
                    // renderLanes from the original lanes.
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    // This update does have sufficient priority.
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            // This update is going to be committed so we never want uncommit
                            // it. Using NoLane works because 0 is a subset of all bitmasks, so
                            // this will never be skipped by the check above.
                            lane: NoLane,
                            action: update.action,
                            eagerReducer: update.eagerReducer,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    } // Process this update.
                    if (update.eagerReducer === reducer) // If this update was processed eagerly, and its reducer matches the
                    // current reducer, we can use the eagerly computed state.
                    newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
             // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (!(queue !== null)) throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            // The queue doesn't persist past this render pass.
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                // Process this render phase update. We don't have to check the
                // priority because it will always be the same as the current
                // render's.
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
            // different from the current state.
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function readFromUnsubcribedMutableSource(root1, source, getSnapshot) {
        warnAboutMultipleRenderersDEV(source);
        var getVersion = source._getVersion;
        var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?
        var isSafeToReadFromSource = false; // Check the version first.
        // If this render has already been started with a specific version,
        // we can use it alone to determine if we can safely read from the source.
        var currentRenderVersion = getWorkInProgressVersion(source);
        if (currentRenderVersion !== null) // It's safe to read if the store hasn't been mutated since the last time
        // we read something.
        isSafeToReadFromSource = currentRenderVersion === version;
        else {
            // If there's no version, then this is the first time we've read from the
            // source during the current render pass, so we need to do a bit more work.
            // What we need to determine is if there are any hooks that already
            // subscribed to the source, and if so, whether there are any pending
            // mutations that haven't been synchronized yet.
            //
            // If there are no pending mutations, then `root.mutableReadLanes` will be
            // empty, and we know we can safely read.
            //
            // If there *are* pending mutations, we may still be able to safely read
            // if the currently rendering lanes are inclusive of the pending mutation
            // lanes, since that guarantees that the value we're about to read from
            // the source is consistent with the values that we read during the most
            // recent mutation.
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root1.mutableReadLanes);
            if (isSafeToReadFromSource) // If it's safe to read from this source during the current render,
            // store the version in case other components read from it.
            // A changed version number will let those components know to throw and restart the render.
            setWorkInProgressVersion(source, version);
        }
        if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            if (typeof snapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
            return snapshot;
        } else {
            // This handles the special case of a mutable source being shared between renderers.
            // In that case, if the source is mutated between the first and second renderer,
            // The second renderer don't know that it needs to reset the WIP version during unwind,
            // (because the hook only marks sources as dirty if it's written to their WIP version).
            // That would cause this tear check to throw again and eventually be visible to the user.
            // We can avoid this infinite loop by explicitly marking the source as dirty.
            //
            // This can lead to tearing in the first renderer when it resumes,
            // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
            markSourceAsDirty(source);
            throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
        }
    }
    function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root1 = getWorkInProgressRoot();
        if (!(root1 !== null)) throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        var getVersion = source._getVersion;
        var version = getVersion(source._source);
        var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const
        var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root1, source, getSnapshot);
        }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
        var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
        // We use it to clear the pending update queue if we have a new source.
        var stateHook = workInProgressHook;
        var memoizedState = hook.memoizedState;
        var refs = memoizedState.refs;
        var prevGetSnapshot = refs.getSnapshot;
        var prevSource = memoizedState.source;
        var prevSubscribe = memoizedState.subscribe;
        var fiber = currentlyRenderingFiber$1;
        hook.memoizedState = {
            refs: refs,
            source: source,
            subscribe: subscribe
        }; // Sync the values needed by our subscription handler after each commit.
        dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.
            refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                if (typeof maybeNewSnapshot === 'function') error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                    setSnapshot(maybeNewSnapshot);
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } // If the source mutated between render and now,
                // there may be state updates already scheduled from the old source.
                // Entangle the updates so that they render in the same batch.
                markRootEntangled(root1, root1.mutableReadLanes);
            }
        }, [
            getSnapshot,
            source,
            subscribe
        ]); // If we got a new source or subscribe function, re-subscribe in a passive effect.
        dispatcher.useEffect(function() {
            var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                    latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.
                    var lane = requestUpdateLane(fiber);
                    markRootMutableRead(root1, lane);
                } catch (error4) {
                    // A selector might throw after a source mutation.
                    // e.g. it might try to read from a part of the store that no longer exists.
                    // In this case we should still schedule an update with React.
                    // Worst case the selector will throw again and then an error boundary will handle it.
                    latestSetSnapshot(function() {
                        throw error4;
                    });
                }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            if (typeof unsubscribe !== 'function') error('Mutable source subscribe function must return an unsubscribe function.');
            return unsubscribe;
        }, [
            source,
            subscribe
        ]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
        //
        // If either the source or the subscription have changed we can't can't trust the update queue.
        // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
        //
        // If the getSnapshot function changed, we also shouldn't rely on the update queue.
        // It's possible that the underlying source was mutated between the when the last "change" event fired,
        // and when the current render (with the new getSnapshot function) is processed.
        //
        // In both cases, we need to throw away pending updates (since they are no longer relevant)
        // and treat reading from the source as we do in the mount case.
        if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            // Create a new queue and setState method,
            // So if there are interleaved updates, they get pushed to the older queue.
            // When this becomes current, the previous queue and dispatch method will be discarded,
            // including any interleaving updates that occur.
            var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root1, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
        }
        return snapshot;
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = {
            refs: {
                getSnapshot: getSnapshot,
                setSnapshot: null
            },
            source: source,
            subscribe: subscribe
        };
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook();
        return useMutableSource(hook, source, getSnapshot, subscribe);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') // $FlowFixMe: Flow doesn't like mixed types
        initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            // Circular
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var ref = {
            current: initialValue
        };
        Object.seal(ref);
        hook.memoizedState = ref;
        return ref;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return mountEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
        return updateEffectImpl(Update | Passive, Passive$1, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {
    // The react-debug-hooks package injects its own implementation
    // so that e.g. DevTools can display custom hook values.
    }
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) // Assume these are defined. If they're not, areHookInputsEqual will warn.
        {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
        mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function updateDeferredValue(value) {
        var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
        updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setValue(value);
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        }, [
            value
        ]);
        return prevValue;
    }
    function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
            setPending(true);
        });
        runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
                setPending(false);
                callback();
            } finally{
                ReactCurrentBatchConfig$1.transition = prevTransition;
            }
        });
    }
    function mountTransition() {
        var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
        // never changes.
        var start = startTransition.bind(null, setPending);
        mountRef(start);
        return [
            start,
            isPending
        ];
    }
    function updateTransition() {
        var _updateState2 = updateState(), isPending = _updateState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    function rerenderTransition() {
        var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
        var startRef = updateRef();
        var start = startRef.current;
        return [
            start,
            isPending
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        // TODO: Should warn in effects and callbacks, too
        var name = getComponentName(fiber.type) || 'Unknown';
        if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            didWarnAboutUseOpaqueIdentifier[name] = true;
        }
    }
    function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
        if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
                if (!didUpgrade) {
                    // Only upgrade once. This works even inside the render phase because
                    // the update is added to a shared queue, which outlasts the
                    // in-progress render.
                    didUpgrade = true;
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
                throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                    setId(makeId());
                }, undefined, null);
            }
            return id;
        } else {
            var _id = makeId();
            mountState(_id);
            return _id;
        }
    }
    function updateOpaqueIdentifier() {
        var id = updateState()[0];
        return id;
    }
    function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0];
        return id;
    }
    function dispatchAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            eagerReducer: null,
            eagerState: null,
            next: null
        }; // Append the update to the end of the list.
        var pending = queue.pending;
        if (pending === null) // This is the first update. Create a circular list.
        update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
        var alternate = fiber.alternate;
        if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                // The queue is currently empty, which means we can eagerly compute the
                // next state before entering the render phase. If the new state is the
                // same as the current state, we may be able to bail out entirely.
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
                        // it, on the update object. If the reducer hasn't changed by the
                        // time we enter the render phase, then the eager state can be used
                        // without calling the reducer again.
                        update.eagerReducer = lastRenderedReducer;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) // Fast path. We can bail out without scheduling React to re-render.
                        // It's still possible that we'll need to rebase this update later,
                        // if the component re-renders for a different reason and by that
                        // time the reducer has changed.
                        return;
                    } catch (error4) {
                    } finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
        }
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context, observedBits) {
            warnInvalidContextAccess();
            return readContext(context, observedBits);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context, observedBits) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context, observedBits);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource(source, getSnapshot, subscribe);
        },
        useOpaqueIdentifier: function() {
            currentHookNameInDev = 'useOpaqueIdentifier';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderOpaqueIdentifier();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var profilerStartTime = -1;
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {
    };
    didWarnAboutModulePatternComponent = {
    };
    didWarnAboutContextTypeOnFunctionComponent = {
    };
    didWarnAboutGetDerivedStateOnFunctionComponent = {
    };
    didWarnAboutFunctionRefs = {
    };
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {
    };
    didWarnAboutTailOptions = {
    };
    function reconcileChildren(current4, workInProgress, nextChildren, renderLanes1) {
        if (current4 === null) // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, nextChildren, renderLanes1);
    }
    function forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(workInProgress, current4.child, null, renderLanes1); // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
    }
    function updateForwardRef(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, render, nextProps, ref, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (current4 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                // and with only the default shallow comparison, we upgrade it
                // to a SimpleMemoComponent to allow fast path updates.
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current4, workInProgress, resolvedType, nextProps, updateLanes, renderLanes1);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes1);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentName(_type));
        var currentChild = current4.child; // This is always exactly one child
        if (!includesSomeLane(updateLanes, renderLanes1)) {
            // This will be the props with resolved defaultProps,
            // unlike current.memoizedProps which will be the unresolved ones.
            var prevProps = currentChild.memoizedProps; // Default to shallow comparison
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current4.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current4, workInProgress, Component, nextProps, updateLanes, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                // We warn when you define propTypes on lazy()
                // so let's just skip over it to find memo() outer wrapper.
                // Inner props for memo are validated later.
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                } // Inner propTypes will be validated in the function component path.
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentName(outerMemoType));
            }
        }
        if (current4 !== null) {
            var prevProps = current4.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current4.ref === workInProgress.ref && workInProgress.type === current4.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes1, updateLanes)) {
                    // The pending lanes were cleared at the beginning of beginWork. We're
                    // about to bail out, but there might be other lanes that weren't
                    // included in the current render. Usually, the priority level of the
                    // remaining updates is accumlated during the evaluation of the
                    // component (i.e. when processing the update queue). But since since
                    // we're bailing out early *without* evaluating the component, we need
                    // to account for it here, too. Reset to the value of the current fiber.
                    // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
                    // because a MemoComponent fiber does not have hooks or an update queue;
                    // rather, it wraps around an inner component, which may or may not
                    // contains hooks.
                    // TODO: Move the reset at in beginWork out of the common path so that
                    // this is no longer necessary.
                    workInProgress.lanes = current4.lanes;
                    return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
                // See https://github.com/facebook/react/pull/19216.
                didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1);
    }
    function updateOffscreenComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current4 !== null ? current4.memoizedState : null;
        if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                // In legacy sync mode, don't defer the subtree. Render it now.
                // TODO: Figure out what we should do in Blocking mode.
                var nextState = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes1);
            } else if (!includesSomeLane(renderLanes1, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes1);
                } else nextBaseLanes = renderLanes1;
                 // Schedule this fiber to re-render at offscreen priority. Then bailout.
                markSpawnedWork(OffscreenLane);
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes
                };
                workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
                // to avoid a push/pop misalignment.
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                // Rendering at offscreen, so we can clear the base lanes.
                var _nextState2 = {
                    baseLanes: NoLanes
                };
                workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes1;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes1); // Since we're not hidden anymore, reset the state
                workInProgress.memoizedState = null;
            } else // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes1;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    } // Note: These happen to have identical begin phases, for now. We shouldn't hold
    // ourselves to this constraint, though. If the behavior diverges, we should
    // fork the function.
    var updateLegacyHiddenComponent = updateOffscreenComponent;
    function updateFragment(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateMode(current4, workInProgress, renderLanes1) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateProfiler(current4, workInProgress, renderLanes1) {
        workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
        // These are reset during render to allow the DevTools commit hook a chance to read them,
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function markRef(current4, workInProgress) {
        var ref = workInProgress.ref;
        if (current4 === null && ref !== null || current4 !== null && current4.ref !== ref) // Schedule a Ref effect
        workInProgress.flags |= Ref;
    }
    function updateFunctionComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        prepareToReadContext(workInProgress, renderLanes1);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
        if (workInProgress.mode & StrictMode) {
            disableLogs();
            try {
                nextChildren = renderWithHooks(current4, workInProgress, Component, nextProps, context, renderLanes1);
            } finally{
                reenableLogs();
            }
        }
        setIsRendering(false);
        if (current4 !== null && !didReceiveUpdate) {
            bailoutHooks(current4, workInProgress, renderLanes1);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateClassComponent(current4, workInProgress, Component, nextProps, renderLanes1) {
        if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentName(Component));
        }
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            if (current4 !== null) {
                // A class component without an instance only mounts if it suspended
                // inside a non-concurrent tree, in an inconsistent state. We want to
                // treat it like a new mount, even though an empty version of it already
                // committed. Disconnect the alternate pointers.
                current4.alternate = null;
                workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
                workInProgress.flags |= Placement;
            } // In the initial pass we might need to construct the instance.
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
            shouldUpdate = true;
        } else if (current4 === null) // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        else shouldUpdate = updateClassInstance(current4, workInProgress, Component, nextProps, renderLanes1);
        var nextUnitOfWork = finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress.type) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current4, workInProgress, Component, shouldUpdate, hasContext, renderLanes1) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current4, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            // Context providers should defer to sCU for rendering
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var instance = workInProgress.stateNode; // Rerender
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            // If we captured an error, but getDerivedStateFromError is not defined,
            // unmount all the children. componentDidCatch will schedule an update to
            // re-render a fallback. This is temporary until we migrate everyone to
            // the new API.
            // TODO: Warn in a future release.
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    instance.render();
                } finally{
                    reenableLogs();
                }
            }
            setIsRendering(false);
        } // React DevTools reads this flag.
        workInProgress.flags |= PerformedWork;
        if (current4 !== null && didCaptureError) // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current4, workInProgress, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
         // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.
        workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root1 = workInProgress.stateNode;
        if (root1.pendingContext) pushTopLevelContextObject(workInProgress, root1.pendingContext, root1.pendingContext !== root1.context);
        else if (root1.context) // Should always be set
        pushTopLevelContextObject(workInProgress, root1.context, false);
        pushHostContainer(workInProgress, root1.containerInfo);
    }
    function updateHostRoot(current4, workInProgress, renderLanes1) {
        pushHostRootContext(workInProgress);
        var updateQueue = workInProgress.updateQueue;
        if (!(current4 !== null && updateQueue !== null)) throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState !== null ? prevState.element : null;
        cloneUpdateQueue(current4, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes1);
        var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
        // being called "element".
        var nextChildren = nextState.element;
        if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
        }
        var root1 = workInProgress.stateNode;
        if (root1.hydrate && enterHydrationState(workInProgress)) {
            var mutableSourceEagerHydrationData = root1.mutableSourceEagerHydrationData;
            if (mutableSourceEagerHydrationData != null) for(var i = 0; i < mutableSourceEagerHydrationData.length; i += 2){
                var mutableSource = mutableSourceEagerHydrationData[i];
                var version = mutableSourceEagerHydrationData[i + 1];
                setWorkInProgressVersion(mutableSource, version);
            }
            var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes1);
            workInProgress.child = child;
            var node = child;
            while(node){
                // Mark each child as hydrating. This is a fast path to know whether this
                // tree is part of a hydrating tree. This is used to determine if a child
                // node has fully mounted yet, and for scheduling event replaying.
                // Conceptually this is similar to Placement in that a new subtree is
                // inserted into the React tree here. It just happens to not need DOM
                // mutations because it already exists.
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
            }
        } else {
            // Otherwise reset hydration state in case we aborted and resumed another
            // root.
            reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
            resetHydrationState();
        }
        return workInProgress.child;
    }
    function updateHostComponent(current4, workInProgress, renderLanes1) {
        pushHostContext(workInProgress);
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current4 !== null ? current4.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also has access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.flags |= ContentReset;
        markRef(current4, workInProgress);
        reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    function updateHostText(current4, workInProgress) {
        if (current4 === null) tryToClaimNextHydratableInstance(workInProgress);
         // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes1) {
        if (_current !== null) {
            // A lazy component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload); // Store the unwrapped component in the type.
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes1);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentName(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes1);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes1) {
        if (_current !== null) {
            // An incomplete component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        } // Promote the fiber to a class and try rendering again.
        workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes1);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes1);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes1) {
        if (_current !== null) {
            // An indeterminate component only mounts if it suspended inside a non-
            // concurrent tree, in an inconsistent state. We want to treat it like
            // a new mount, even though an empty version of it already committed.
            // Disconnect the alternate pointers.
            _current.alternate = null;
            workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect
            workInProgress.flags |= Placement;
        }
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes1);
        var value;
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        // Support for module components is deprecated and is removed behind a flag.
        // Whether or not it would crash later, we want to show a good message in DEV first.
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (// Eventually we'll delete this branch altogether.
        typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent; // Throw out any hooks that were used.
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
            // During mounting we don't know the child context yet as the instance doesn't exist.
            // We will invalidate the child context in finishClassComponent() right after rendering.
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === 'function') applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes1);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes1);
        } else {
            // Proceed under the assumption that this is a function component
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictMode) {
                disableLogs();
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes1);
                } finally{
                    reenableLogs();
                }
            }
            reconcileChildren(null, workInProgress, value, renderLanes1);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || workInProgress._debugID || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentName(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes1) {
        return {
            baseLanes: renderLanes1
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes1) {
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes1)
        };
    } // TODO: Probably should inline this back
    function shouldRemainOnFallback(suspenseContext, current4, workInProgress, renderLanes1) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current4 !== null) {
            var suspenseState = current4.memoizedState;
            if (suspenseState === null) // Currently showing content. Don't hide it, even if ForceSuspenseFallack
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false;
        } // Not currently showing content. Consult the Suspense context.
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current4, renderLanes1) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current4.childLanes, renderLanes1);
    }
    function updateSuspenseComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current4)) {
            // Something in this boundary's subtree already suspended. Switch to
            // rendering the fallback children.
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else {
            // Attempting the main content
            if (current4 === null || current4.memoizedState !== null) // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            {
                if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconcilation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.
        if (current4 === null) {
            // Initial mount
            // If we're currently hydrating, try to hydrate this boundary.
            // But only if this has a fallback.
            if (nextProps.fallback !== undefined) tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
                // This is a CPU-bound tree. Skip this tree and show a placeholder to
                // unblock the surrounding content. Then immediately retry after the
                // initial commit.
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes1);
                var _primaryChildFragment = workInProgress.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes1);
                workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
                // get it started back up to attempt the next item. While in terms of
                // priority this work has the same priority as this current render, it's
                // not part of the same transition once the transition has committed. If
                // it's sync, we still want to yield so that it can be painted.
                // Conceptually, this is really the same as pinging. We can use any
                // RetryLane even if it's the one currently rendering since we're leaving
                // it behind on this node.
                workInProgress.lanes = SomeRetryLane;
                markSpawnedWork(SomeRetryLane);
                return _fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes1);
        } else {
            // This is an update.
            // If the current fiber has a SuspenseState, that means it's already showing
            // a fallback.
            var prevState = current4.memoizedState;
            if (prevState !== null) {
                if (showFallback) {
                    var _nextFallbackChildren2 = nextProps.fallback;
                    var _nextPrimaryChildren2 = nextProps.children;
                    var _fallbackChildFragment = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes1);
                    var _primaryChildFragment3 = workInProgress.child;
                    var prevOffscreenState = current4.child.memoizedState;
                    _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes1);
                    _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1);
                    workInProgress.memoizedState = SUSPENDED_MARKER;
                    return _fallbackChildFragment;
                } else {
                    var _nextPrimaryChildren3 = nextProps.children;
                    var _primaryChildFragment4 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren3, renderLanes1);
                    workInProgress.memoizedState = null;
                    return _primaryChildFragment4;
                }
            } else // The current tree is not already showing a fallback.
            if (showFallback) {
                // Timed out.
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current4, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes1);
                var _primaryChildFragment5 = workInProgress.child;
                var _prevOffscreenState = current4.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes1) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes1);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current4, renderLanes1); // Skip the primary children, and continue working on the
                // fallback children.
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
            } else {
                // Still haven't timed out. Continue rendering the children, like we
                // normally do.
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current4, workInProgress, _nextPrimaryChildren5, renderLanes1);
                workInProgress.memoizedState = null;
                return _primaryChildFragment6;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes1, null);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function createWorkInProgressOffscreenFiber(current4, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current4, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current4, workInProgress, primaryChildren, renderLanes1) {
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & BlockingMode) === NoMode) primaryChildFragment.lanes = renderLanes1;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            // Delete the fallback child fragment
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current4, workInProgress, primaryChildren, fallbackChildren, renderLanes1) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current4.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if (// completed, even though it's in an inconsistent state.
        (mode & BlockingMode) === NoMode && // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                // Reset the durations from the first pass so they aren't included in the
                // final amounts. This seems counterintuitive, since we're intentionally
                // not measuring part of the render phase, but this makes it match what we
                // do in Concurrent Mode.
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            } // The fallback fiber was added as a deletion effect during the first pass.
            // However, since we're going to remain on the fallback, we no longer want
            // to delete it. So we need to remove it from the list. Deletions are stored
            // on the same list as effects. We want to keep the effects from the primary
            // tree. So we copy the primary child fragment's effect list, which does not
            // include the fallback deletion effect.
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
                workInProgress.firstEffect = primaryChildFragment.firstEffect;
                workInProgress.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
            } else // TODO: Reset this somewhere else? Lol legacy mode is so weird.
            workInProgress.firstEffect = workInProgress.lastEffect = null;
        } else primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes1, null); // Needs a placement effect because the parent (the Suspense boundary) already
            // mounted but this is a new fiber.
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function scheduleWorkOnFiber(fiber, renderLanes1) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes1);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes1);
        scheduleWorkOnParentPath(fiber.return, renderLanes1);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes1) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleWorkOnFiber(node, renderLanes1);
            } else if (node.tag === SuspenseListComponent) // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderLanes1);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate; // New rows can't be content rows.
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error("\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.", revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error("\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
                    break;
            }
            else error("%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?", revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error("\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?", tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error("<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?", tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index1) {
        var isArray1 = Array.isArray(childSlot);
        var isIterable = !isArray1 && typeof getIteratorFn(childSlot) === 'function';
        if (isArray1 || isIterable) {
            var type = isArray1 ? 'array' : 'iterable';
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index1, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (Array.isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error("A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?", revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering
        };
        else {
            // We can reuse the existing object from previous renders.
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
        }
    } // This can end up rendering this component multiple passes.
    // The first pass splits the children fibers into two sets. A head and tail.
    // We first render the head. If anything is in fallback state, we do another
    // pass through beginWork to rerender all children (including the tail) with
    // the force suspend context. If the first render didn't have anything in
    // in fallback state. Then we render each row in the tail one-by-one.
    // That happens in the completeWork phase without going back to beginWork.
    function updateSuspenseListComponent(current4, workInProgress, renderLanes1) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current4 !== null && (current4.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes1);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & BlockingMode) === NoMode) // In legacy mode, SuspenseList doesn't work so we just
        // use make it a noop by treating it as the default revealOrder.
        workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    // The whole list is part of the tail.
                    // TODO: We could fast path by just rendering the tail now.
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    // Disconnect the tail rows after the content row.
                    // We're going to render them separately later.
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode, workInProgress.lastEffect);
                break;
            case 'backwards':
                // We're going to find the first row that has existing content.
                // At the same time we're going to reverse the list of everything
                // we pass in the meantime. That's going to be our tail in reverse
                // order.
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate; // New rows can't be content rows.
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        // This is the beginning of the main content.
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                } // TODO: If workInProgress.child is null, we can continue on the tail immediately.
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode, workInProgress.lastEffect);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined, workInProgress.lastEffect);
                break;
            default:
                // The default reveal order is the same as not having
                // a boundary.
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current4, workInProgress, renderLanes1) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current4 === null) // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes1);
        else reconcileChildren(current4, workInProgress, nextChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current4, workInProgress, renderLanes1) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
                // No change. Bailout early if children are the same.
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(workInProgress, context, changedBits, renderLanes1);
        }
        var newChildren = newProps.children;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current4, workInProgress, renderLanes1) {
        var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
        if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes1);
        var newValue = readContext(context, newProps.unstable_observedBits);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current4, workInProgress, newChildren, renderLanes1);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1) {
        if (current4 !== null) // Reuse previous dependencies
        workInProgress.dependencies = current4.dependencies;
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.
        if (!includesSomeLane(renderLanes1, workInProgress.childLanes)) // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
        else {
            // This fiber doesn't have work, but its subtree does. Clone the child
            // fibers and continue.
            cloneChildFibers(current4, workInProgress);
            return workInProgress.child;
        }
    }
    function remountFiber(current4, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
         // Disconnect from the old current.
        // It will get deleted.
        current4.alternate = null;
        oldWorkInProgress.alternate = null; // Connect to the new tree.
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        } // Delete the old fiber and place the new one.
        // Since the old fiber is disconnected, we have to schedule it manually.
        var last = returnFiber.lastEffect;
        if (last !== null) {
            last.nextEffect = current4;
            returnFiber.lastEffect = current4;
        } else returnFiber.firstEffect = returnFiber.lastEffect = current4;
        current4.nextEffect = null;
        current4.flags = Deletion;
        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.
        return newWorkInProgress;
    }
    function beginWork(current4, workInProgress, renderLanes1) {
        var updateLanes = workInProgress.lanes;
        if (workInProgress._debugNeedsRemount && current4 !== null) // This will restart the begin phase with a new fiber.
        return remountFiber(current4, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current4 !== null) {
            var oldProps = current4.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current4.type) // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true;
            else if (!includesSomeLane(renderLanes1, updateLanes)) {
                didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
                // the begin phase. There's still some bookkeeping we that needs to be done
                // in this optimized path, mostly pushing stuff onto the stack.
                switch(workInProgress.tag){
                    case HostRoot:
                        pushHostRootContext(workInProgress);
                        resetHydrationState();
                        break;
                    case HostComponent:
                        pushHostContext(workInProgress);
                        break;
                    case ClassComponent:
                        var Component = workInProgress.type;
                        if (isContextProvider(Component)) pushContextProvider(workInProgress);
                        break;
                    case HostPortal:
                        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                        break;
                    case ContextProvider:
                        var newValue = workInProgress.memoizedProps.value;
                        pushProvider(workInProgress, newValue);
                        break;
                    case Profiler:
                        // Profiler should only call onRender when one of its descendants actually rendered.
                        var hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (hasChildWork) workInProgress.flags |= Update;
                         // Reset effect durations for the next eventual effect phase.
                        // These are reset during render to allow the DevTools commit hook a chance to read them,
                        var stateNode = workInProgress.stateNode;
                        stateNode.effectDuration = 0;
                        stateNode.passiveEffectDuration = 0;
                        break;
                    case SuspenseComponent:
                        var state = workInProgress.memoizedState;
                        if (state !== null) {
                            // whether to retry the primary children, or to skip over it and
                            // go straight to the fallback. Check the priority of the primary
                            // child fragment.
                            var primaryChildFragment = workInProgress.child;
                            var primaryChildLanes = primaryChildFragment.childLanes;
                            if (includesSomeLane(renderLanes1, primaryChildLanes)) // The primary children have pending work. Use the normal path
                            // to attempt to render the primary children again.
                            return updateSuspenseComponent(current4, workInProgress, renderLanes1);
                            else {
                                // The primary child fragment does not have pending work marked
                                // on it
                                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                                // priority. Bailout.
                                var child = bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
                                if (child !== null) // The fallback children have pending work. Skip over the
                                // primary children and work on the fallback.
                                return child.sibling;
                                else return null;
                            }
                        } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        break;
                    case SuspenseListComponent:
                        var didSuspendBefore = (current4.flags & DidCapture) !== NoFlags;
                        var _hasChildWork = includesSomeLane(renderLanes1, workInProgress.childLanes);
                        if (didSuspendBefore) {
                            if (_hasChildWork) // If something was in fallback state last time, and we have all the
                            // same children then we're still in progressive loading state.
                            // Something might get unblocked by state updates or retries in the
                            // tree which will affect the tail. So we need to use the normal
                            // path to compute the correct tail.
                            return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
                             // If none of the children had any work, that means that none of
                            // them got retried so they'll still be blocked in the same way
                            // as before. We can fast bail out.
                            workInProgress.flags |= DidCapture;
                        } // If nothing suspended before and we're rendering the same children,
                        // then the tail doesn't matter. Anything new that suspends will work
                        // in the "together" mode, so we can continue from the state we had.
                        var renderState = workInProgress.memoizedState;
                        if (renderState !== null) {
                            // Reset to the "together" mode in case we've started a different
                            // update in the past but didn't complete it.
                            renderState.rendering = null;
                            renderState.tail = null;
                            renderState.lastEffect = null;
                        }
                        pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                        if (_hasChildWork) break;
                        else // If none of the children had any work, that means that none of
                        // them got retried so they'll still be blocked in the same way
                        // as before. We can fast bail out.
                        return null;
                    case OffscreenComponent:
                    case LegacyHiddenComponent:
                        // Need to check if the tree still needs to be deferred. This is
                        // almost identical to the logic used in the normal update path,
                        // so we'll just enter that. The only difference is we'll bail out
                        // at the next level instead of this one, because the child props
                        // have not changed. Which is fine.
                        // TODO: Probably should refactor `beginWork` to split the bailout
                        // path from the normal path. I'm tempted to do a labeled break here
                        // but I won't :)
                        workInProgress.lanes = NoLanes;
                        return updateOffscreenComponent(current4, workInProgress, renderLanes1);
                }
                return bailoutOnAlreadyFinishedWork(current4, workInProgress, renderLanes1);
            } else if ((current4.flags & ForceUpdateForLegacySuspense) !== NoFlags) // This is a special case that only exists for legacy mode.
            // See https://github.com/facebook/react/pull/19216.
            didReceiveUpdate = true;
            else // An update was scheduled on this fiber, but there are no new props
            // nor legacy context. Set this to false. If an update queue or context
            // consumer produces a changed value, it will set this to true. Otherwise,
            // the component will assume the children have not changed and bail out.
            didReceiveUpdate = false;
        } else didReceiveUpdate = false;
         // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current4, workInProgress, workInProgress.type, renderLanes1);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current4, workInProgress, elementType, updateLanes, renderLanes1);
            case FunctionComponent:
                var _Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current4, workInProgress, _Component, resolvedProps, renderLanes1);
            case ClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current4, workInProgress, _Component2, _resolvedProps, renderLanes1);
            case HostRoot:
                return updateHostRoot(current4, workInProgress, renderLanes1);
            case HostComponent:
                return updateHostComponent(current4, workInProgress, renderLanes1);
            case HostText:
                return updateHostText(current4, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current4, workInProgress, renderLanes1);
            case HostPortal:
                return updatePortalComponent(current4, workInProgress, renderLanes1);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current4, workInProgress, type, _resolvedProps2, renderLanes1);
            case Fragment:
                return updateFragment(current4, workInProgress, renderLanes1);
            case Mode:
                return updateMode(current4, workInProgress, renderLanes1);
            case Profiler:
                return updateProfiler(current4, workInProgress, renderLanes1);
            case ContextProvider:
                return updateContextProvider(current4, workInProgress, renderLanes1);
            case ContextConsumer:
                return updateContextConsumer(current4, workInProgress, renderLanes1);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentName(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current4, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes1);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current4, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes1);
            case IncompleteClassComponent:
                var _Component3 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current4, workInProgress, _Component3, _resolvedProps4, renderLanes1);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current4, workInProgress, renderLanes1);
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current4, workInProgress, renderLanes1);
            case LegacyHiddenComponent:
                return updateLegacyHiddenComponent(current4, workInProgress, renderLanes1);
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    // Mutation mode
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(workInProgress) {
    };
    updateHostComponent$1 = function(current4, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current4.memoizedProps;
        if (oldProps === newProps) // In mutation mode, this is sufficient for a bailout because
        // we won't touch this node even if children changed.
        return;
         // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.
        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current4, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) // If we're hydrating, we should consume as many items as we can
        // so we don't leave any behind.
        return;
        switch(renderState.tailMode){
            case 'hidden':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (lastTailNode === null) // All remaining items in the tail are insertions.
                renderState.tail = null;
                else // Detach the insertion after the last node that was already
                // inserted.
                lastTailNode.sibling = null;
                break;
            case 'collapsed':
                // Any insertions at the end of the tail list after this point
                // should be invisible. If there are already mounted boundaries
                // anything before them are not considered for collapsing.
                // Therefore we need to go through the whole tail to find if
                // there are any.
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                } // Next we're simply going to delete all insertions after the
                // last rendered item.
                if (_lastTailNode === null) {
                    // All remaining items in the tail are insertions.
                    if (!hasRenderedATailFallback && renderState.tail !== null) // We suspended during the head. We want to show at least one
                    // row at the tail. So we'll keep on and cut off the rest.
                    renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else // Detach the insertion after the last node that was already
                // inserted.
                _lastTailNode.sibling = null;
                break;
        }
    }
    function completeWork(current4, workInProgress, renderLanes1) {
        var newProps = workInProgress.pendingProps;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress.stateNode;
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current4 === null || current4.child === null) {
                    // If we hydrated, pop so that we can delete any remaining children
                    // that weren't hydrated.
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) // If we hydrated, then we'll need to schedule an update for
                    // the commit side-effects on the root.
                    markUpdate(workInProgress);
                    else if (!fiberRoot.hydrate) // Schedule an effect to clear this container at the start of the next commit.
                    // This handles the case of React rendering into a container with previous children.
                    // It's also safe to do for updates too, because current.child would only be null
                    // if the previous render was null (so the the container would already be empty).
                    workInProgress.flags |= Snapshot;
                }
                updateHostContainer(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current4 !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current4, workInProgress, type, newProps, rootContainerInstance);
                    if (current4.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                        return null;
                    }
                    var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
                    // "stack" as the parent. Then append children as we go in beginWork
                    // or completeWork depending on whether we want to add them top->down or
                    // bottom->up. Top->down is faster in IE11.
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) // TODO: Move this and createInstance step into the beginPhase
                    // to consolidate.
                    {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) // If changes to the hydrated node need to be applied at the
                        // commit-phase we mark this as such.
                        markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
                        // (eg DOM renderer supports auto-focus for certain elements).
                        // Make sure such renderers get scheduled for later work.
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) // If there is a ref on a host node we need to schedule a callback
                    markRef$1(workInProgress);
                }
                return null;
            case HostText:
                var newText = newProps;
                if (current4 && workInProgress.stateNode != null) {
                    var oldText = current4.memoizedProps; // If we have an alternate, that means this is an update and we need
                    // to schedule a side-effect to do the updates.
                    updateHostText$1(current4, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (!(workInProgress.stateNode !== null)) throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                         // This can happen when we abort work.
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    // Something suspended. Re-render with the fallback children.
                    workInProgress.lanes = renderLanes1; // Do not reset the effect list.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current4 === null) {
                    if (workInProgress.memoizedProps.fallback !== undefined) popHydrationState(workInProgress);
                } else {
                    var prevState = current4.memoizedState;
                    prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) // If this subtreee is running in blocking mode we can suspend,
                // otherwise we won't suspend.
                // TODO: This will still suspend a synchronous tree if anything
                // in the concurrent tree already suspended during this render.
                // This is a known bug.
                {
                    if ((workInProgress.mode & BlockingMode) !== NoMode) {
                        // TODO: Move this back to throwException because this is too late
                        // if this is a large tree which is common for initial loads. We
                        // don't know if we should restart a render or not until we get
                        // this marker, and this is too late.
                        // If this render already had a ping or lower pri updates,
                        // and this is the first time we know we're going to suspend we
                        // should be able to immediately restart from within throwException.
                        var hasInvisibleChildContext = current4 === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;
                        if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) // If this was in an invisible tree or a new render, then showing
                        // this boundary is ok.
                        renderDidSuspend();
                        else // Otherwise, we're going to have to hide content so we should
                        // suspend for longer if possible.
                        renderDidSuspendDelayIfPossible();
                    }
                }
                // TODO: Only schedule updates if these values are non equal, i.e. it changed.
                if (nextDidTimeout || prevDidTimeout) // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update;
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(workInProgress);
                if (current4 === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                return null;
            case ContextProvider:
                // Pop provider fiber
                popProvider(workInProgress);
                return null;
            case IncompleteClassComponent:
                // Same as class component case. I put it down here so that the tags are
                // sequential to ensure this switch is compiled to a jump table.
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) // We're running in the default, "independent" mode.
                // We don't do anything in this mode.
                return null;
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    // We just rendered the head.
                    if (!didSuspendAlready) {
                        // This is the first pass. We need to figure out if anything is still
                        // suspended in the rendered set.
                        // If new content unsuspended, but there's still some content that
                        // didn't. Then we need to do a second pass that forces everything
                        // to keep showing their fallbacks.
                        // We might be suspended if something in this render pass suspended, or
                        // something in the previous committed pass suspended. Otherwise,
                        // there's no chance so we can skip the expensive call to
                        // findFirstSuspended.
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current4 === null || (current4.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                                    // part of the second pass. In that case nothing will subscribe to
                                    // its thennables. Instead, we'll transfer its thennables to the
                                    // SuspenseList so that it can retry if they resolve.
                                    // There might be multiple of these in the list but since we're
                                    // going to wait for all of them anyway, it doesn't really matter
                                    // which ones gets to ping. In theory we could get clever and keep
                                    // track of how many dependencies remain but it gets tricky because
                                    // in the meantime, we can add/remove/change items and dependencies.
                                    // We might bail out of the loop before finding any but that
                                    // doesn't matter since that means that the other boundaries that
                                    // we did find already has their listeners attached.
                                    var newThennables = suspended.updateQueue;
                                    if (newThennables !== null) {
                                        workInProgress.updateQueue = newThennables;
                                        workInProgress.flags |= Update;
                                    } // Rerender the whole list, but this time, we'll force fallbacks
                                    // to stay in place.
                                    // Reset the effect list before doing the second pass since that's now invalid.
                                    if (renderState.lastEffect === null) workInProgress.firstEffect = null;
                                    workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.
                                    resetChildFibers(workInProgress, renderLanes1); // Set up the Suspense Context to force suspense and immediately
                                    // rerender the children.
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            // We have already passed our CPU deadline but we still have rows
                            // left in the tail. We'll just give up further attempts to render
                            // the main content and only render fallbacks.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                     // Next we're going to render the tail.
                } else {
                    // Append the rendered row to the child list.
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
                            // get lost if this row ends up dropped during a second pass.
                            var _newThennables = _suspended.updateQueue;
                            if (_newThennables !== null) {
                                workInProgress.updateQueue = _newThennables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true); // This might have been modified.
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
                            ) {
                                // We need to delete the row we just rendered.
                                // Reset the effect list to what it was before we rendered this
                                // child. The nested children have already appended themselves.
                                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.
                                if (lastEffect !== null) lastEffect.nextEffect = null;
                                 // We're done.
                                return null;
                            }
                        } else if (// time we have to render. So rendering one more row would likely
                        // exceed it.
                        now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes1 !== OffscreenLane) {
                            // We have now passed our CPU deadline and we'll just give up further
                            // attempts to render the main content and only render fallbacks.
                            // The assumption is that this is usually faster.
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
                            // to get it started back up to attempt the next item. While in terms
                            // of priority this work has the same priority as this current render,
                            // it's not part of the same transition once the transition has
                            // committed. If it's sync, we still want to yield so that it can be
                            // painted. Conceptually, this is really the same as pinging.
                            // We can use any RetryLane even if it's the one currently rendering
                            // since we're leaving it behind on this node.
                            workInProgress.lanes = SomeRetryLane;
                            markSpawnedWork(SomeRetryLane);
                        }
                    }
                    if (renderState.isBackwards) {
                        // The effect list of the backwards tail will have been added
                        // to the end. This breaks the guarantee that life-cycles fire in
                        // sibling order but that isn't a strong guarantee promised by React.
                        // Especially since these might also just pop in during future commits.
                        // Append to the beginning of the list.
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    // We still have tail rows to render.
                    // Pop a row.
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.lastEffect = workInProgress.lastEffect;
                    renderState.renderingStartTime = now();
                    next.sibling = null; // Restore the context.
                    // TODO: We can probably just avoid popping it instead and only
                    // setting it the first time we go from not suspended to suspended.
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
                    return next;
                }
                return null;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case Block:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                if (current4 !== null) {
                    var _nextState = workInProgress.memoizedState;
                    var _prevState = current4.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    var nextIsHidden = _nextState !== null;
                    if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') workInProgress.flags |= Update;
                }
                return null;
        }
        throw Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function unwindWork(workInProgress, renderLanes1) {
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if (!((_flags & DidCapture) === NoFlags)) throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress;
            case HostComponent:
                // TODO: popHydrationState
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
                // caught by a nested boundary. If not, it should bubble through.
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                popProvider(workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(interruptedWork) {
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                popProvider(interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source)
        };
    }
    // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
            // This enables renderers like ReactNative to better manage redbox behavior.
            if (logError === false) return;
            var error4 = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.
            if (error4 != null && error4._suppressLogging) {
                if (boundary.tag === ClassComponent) // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return;
                 // The error is fatal. Since the silencing might have
                // been accidental, we'll surface it anyway.
                // However, the browser would have silenced the original error
                // so we'll print it first, and then print the stack addendum.
                console['error'](error4); // Don't transform to our wrapper
            // For a more detailed description of this block, see:
            // https://github.com/facebook/react/pull/13384
            }
            var componentName = source ? getComponentName(source.type) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            var errorBoundaryName = getComponentName(boundary.type);
            if (errorBoundaryName) errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            else errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
            console['error'](combinedMessage); // Don't transform to our wrapper
        } catch (e) {
            // This method must not throw, or React internal state will get messed up.
            // If console.error is overridden, or logCapturedError() shows a dialog that throws,
            // we want to report this error outside of the normal stack as a last resort.
            // https://github.com/facebook/react/issues/13188
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.
        update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: null
        };
        var error4 = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error4);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            if (typeof getDerivedStateFromError !== 'function') {
                // To preserve the preexisting retry behavior of error boundaries,
                // we keep track of which ones already failed during this batch.
                // This gets reset before we yield back to the browser.
                // TODO: Warn in strict mode if getDerivedStateFromError is
                // not defined.
                markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined
                logCapturedError(fiber, errorInfo);
            }
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') // If componentDidCatch is the only error boundary method defined,
            // then it needs to call setState to recover from errors.
            // If no state update is scheduled then the boundary will swallow the error.
            {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || 'Unknown');
            }
        };
        else update.callback = function() {
            markFailedErrorBoundaryForHotReloading(fiber);
        };
        return update;
    }
    function attachPingListener(root1, wakeable, lanes) {
        // Attach a listener to the promise to "ping" the root and retry. But only if
        // one does not already exist for the lanes we're currently rendering (which
        // acts like a "thread ID" here).
        var pingCache = root1.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root1.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            // Memoize using the thread ID to prevent redundant listeners.
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root1, wakeable, lanes);
            wakeable.then(ping, ping);
        }
    }
    function throwException(root1, returnFiber, sourceFiber, value, rootRenderLanes) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.
        sourceFiber.firstEffect = sourceFiber.lastEffect = null;
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            // This is a wakeable.
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
                // Reset the memoizedState to what it was before we attempted
                // to render it.
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                    sourceFiber.updateQueue = currentSource.updateQueue;
                    sourceFiber.memoizedState = currentSource.memoizedState;
                    sourceFiber.lanes = currentSource.lanes;
                } else {
                    sourceFiber.updateQueue = null;
                    sourceFiber.memoizedState = null;
                }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.
            var _workInProgress = returnFiber;
            do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                    // Found the nearest boundary.
                    // Stash the promise on the boundary fiber. If the boundary times out, we'll
                    // attach another listener to flip the boundary back to its normal state.
                    var wakeables = _workInProgress.updateQueue;
                    if (wakeables === null) {
                        var updateQueue = new Set();
                        updateQueue.add(wakeable);
                        _workInProgress.updateQueue = updateQueue;
                    } else wakeables.add(wakeable);
                     // If the boundary is outside of blocking mode, we should *not*
                    // suspend the commit. Pretend as if the suspended component rendered
                    // null and keep rendering. In the commit phase, we'll schedule a
                    // subsequent synchronous update to re-render the Suspense.
                    //
                    // Note: It doesn't matter whether the component that suspended was
                    // inside a blocking mode tree. If the Suspense is outside of it, we
                    // should *not* suspend the commit.
                    if ((_workInProgress.mode & BlockingMode) === NoMode) {
                        _workInProgress.flags |= DidCapture;
                        sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
                        // But we shouldn't call any lifecycle methods or callbacks. Remove
                        // all lifecycle effect tags.
                        sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                        if (sourceFiber.tag === ClassComponent) {
                            var currentSourceFiber = sourceFiber.alternate;
                            if (currentSourceFiber === null) // This is a new mount. Change the tag so it's not mistaken for a
                            // completed class component. For example, we should not call
                            // componentWillUnmount if it is deleted.
                            sourceFiber.tag = IncompleteClassComponent;
                            else {
                                // When we try rendering again, we should not reuse the current fiber,
                                // since it's known to be in an inconsistent state. Use a force update to
                                // prevent a bail out.
                                var update = createUpdate(NoTimestamp, SyncLane);
                                update.tag = ForceUpdate;
                                enqueueUpdate(sourceFiber, update);
                            }
                        } // The source fiber did not complete. Mark it with Sync priority to
                        // indicate that it still has pending work.
                        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.
                        return;
                    } // Confirmed that the boundary is in a concurrent mode tree. Continue
                    // with the normal suspend path.
                    //
                    // After this we'll use a set of heuristics to determine whether this
                    // render pass will run to completion or restart or "suspend" the commit.
                    // The actual logic for this is spread out in different places.
                    //
                    // This first principle is that if we're going to suspend when we complete
                    // a root, then we should also restart if we get an update or ping that
                    // might unsuspend it, and vice versa. The only reason to suspend is
                    // because you think you might want to restart before committing. However,
                    // it doesn't make sense to restart only while in the period we're suspended.
                    //
                    // Restarting too aggressively is also not good because it starves out any
                    // intermediate loading state. So we use heuristics to determine when.
                    // Suspense Heuristics
                    //
                    // If nothing threw a Promise or all the same fallbacks are already showing,
                    // then don't suspend/restart.
                    //
                    // If this is an initial render of a new tree of Suspense boundaries and
                    // those trigger a fallback, then don't suspend/restart. We want to ensure
                    // that we can show the initial loading state as quickly as possible.
                    //
                    // If we hit a "Delayed" case, such as when we'd switch from content back into
                    // a fallback, then we should always suspend/restart. Transitions apply
                    // to this case. If none is defined, JND is used instead.
                    //
                    // If we're already showing a fallback and it gets "retried", allowing us to show
                    // another level, but there's still an inner boundary that would show a fallback,
                    // then we suspend/restart for 500ms since the last time we showed a fallback
                    // anywhere in the tree. This effectively throttles progressive loading into a
                    // consistent train of commits. This also gives us an opportunity to restart to
                    // get to the completed state slightly earlier.
                    //
                    // If there's ambiguity due to batching it's resolved in preference of:
                    // 1) "delayed", 2) "initial render", 3) "retry".
                    //
                    // We want to ensure that a "busy" state doesn't get force committed. We want to
                    // ensure that new initial loading states can commit as soon as possible.
                    attachPingListener(root1, wakeable, rootRenderLanes);
                    _workInProgress.flags |= ShouldCapture;
                    _workInProgress.lanes = rootRenderLanes;
                    return;
                } // This boundary already captured during this render. Continue to the next
                // boundary.
                _workInProgress = _workInProgress.return;
            }while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
            // TODO: Use invariant so the message is stripped in prod?
            value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.
        renderDidError();
        value = createCapturedValue(value, sourceFiber);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, _update);
                    return;
                case ClassComponent:
                    // Capture and retry
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state
                        var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update2);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var callComponentWillUnmountWithTimer = function(current4, instance) {
        instance.props = current4.memoizedProps;
        instance.state = current4.memoizedState;
        instance.componentWillUnmount();
    }; // Capture errors so they don't interrupt unmounting.
    function safelyCallComponentWillUnmount(current4, instance) {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current4, instance);
        if (hasCaughtError()) {
            var unmountError = clearCaughtError();
            captureCommitPhaseError(current4, unmountError);
        }
    }
    function safelyDetachRef(current4) {
        var ref = current4.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current4, refError);
                }
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current4, destroy) {
        invokeGuardedCallback(null, destroy, null);
        if (hasCaughtError()) {
            var error4 = clearCaughtError();
            captureCommitPhaseError(current4, error4);
        }
    }
    function commitBeforeMutationLifeCycles(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                return;
            case ClassComponent:
                if (finishedWork.flags & Snapshot) {
                    if (current4 !== null) {
                        var prevProps = current4.memoizedProps;
                        var prevState = current4.memoizedState;
                        var instance = finishedWork.stateNode; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                }
                return;
            case HostRoot:
                if (finishedWork.flags & Snapshot) {
                    var root1 = finishedWork.stateNode;
                    clearContainer(root1.containerInfo);
                }
                return;
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
                // Nothing to do for these component types
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Unmount
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) destroy();
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & tag) === tag) {
                    // Mount
                    var create = effect.create;
                    effect.destroy = create();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                        else addendum = ' You returned: ' + destroy;
                        error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                var _effect = effect, next = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                    enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                    enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next;
            }while (effect !== firstEffect)
        }
    }
    function commitLifeCycles(finishedRoot, current4, finishedWork, committedLanes) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
                schedulePassiveEffects(finishedWork);
                return;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (current4 === null) {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidMount();
                    } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current4.memoizedProps : resolveDefaultProps(finishedWork.type, current4.memoizedProps);
                        var prevState = current4.memoizedState; // We could update instance props and state here,
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        }
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                } // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || 'instance');
                    }
                    // but instead we rely on them being set during last render.
                    // TODO: revisit this when we implement resuming.
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
            case HostRoot:
                // TODO: I think this is now always non-null by the time it reaches the
                // commit phase. Consider removing the type check.
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
            case HostComponent:
                var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
                // (eg DOM renderer may schedule auto-focus for inputs and form controls).
                // These effects should only be committed when components are first mounted,
                // aka when there is no current/alternate.
                if (current4 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                return;
            case HostText:
                // We have no life-cycles associated with text.
                return;
            case HostPortal:
                // We have no life-cycles associated with portals.
                return;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime1 = getCommitTime();
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, current4 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime1, finishedRoot.memoizedInteractions);
                return;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) hideInstance(instance);
                else unhideInstance(node.stateNode, node.memoizedProps);
            } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) hideTextInstance(_instance3);
                else unhideTextInstance(_instance3, node.memoizedProps);
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            } // Moved outside to ensure DCE works with this flag
            if (typeof ref === 'function') ref(instanceToUse);
            else {
                if (!ref.hasOwnProperty('current')) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                ref.current = instanceToUse;
            }
        }
    }
    function commitDetachRef(current4) {
        var currentRef = current4.ref;
        if (currentRef !== null) {
            if (typeof currentRef === 'function') currentRef(null);
            else currentRef.current = null;
        }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay
    function commitUnmount(finishedRoot, current4, renderPriorityLevel) {
        onCommitUnmount(current4);
        switch(current4.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                var updateQueue = current4.updateQueue;
                if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                        var firstEffect = lastEffect.next;
                        var effect = firstEffect;
                        do {
                            var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                            if (destroy !== undefined) {
                                if ((tag & Passive$1) !== NoFlags$1) enqueuePendingPassiveHookEffectUnmount(current4, effect);
                                else safelyCallDestroy(current4, destroy);
                            }
                            effect = effect.next;
                        }while (effect !== firstEffect)
                    }
                }
                return;
            case ClassComponent:
                safelyDetachRef(current4);
                var instance = current4.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(current4, instance);
                return;
            case HostComponent:
                safelyDetachRef(current4);
                return;
            case HostPortal:
                unmountHostComponents(finishedRoot, current4);
                return;
            case FundamentalComponent:
                return;
            case DehydratedFragment:
                return;
            case ScopeComponent:
                return;
        }
    }
    function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root2;
        while(true){
            commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
            // Skip portals because commitUnmount() currently visits them recursively.
            if (node.child !== null && // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === root2) return;
            while(node.sibling === null){
                if (node.return === null || node.return === root2) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function detachFiberMutation(fiber) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        // Note: we cannot null out sibling here, otherwise it can cause issues
        // with findDOMNode and how it requires the sibling field to carry out
        // traversal in a later effect. See PR #16820. We now clear the sibling
        // field after effects, see: detachFiberAfterEffects.
        //
        // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
        // It may be required if the current component is an error boundary,
        // and one of its descendants throws while unmounting a passive effect.
        fiber.alternate = null;
        fiber.child = null;
        fiber.dependencies = null;
        fiber.firstEffect = null;
        fiber.lastEffect = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.return = null;
        fiber.updateQueue = null;
        fiber._debugOwner = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber;
        siblings: while(true){
            // If we didn't find anything, let's try the next sibling.
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) // If we pop out of the root or hit the parent the fiber we are the
                // last sibling.
                return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                // If it is not host node and, we might have a host node inside it.
                // Try to search down until we find one.
                if (node.flags & Placement) continue siblings;
                 // If we don't have a child, try the siblings instead.
                // We also skip portals because they are not part of this host tree.
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            } // Check if this host node is stable or about to be placed.
            if (!(node.flags & Placement)) // Found it!
            return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.
        var parent;
        var isContainer;
        var parentStateNode = parentFiber.stateNode;
        switch(parentFiber.tag){
            case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
            case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
            case FundamentalComponent:
            // eslint-disable-next-line-no-fallthrough
            default:
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (parentFiber.flags & ContentReset) {
            // Reset the text content of the parent before doing any insertions
            resetTextContent(parent); // Clear ContentReset from the effect tag
            parentFiber.flags &= ~ContentReset;
        }
        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.
        if (isContainer) insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
        else insertOrAppendPlacementNode(finishedWork, before, parent);
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function unmountHostComponents(finishedRoot, current4, renderPriorityLevel) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current4; // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.
        var currentParentIsValid = false; // Note: these two variables *must* always be updated together.
        var currentParent;
        var currentParentIsContainer;
        while(true){
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: while(true){
                    if (!(parent !== null)) throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    var parentStateNode = parent.stateNode;
                    switch(parent.tag){
                        case HostComponent:
                            currentParent = parentStateNode;
                            currentParentIsContainer = false;
                            break findParent;
                        case HostRoot:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                        case HostPortal:
                            currentParent = parentStateNode.containerInfo;
                            currentParentIsContainer = true;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
                // node from the tree.
                if (currentParentIsContainer) removeChildFromContainer(currentParent, node.stateNode);
                else removeChild(currentParent, node.stateNode);
                 // Don't visit children because we already visited them.
            } else if (node.tag === HostPortal) {
                if (node.child !== null) {
                    // When we go into a portal, it becomes the parent to remove from.
                    // We will reassign it back when we pop the portal on the way up.
                    currentParent = node.stateNode.containerInfo;
                    currentParentIsContainer = true; // Visit children because portals might contain host components.
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            } else {
                commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.
                if (node.child !== null) {
                    node.child.return = node;
                    node = node.child;
                    continue;
                }
            }
            if (node === current4) return;
            while(node.sibling === null){
                if (node.return === null || node.return === current4) return;
                node = node.return;
                if (node.tag === HostPortal) // When we go out of the portal, we need to restore the parent.
                // Since we don't keep a stack of them, we will search for it.
                currentParentIsValid = false;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitDeletion(finishedRoot, current4, renderPriorityLevel) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(finishedRoot, current4);
        var alternate = current4.alternate;
        detachFiberMutation(current4);
        if (alternate !== null) detachFiberMutation(alternate);
    }
    function commitWork(current4, finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block:
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                return;
            case ClassComponent:
                return;
            case HostComponent:
                var instance = finishedWork.stateNode;
                if (instance != null) {
                    // Commit the work prepared earlier.
                    var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                    // as the newProps. The updatePayload will contain the real change in
                    // this case.
                    var oldProps = current4 !== null ? current4.memoizedProps : newProps;
                    var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
                return;
            case HostText:
                if (!(finishedWork.stateNode !== null)) throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
                // as the newProps. The updatePayload will contain the real change in
                // this case.
                var oldText = current4 !== null ? current4.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
            case HostRoot:
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                    // We've just hydrated. No need to hydrate again.
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                }
                return;
            case Profiler:
                return;
            case SuspenseComponent:
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
            case SuspenseListComponent:
                attachSuspenseRetryListeners(finishedWork);
                return;
            case IncompleteClassComponent:
                return;
            case FundamentalComponent:
                break;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
        }
        throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState !== null) {
            markCommitTimeOfFallback();
            // Hide the Offscreen component that contains the primary children. TODO:
            // Ideally, this effect would have been scheduled on the Offscreen fiber
            // itself. That's how unhiding works: the Offscreen component schedules an
            // effect on itself. However, in this case, the component didn't complete,
            // so the fiber was never added to the effect list in the normal path. We
            // could have appended it to the effect list in the Suspense component's
            // second pass, but doing it this way is less complicated. This would be
            // simpler if we got rid of the effect list and traversed the tree, like
            // we're planning to do.
            var primaryChildParent = finishedWork.child;
            hideOrUnhideAllChildren(primaryChildParent, true);
        }
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current4 = finishedWork.alternate;
            if (current4 !== null) {
                var prevState = current4.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    if (wakeable.__reactDoNotTraceInteractions !== true) retry = tracing.unstable_wrap(retry);
                    retryCache.add(wakeable);
                    wakeable.then(retry, retry);
                }
            });
        }
    } // This function detects when a Suspense boundary goes from visible to hidden.
    // It returns false if the boundary is already hidden.
    // TODO: Use an effect tag.
    function isSuspenseBoundaryBeingHidden(current5, finishedWork) {
        if (current5 !== null) {
            var oldState = current5.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
            }
        }
        return false;
    }
    function commitResetTextContent(current5) {
        resetTextContent(current5.stateNode);
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor$1 = Symbol.for;
        COMPONENT_TYPE = symbolFor$1('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor$1('selector.role');
        TEST_NAME_TYPE = symbolFor$1('selector.test_id');
        TEXT_TYPE = symbolFor$1('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
    var NoContext = /*             */ 0;
    var BatchedContext = /*               */ 1;
    var EventContext = /*                 */ 2;
    var DiscreteEventContext = /*         */ 4;
    var LegacyUnbatchedContext = /*       */ 8;
    var RenderContext = /*                */ 16;
    var CommitContext = /*                */ 32;
    var RetryAfterError = /*       */ 64;
    var RootIncomplete = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5; // Describes where we are in the React execution stack
    var executionContext = NoContext; // The root we're working on
    var workInProgressRoot = null; // The fiber we're working on
    var workInProgress = null; // The lanes we're rendering
    var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
    // This is a superset of the lanes we started working on at the root. The only
    // case where it's different from `workInProgressRootRenderLanes` is when we
    // enter a subtree that is hidden and needs to be unhidden: Suspense and
    // Offscreen component.
    //
    // Most things in the work loop should deal with workInProgressRootRenderLanes.
    // Most things in begin/complete phases should deal with subtreeRenderLanes.
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.
    var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown
    var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
    // slightly different than `renderLanes` because `renderLanes` can change as you
    // enter and exit an Offscreen tree. This value is the combination of all render
    // lanes for the entire render phase.
    var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
    // includes unprocessed updates, not work in bailed out children.
    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.
    var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.
    var workInProgressRootPingedLanes = NoLanes;
    var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
    // model where we don't commit new loading states in too quick succession.
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
    // more and prefer CPU suspense heuristics instead.
    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
    // suspense heuristics and opt out of rendering more content.
    var RENDER_TIMEOUT_MS = 500;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var nextEffect = null;
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsRenderPriority = NoPriority$1;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveHookEffectsMount = [];
    var pendingPassiveHookEffectsUnmount = [];
    var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
    // during the commit phase. This enables them to be traced across components
    // that spawn new work during render. E.g. hidden boundaries, suspended SSR
    // hydration or SuspenseList.
    // TODO: Can use a bitmask instead of an array
    var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
    // event times as simultaneous, even if the actual clock time has advanced
    // between the first and second call.
    var currentEventTime = NoTimestamp;
    var currentEventWipLanes = NoLanes;
    var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
    // We warn about state updates for unmounted components differently in this case.
    var isFlushingPassiveEffects = false;
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) // We're inside React, so it's fine to read the actual time.
        return now();
         // We're not inside React, so we may be in the middle of a browser event.
        if (currentEventTime !== NoTimestamp) // Use the same start time for all updates until we enter React again.
        return currentEventTime;
         // This is the first update since React yielded. Compute a new start time.
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // The algorithm for assigning an update to a lane should be stable for all
        // updates at the same priority within the same event. To do this, the inputs
        // to the algorithm must be the same. For example, we use the `renderLanes`
        // to avoid choosing a lane that is already in the middle of rendering.
        //
        // However, the "included" lanes could be mutated in between updates in the
        // same event, like if you perform an update inside `flushSync`. Or any other
        // code path that might call `prepareFreshStack`.
        //
        // The trick we use is to cache the first of each of these inputs within an
        // event. Then reset the cached values once we can be sure the event is over.
        // Our heuristic for that is whenever we enter a concurrent work loop.
        //
        // We'll do the same for `currentEventPendingLanes` below.
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
        } // TODO: Remove this dependency on the Scheduler priority.
        // To do that, we're replacing it with an update lane priority.
        var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
        // This couples React to the Scheduler internals, so we're replacing it
        // with the currentUpdateLanePriority above. As an example of how this
        // could be problematic, if we're not inside `Scheduler.runWithPriority`,
        // then we'll get the priority of the current running Scheduler task,
        // which is probably not what we want.
        var lane;
        if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
        else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
        }
        return lane;
    }
    function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode;
        if ((mode & BlockingMode) === NoMode) return SyncLane;
        else if ((mode & ConcurrentMode) === NoMode) return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
         // See `requestUpdateLane` for explanation of `currentEventWipLanes`
        if (currentEventWipLanes === NoLanes) currentEventWipLanes = workInProgressRootIncludedLanes;
        return findRetryLane(currentEventWipLanes);
    }
    function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates();
        warnAboutRenderPhaseUpdatesInDEV(fiber);
        var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
        if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
        } // Mark that the root has a pending update.
        markRootUpdated(root2, lane, eventTime);
        if (root2 === workInProgressRoot) {
            workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) // The root already suspended with a delay, which means this render
            // definitely won't finish. Since we have a new update, let's mark it as
            // suspended now, right before marking the incoming update. This has the
            // effect of interrupting the current render and switching to the update.
            // TODO: Make sure this doesn't override pings that happen while we've
            // already started rendering.
            markRootSuspended$1(root2, workInProgressRootRenderLanes);
        } // TODO: requestUpdateLanePriority also reads the priority. Pass the
        // priority as an argument to that function and this one.
        var priorityLevel = getCurrentPriorityLevel();
        if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                // Register pending interactions on the root to avoid losing traced interaction data.
                schedulePendingInteractions(root2, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
                // root inside of batchedUpdates should be synchronous, but layout updates
                // should be deferred until the end of the batch.
                performSyncWorkOnRoot(root2);
            } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                    // Flush the synchronous work now, unless we're already working or inside
                    // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
                    // scheduleCallbackForFiber to preserve the ability to schedule a callback
                    // without immediately flushing it. We only do this for user-initiated
                    // updates, to preserve historical behavior of legacy mode.
                    resetRenderTimer();
                    flushSyncCallbackQueue();
                }
            }
        } else {
            // Schedule a discrete update but only if it's not Sync.
            if ((executionContext & DiscreteEventContext) !== NoContext && // discrete, even inside a discrete event.
            (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                // This is the result of a discrete event. Track the lowest priority
                // discrete update per root so we can flush them early, if needed.
                if (rootsWithPendingDiscreteUpdates === null) rootsWithPendingDiscreteUpdates = new Set([
                    root2
                ]);
                else rootsWithPendingDiscreteUpdates.add(root2);
            } // Schedule other updates after in case the callback is sync.
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
        } // We use this when assigning a lane for a transition inside
        // `requestUpdateLane`. We assume it's the same as the root being updated,
        // since in the common case of a single root app it probably is. If it's not
        // the same root, then it's not a huge deal, we just might batch more stuff
        // together more than necessary.
        mostRecentlyUpdatedRoot = root2;
    } // This is split into a separate function so we can mark a fiber with pending
    // work without treating it as a typical update that originates from an event;
    // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
    // on a fiber.
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
        } else return null;
    } // Use this function to schedule a task for a root. There's only one task per
    // root; if a task was already scheduled, we'll check to make sure the priority
    // of the existing task is the same as the priority of the next level that the
    // root has work on. This function is called on every update, and right before
    // exiting a task.
    function ensureRootIsScheduled(root3, currentTime) {
        var existingCallbackNode = root3.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.
        markStarvedLanesAsExpired(root3, currentTime); // Determine the next lanes to work on, and their priority.
        var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.
        var newCallbackPriority = returnNextLanesPriority();
        if (nextLanes === NoLanes) {
            // Special case: There's nothing to work on.
            if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root3.callbackNode = null;
                root3.callbackPriority = NoLanePriority;
            }
            return;
        } // Check if there's an existing task. We may be able to reuse it.
        if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) // The priority hasn't changed. We can reuse the existing task. Exit.
            return;
             // The priority changed. Cancel the existing callback. We'll schedule a new
            // one below.
            cancelCallback(existingCallbackNode);
        } // Schedule a new callback.
        var newCallbackNode;
        if (newCallbackPriority === SyncLanePriority) // Special case: Sync React callbacks are scheduled on a special
        // internal queue
        newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
        else if (newCallbackPriority === SyncBatchedLanePriority) newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
        else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
        }
        root3.callbackPriority = newCallbackPriority;
        root3.callbackNode = newCallbackNode;
    } // This is the entry point for every concurrent task, i.e. anything that
    // goes through Scheduler.
    function performConcurrentWorkOnRoot(root3) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp;
        currentEventWipLanes = NoLanes;
        currentEventPendingLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
         // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.
        var originalCallbackNode = root3.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            // Something in the passive effect phase may have canceled the current task.
            // Check if the task node for this root was changed.
            if (root3.callbackNode !== originalCallbackNode) // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null;
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.
        var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) // Defensive coding. This is never expected to happen.
        return null;
        var exitStatus = renderRootConcurrent(root3, lanes);
        if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) // The render included lanes that were updated during the render phase.
        // For example, when unhiding a hidden tree, we include all the lanes
        // that were previously skipped when the tree was hidden. That set of
        // lanes is a superset of the lanes we started rendering with.
        //
        // So we'll throw out the current work and restart.
        prepareFreshStack(root3, NoLanes);
        else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError; // If an error occurred during hydration,
                // discard server response and fall back to client side render.
                if (root3.hydrate) {
                    root3.hydrate = false;
                    clearContainer(root3.containerInfo);
                } // If something threw an error, try rendering one more time. We'll render
                // synchronously to block concurrent data mutations, and we'll includes
                // all pending updates are included. If it still fails after the second
                // attempt, we'll give up and commit the resulting tree.
                lanes = getLanesToRetrySynchronouslyOnError(root3);
                if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root3, NoLanes);
                markRootSuspended$1(root3, lanes);
                ensureRootIsScheduled(root3, now());
                throw fatalError;
            } // We now have a consistent tree. The next step is either to commit it,
            // or, if something suspended, wait to commit it after a timeout.
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            finishConcurrentRender(root3, exitStatus, lanes);
        }
        ensureRootIsScheduled(root3, now());
        if (root3.callbackNode === originalCallbackNode) // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root3);
        return null;
    }
    function finishConcurrentRender(root3, exitStatus, lanes) {
        switch(exitStatus){
            case RootIncomplete:
            case RootFatalErrored:
                throw Error("Root did not complete. This is a bug in React.");
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored:
                // We should have already attempted to retry this tree. If we reached
                // this point, it errored again. Commit it.
                commitRoot(root3);
                break;
            case RootSuspended:
                markRootSuspended$1(root3, lanes); // We have an acceptable loading state. We need to figure out if we
                // should immediately commit it or wait a bit.
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    // This render only included retries, no updates. Throttle committing
                    // retries so that we don't show too many loading states too quickly.
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root3, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root3.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            // We should prefer to render the fallback of at the last
                            // suspended level. Ping the last suspended level to try
                            // rendering it again.
                            // FIXME: What if the suspended lanes are Idle? Should not restart.
                            var eventTime = requestEventTime();
                            markRootPinged(root3, suspendedLanes);
                            break;
                        } // The render is suspended, it hasn't timed out, and there's no
                        // lower priority work to do. Instead of committing the fallback
                        // immediately, wait for more data to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                        break;
                    }
                } // The work expired. Commit immediately.
                commitRoot(root3);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root3, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    // This is not a transition, but we did trigger an avoided state.
                    // Schedule a placeholder to display after a short delay, using the Just
                    // Noticeable Difference.
                    // TODO: Is the JND optimization worth the added complexity? If this is
                    // the only reason we track the event time, then probably not.
                    // Consider removing.
                    var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.
                    if (_msUntilTimeout > 10) {
                        // Instead of committing the fallback immediately, wait for more data
                        // to arrive.
                        root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                        break;
                    }
                } // Commit the placeholder.
                commitRoot(root3);
                break;
            case RootCompleted:
                // The work completed. Ready to commit.
                commitRoot(root3);
                break;
            default:
                throw Error("Unknown root exit status.");
        }
    }
    function markRootSuspended$1(root3, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
        markRootSuspended(root3, suspendedLanes);
    } // This is the entry point for synchronous tasks that don't go
    // through Scheduler
    function performSyncWorkOnRoot(root3) {
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        flushPassiveEffects();
        var lanes;
        var exitStatus;
        if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
            // There's a partial tree, and at least one of its lanes has expired. Finish
            // rendering it before rendering the rest of the expired work.
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                // The render included lanes that were updated during the render phase.
                // For example, when unhiding a hidden tree, we include all the lanes
                // that were previously skipped when the tree was hidden. That set of
                // lanes is a superset of the lanes we started rendering with.
                //
                // Note that this only happens when part of the tree is rendered
                // concurrently. If the whole tree is rendered synchronously, then there
                // are no interleaved events.
                lanes = getNextLanes(root3, lanes);
                exitStatus = renderRootSync(root3, lanes);
            }
        } else {
            lanes = getNextLanes(root3, NoLanes);
            exitStatus = renderRootSync(root3, lanes);
        }
        if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError; // If an error occurred during hydration,
            // discard server response and fall back to client side render.
            if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.
            lanes = getLanesToRetrySynchronouslyOnError(root3);
            if (lanes !== NoLanes) exitStatus = renderRootSync(root3, lanes);
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
        } // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.
        var finishedWork = root3.current.alternate;
        root3.finishedWork = finishedWork;
        root3.finishedLanes = lanes;
        commitRoot(root3); // Before exiting, make sure there's a callback scheduled for the next
        // pending level.
        ensureRootIsScheduled(root3, now());
        return null;
    }
    function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            if ((executionContext & RenderContext) !== NoContext) error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
            // This is probably a nested event dispatch triggered by a lifecycle/effect,
            // like `el.focus()`. Exit.
            return;
        }
        flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.
        flushPassiveEffects();
    }
    function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
            // For each root with pending discrete updates, schedule a callback to
            // immediately flush them.
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root3) {
                markDiscreteUpdatesExpired(root3);
                ensureRootIsScheduled(root3, now());
            });
        } // Now flush the immediate queue.
        flushSyncCallbackQueue();
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= EventContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext;
        executionContext |= DiscreteEventContext;
        try {
            return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext &= ~BatchedContext;
        executionContext |= LegacyUnbatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
                // Flush the immediate callbacks that were scheduled during this batch
                resetRenderTimer();
                flushSyncCallbackQueue();
            }
        }
    }
    function flushSync(fn, a) {
        var prevExecutionContext = executionContext;
        if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            return fn(a);
        }
        executionContext |= BatchedContext;
        try {
            if (fn) return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
            else return undefined;
        } finally{
            executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.
            flushSyncCallbackQueue();
        }
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root3, lanes) {
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        var timeoutHandle = root3.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            // The root previous suspended and scheduled a timeout to commit a fallback
            // state. Now that we have additional work, cancel the timeout.
            root3.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root3;
        workInProgress = createWorkInProgress(root3.current, null);
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootIncomplete;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        spawnedWorkDuringRender = null;
        ReactStrictModeWarnings.discardPendingWarnings();
    }
    function handleError(root3, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                // Reset module-level state that was set during the render phase.
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
                // separate issue. Write a regression test using string refs.
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    // Expected to be working on a non-root fiber. This is a fatal error
                    // because there's no ancestor that can handle it; the root is
                    // supposed to capture all errors that weren't caught by an error
                    // boundary.
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
                    // sibling, or the parent if there are no siblings. But since the root
                    // has no siblings nor a parent, we set it to null. Usually this is
                    // handled by `completeUnitOfWork` or `unwindWork`, but since we're
                    // intentionally not calling those, we need set it here.
                    // TODO: Consider calling `unwindWork` to pop the contexts.
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) // Record the time spent rendering before an error was thrown. This
                // avoids inaccurate Profiler durations in the case of a
                // suspended render.
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                // Something in the return path also threw.
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    // If this boundary has already errored, then we had trouble processing
                    // the error. Bubble it to the next boundary.
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            } // Return to the normal work loop.
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) // The React isomorphic package does not include a default dispatcher.
        // Instead the first renderer will lazily attach one, in order to give
        // nicer error messages.
        return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function pushInteractions(root3) {
        var prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root3.memoizedInteractions;
        return prevInteractions;
    }
    function popInteractions(prevInteractions) {
        tracing.__interactionsRef.current = prevInteractions;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) workInProgressRootExitStatus = RootSuspendedWithDelay;
         // Check if there are updates that we skipped tree that might have unblocked
        // this render.
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) // Mark the current render as suspended so that we switch to working on
        // the updates that were skipped. Usually we only suspend at the end of
        // the render phase.
        // TODO: We should probably always mark the root as suspended immediately
        // (inside this function), since by suspending at the end of the render
        // phase introduces a potential mistake where we suspend lanes that were
        // pinged or updated while we were rendering.
        markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) workInProgressRootExitStatus = RootErrored;
    } // Called during render to determine if anything has suspended.
    // Returns false if we're not sure.
    function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete;
    }
    function renderRootSync(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    } // The work loop is an extremely hot path. Tell Closure not to inline it.
    /** @noinline */ function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
        }
        var prevInteractions = pushInteractions(root3);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root3, thrownValue);
        }
        resetContextDependencies();
        popInteractions(prevInteractions);
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) return RootIncomplete;
        else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes; // Return the final exit status.
            return workInProgressRootExitStatus;
        }
    }
    /** @noinline */ function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current5 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current5, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) // If this doesn't spawn new work, complete the current work.
        completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork;
        do {
            // The current, flushed, state of this fiber is the alternate. Ideally
            // nothing should rely on this, but relying on it here means that we don't
            // need an additional field on the work in progress.
            var current5 = completedWork.alternate;
            var returnFiber = completedWork.return; // Check if the work completed or if something threw.
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current5, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current5, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    // Completing this fiber spawned new work. Work on that next.
                    workInProgress = next;
                    return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                    // Append all the effects of the subtree and this fiber onto the effect
                    // list of the parent. The completion order of the children affects the
                    // side-effect order.
                    if (returnFiber.firstEffect === null) returnFiber.firstEffect = completedWork.firstEffect;
                    if (completedWork.lastEffect !== null) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                        returnFiber.lastEffect = completedWork.lastEffect;
                    } // If this fiber had side-effects, we append it AFTER the children's
                    // side-effects. We can perform certain side-effects earlier if needed,
                    // by doing multiple passes over the effect list. We don't want to
                    // schedule our own side-effect on our own list because if end up
                    // reusing children we'll schedule this effect onto itself since we're
                    // at the end.
                    var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
                    // list. PerformedWork effect is read by React DevTools but shouldn't be
                    // committed.
                    if (flags > PerformedWork) {
                        if (returnFiber.lastEffect !== null) returnFiber.lastEffect.nextEffect = completedWork;
                        else returnFiber.firstEffect = completedWork;
                        returnFiber.lastEffect = completedWork;
                    }
                }
            } else {
                // This fiber did not complete because something threw. Pop values off
                // the stack without entering the complete phase. If this is a boundary,
                // capture values if possible.
                var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.
                if (_next !== null) {
                    // If completing this work spawned new work, do that next. We'll come
                    // back here again.
                    // Since we're restarting, remove anything that is not a host effect
                    // from the effect tag.
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    // Record the render duration for the fiber that errored.
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    // Mark the parent fiber as incomplete and clear its effect list.
                    returnFiber.firstEffect = returnFiber.lastEffect = null;
                    returnFiber.flags |= Incomplete;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                // If there is more work to do in this returnFiber, do that next.
                workInProgress = siblingFiber;
                return;
            } // Otherwise, return to the parent
            completedWork = returnFiber; // Update the next thing we're working on in case something throws.
            workInProgress = completedWork;
        }while (completedWork !== null) // We've reached the root.
        if (workInProgressRootExitStatus === RootIncomplete) workInProgressRootExitStatus = RootCompleted;
    }
    function resetChildLanes(completedWork) {
        if (// to switch statement in `completeWork`.
        (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
        var newChildLanes = NoLanes; // Bubble up the earliest expiration time.
        if ((completedWork.mode & ProfileMode) !== NoMode) {
            // In profiling mode, resetChildExpirationTime is also used to reset
            // profiler durations.
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
            // only be updated if work is done on the fiber (i.e. it doesn't bailout).
            // When work is done, it should bubble to the parent's actualDuration. If
            // the fiber has not been cloned though, (meaning no work was done), then
            // this value will reflect the amount of time spent working on a previous
            // render. In that case it should not bubble. We determine whether it was
            // cloned by comparing the child pointer.
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while(child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
                // Don't count time spent in a timed out Suspense subtree as part of the base duration.
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) treeBaseDuration -= primaryChildFragment.treeBaseDuration;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
        } else {
            var _child = completedWork.child;
            while(_child !== null){
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
            }
        }
        completedWork.childLanes = newChildLanes;
    }
    function commitRoot(root3) {
        var renderPriorityLevel = getCurrentPriorityLevel();
        runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
        return null;
    }
    function commitRootImpl(root3, renderPriorityLevel) {
        do // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
        // means `flushPassiveEffects` will sometimes result in additional
        // passive effects. So we need to keep flushing in a loop until there are
        // no more pending effects.
        // TODO: Might be better if `flushPassiveEffects` did not automatically
        // flush synchronous work at the end, to avoid factoring hazards like this.
        flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Should not already be working.");
        var finishedWork = root3.finishedWork;
        var lanes = root3.finishedLanes;
        if (finishedWork === null) return null;
        root3.finishedWork = null;
        root3.finishedLanes = NoLanes;
        if (!(finishedWork !== root3.current)) throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
         // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.
        root3.callbackNode = null; // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root3, remainingLanes); // Clear already finished discrete updates in case that a later call of
        // `flushDiscreteUpdates` starts a useless render pass which may cancels
        // a scheduled timeout.
        if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) rootsWithPendingDiscreteUpdates.delete(root3);
        }
        if (root3 === workInProgressRoot) {
            // We can reset these now that they are finished.
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        } // Get the list of effects.
        var firstEffect;
        if (finishedWork.flags > PerformedWork) {
            // A fiber's effect list consists only of its children, not itself. So if
            // the root has an effect, we need to add it to the end of the list. The
            // resulting list is the set that would belong to the root's parent, if it
            // had one; that is, all the effects in the tree including the root.
            if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
            } else firstEffect = finishedWork;
        } else // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
        if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3); // Reset this to null before calling lifecycles
            ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
            // of the effect list for each phase: all mutation effects come before all
            // layout effects, and so on.
            // The first phase a "before mutation" phase. We use this phase to read the
            // state of the host tree right before we mutate it. This is where
            // getSnapshotBeforeUpdate is called.
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var error5 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error5);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null) // We no longer need to track the active instance fiber
            focusedInstanceHandle = null;
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime();
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            resetAfterCommit(root3.containerInfo); // The work-in-progress tree is now the current tree. This must come after
            // the mutation phase, so that the previous tree is still current during
            // componentWillUnmount, but before the layout phase, so that the finished
            // work is current during componentDidMount/Update.
            root3.current = finishedWork; // The next phase is the layout phase, where we call effects that read
            // the host tree after it's been mutated. The idiomatic use case for this is
            // layout, but class component lifecycles also fire here for legacy reasons.
            nextEffect = firstEffect;
            do {
                invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                if (hasCaughtError()) {
                    if (!(nextEffect !== null)) throw Error("Should be working on an effect.");
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                }
            }while (nextEffect !== null)
            nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
            // opportunity to paint.
            requestPaint();
            popInteractions(prevInteractions);
            executionContext = prevExecutionContext;
        } else {
            // No effects.
            root3.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            // This commit has passive effects. Stash a reference to them. But don't
            // schedule a callback until after flushing layout work.
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
        } else {
            // We are done with the effect chain at this point so let's clear the
            // nextEffect pointers to assist with GC. If we have passive effects, we'll
            // clear this in flushPassiveEffects.
            nextEffect = firstEffect;
            while(nextEffect !== null){
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) detachFiberAfterEffects(nextEffect);
                nextEffect = nextNextEffect;
            }
        } // Read this again, since an effect might have updated it
        remainingLanes = root3.pendingLanes; // Check if there's remaining work on this root
        if (remainingLanes !== NoLanes) {
            if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for(var i = 0; i < expirationTimes.length; i++)scheduleInteractions(root3, expirationTimes[i], root3.memoizedInteractions);
            }
            schedulePendingInteractions(root3, remainingLanes);
        } else // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) // If there are no passive effects, then we can complete the pending interactions.
        // Otherwise, we'll wait until after the passive effects are flushed.
        // Wait to do this until after remaining work has been scheduled,
        // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
        finishPendingInteractions(root3, lanes);
        if (remainingLanes === SyncLane) {
            // Count the number of times the root synchronously re-renders without
            // finishing. If there are too many, it indicates an infinite update loop.
            if (root3 === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root3;
            }
        } else nestedUpdateCount = 0;
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        onCommitRoot$1();
        // additional work on this root is scheduled.
        ensureRootIsScheduled(root3, now());
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
        }
        if ((executionContext & LegacyUnbatchedContext) !== NoContext) // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
        // synchronously, but layout updates should be deferred until the end
        // of the batch.
        return null;
         // If layout work was scheduled, flush it now.
        flushSyncCallbackQueue();
        return null;
    }
    function commitBeforeMutationEffects() {
        while(nextEffect !== null){
            var current6 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                    if (doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
                } else // TODO: Move this out of the hot path using a dedicated effect tag.
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current6, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) shouldFireAfterActiveInstanceBlur = true;
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current6, nextEffect);
                resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            {
                if (!rootDoesHavePassiveEffects) {
                    rootDoesHavePassiveEffects = true;
                    scheduleCallback(NormalPriority$1, function() {
                        flushPassiveEffects();
                        return null;
                    });
                }
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitMutationEffects(root3, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) commitResetTextContent(nextEffect);
            if (flags & Ref) {
                var current7 = nextEffect.alternate;
                if (current7 !== null) commitDetachRef(current7);
            } // The following switch statement is only concerned about placement,
            // updates, and deletions. To avoid needing to add a case for every possible
            // bitmap value, we remove the secondary effects from the effect tag and
            // switch on that value.
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch(primaryFlags){
                case Placement:
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    // TODO: findDOMNode doesn't rely on this any more but isMounted does
                    // and isMounted is deprecated anyway so we should be able to kill this.
                    nextEffect.flags &= ~Placement;
                    break;
                case PlacementAndUpdate:
                    // Placement
                    commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
                    // inserted, before any life-cycles like componentDidMount gets called.
                    nextEffect.flags &= ~Placement; // Update
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;
                case Hydrating:
                    nextEffect.flags &= ~Hydrating;
                    break;
                case HydratingAndUpdate:
                    nextEffect.flags &= ~Hydrating; // Update
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;
                case Update:
                    var _current3 = nextEffect.alternate;
                    commitWork(_current3, nextEffect);
                    break;
                case Deletion:
                    commitDeletion(root3, nextEffect);
                    break;
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitLayoutEffects(root3, committedLanes) {
        while(nextEffect !== null){
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
                var current8 = nextEffect.alternate;
                commitLifeCycles(root3, current8, nextEffect);
            }
            if (flags & Ref) commitAttachRef(nextEffect);
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
        }
    }
    function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
        }
        return false;
    }
    function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber);
        fiber.flags |= PassiveUnmountPendingDev;
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.flags |= PassiveUnmountPendingDev;
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function invokePassiveEffectCreate(effect) {
        var create = effect.create;
        effect.destroy = create();
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var root3 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) throw Error("Cannot flush passive effects while already rendering.");
        isFlushingPassiveEffects = true;
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        var prevInteractions = pushInteractions(root3); // It's important that ALL pending passive effect destroy functions are called
        // before ANY passive effect create functions are called.
        // Otherwise effects in sibling components might interfere with each other.
        // e.g. a destroy function in one component may unintentionally override a ref
        // value set by a create function in another component.
        // Layout effects have the same constraint.
        // First pass: Destroy stale passive effects.
        var unmountEffects = pendingPassiveHookEffectsUnmount;
        pendingPassiveHookEffectsUnmount = [];
        for(var i = 0; i < unmountEffects.length; i += 2){
            var _effect = unmountEffects[i];
            var fiber = unmountEffects[i + 1];
            var destroy = _effect.destroy;
            _effect.destroy = undefined;
            fiber.flags &= ~PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) alternate.flags &= ~PassiveUnmountPendingDev;
            if (typeof destroy === 'function') {
                setCurrentFiber(fiber);
                invokeGuardedCallback(null, destroy, null);
                if (hasCaughtError()) {
                    if (!(fiber !== null)) throw Error("Should be working on an effect.");
                    var error6 = clearCaughtError();
                    captureCommitPhaseError(fiber, error6);
                }
                resetCurrentFiber();
            }
        } // Second pass: Create new passive effects.
        var mountEffects = pendingPassiveHookEffectsMount;
        pendingPassiveHookEffectsMount = [];
        for(var _i = 0; _i < mountEffects.length; _i += 2){
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            setCurrentFiber(_fiber);
            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
            if (hasCaughtError()) {
                if (!(_fiber !== null)) throw Error("Should be working on an effect.");
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
            }
            resetCurrentFiber();
        } // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.
        var effect = root3.current.firstEffect;
        while(effect !== null){
            var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC
            effect.nextEffect = null;
            if (effect.flags & Deletion) detachFiberAfterEffects(effect);
            effect = nextNextEffect;
        }
        popInteractions(prevInteractions);
        finishPendingInteractions(root3, lanes);
        isFlushingPassiveEffects = false;
        executionContext = prevExecutionContext;
        flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.
        nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error7) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error7;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error7) {
        var errorInfo = createCapturedValue(error7, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        enqueueUpdate(rootFiber, update);
        var eventTime = requestEventTime();
        var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
        if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, SyncLane);
        }
    }
    function captureCommitPhaseError(sourceFiber, error7) {
        if (sourceFiber.tag === HostRoot) {
            // Error was thrown at the root. There is no parent, so the root
            // itself should capture it.
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error7);
            return;
        }
        var fiber = sourceFiber.return;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error7);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValue(error7, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    enqueueUpdate(fiber, update);
                    var eventTime = requestEventTime();
                    var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                    if (root3 !== null) {
                        markRootUpdated(root3, SyncLane, eventTime);
                        ensureRootIsScheduled(root3, eventTime);
                        schedulePendingInteractions(root3, SyncLane);
                    } else {
                        // This component has already been unmounted.
                        // We can't schedule any follow up work for the root because the fiber is already unmounted,
                        // but we can still call the log-only boundary so the error isn't swallowed.
                        //
                        // TODO This is only a temporary bandaid for the old reconciler fork.
                        // We can delete this special case once the new fork is merged.
                        if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) try {
                            instance.componentDidCatch(error7, errorInfo);
                        } catch (errorToIgnore) {
                        // This is kind of an edge case.
                        }
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
    }
    function pingSuspendedRoot(root4, wakeable, pingedLanes) {
        var pingCache = root4.pingCache;
        if (pingCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root4, pingedLanes);
        if (workInProgressRoot === root4 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            // Received a ping at the same priority level at which we're currently
            // rendering. We might want to restart this render. This should mirror
            // the logic of whether or not a root suspends once it completes.
            // TODO: If we're rendering sync either due to Sync, Batched or expired,
            // we should probably never restart.
            // If we're suspended with delay, or if it's a retry, we'll always suspend
            // so we can always restart.
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) // Restart from the root.
            prepareFreshStack(root4, NoLanes);
            else // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root4, eventTime);
        schedulePendingInteractions(root4, pingedLanes);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryLane === NoLane) retryLane = requestRetryLane(boundaryFiber);
         // TODO: Special case idle priority?
        var eventTime = requestEventTime();
        var root4 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
        if (root4 !== null) {
            markRootUpdated(root4, retryLane, eventTime);
            ensureRootIsScheduled(root4, eventTime);
            schedulePendingInteractions(root4, retryLane);
        }
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane; // Default
        var retryCache;
        retryCache = boundaryFiber.stateNode;
        if (retryCache !== null) // The wakeable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    } // Computes the next Just Noticeable Difference (JND) boundary.
    // The theory is that a person can't tell the difference between small differences in time.
    // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
    // difference in the experience. However, waiting for longer might mean that we can avoid
    // showing an intermediate loading state. The longer we have already waited, the harder it
    // is to tell small differences in time. Therefore, the longer we've already waited,
    // the longer we can wait additionally. At some point we have to give up though.
    // We pick a train model where the next boundary commits at a consistent schedule.
    // These particular numbers are vague estimates. We expect to adjust them based on research.
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) // We let the other warning about render phase updates deal with this one.
        return;
        if (!(fiber.mode & (BlockingMode | ConcurrentMode))) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var didWarnStateUpdateForUnmountedComponent = null;
    function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        var tag = fiber.tag;
        if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) // Only warn for user-defined components, not internal ones like Suspense.
        return;
         // If there are pending passive effects unmounts for this Fiber,
        // we can assume that they would have prevented this update.
        if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) return;
         // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';
        if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) return;
            didWarnStateUpdateForUnmountedComponent.add(componentName);
        } else didWarnStateUpdateForUnmountedComponent = new Set([
            componentName
        ]);
        if (isFlushingPassiveEffects) ;
        else {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current9, unitOfWork, lanes) {
        // If a component throws an error, we replay it again in a synchronously
        // dispatched event, so that the debugger will treat it as an uncaught
        // error See ReactErrorUtils for more information.
        // Before entering the begin phase, copy the work-in-progress onto a dummy
        // fiber. If beginWork throws, we'll use this to reset the state.
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current9, unitOfWork, lanes);
        } catch (originalError) {
            if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') // Don't replay promises. Treat everything else like an error.
            throw originalError;
             // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.
            resetContextDependencies();
            resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame
            unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) // Reset the profiler timer.
            startProfilerTimer(unitOfWork);
             // Run beginWork again.
            invokeGuardedCallback(null, beginWork, null, current9, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
                // Rethrow this error instead of the original one.
                throw replayError;
            } else // This branch is reachable if the render phase is impure.
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || 'Unknown';
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    } // a 'shared' variable that changes when act() opens/closes in tests.
    var IsThisRendererActing = {
        current: false
    };
    function warnIfNotScopedWithMatchingAct(fiber) {
        if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
    }
    function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.
    var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
    // scheduler is the actual recommendation. The alternative could be a testing build,
    // a new lib, or whatever; we dunno just yet. This message is for early adopters
    // to get their tests right.
    function warnIfUnmockedScheduler(fiber) {
        if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error("In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \njest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\nFor more info, visit https://reactjs.org/link/mock-scheduler");
            }
        }
    }
    function computeThreadID(root4, lane) {
        // Interaction threads are unique per root and expiration time.
        // NOTE: Intentionally unsound cast. All that matters is that it's a number
        // and it represents a batch of work. Could make a helper function instead,
        // but meh this is fine for now.
        return lane * 1000 + root4.interactionThreadID;
    }
    function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) spawnedWorkDuringRender = [
            lane
        ];
        else spawnedWorkDuringRender.push(lane);
    }
    function scheduleInteractions(root4, lane, interactions) {
        if (interactions.size > 0) {
            var pendingInteractionMap = root4.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++;
                pendingInteractions.add(interaction);
            });
            else {
                pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.
                interactions.forEach(function(interaction) {
                    interaction.__count++;
                });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lane);
                subscriber.onWorkScheduled(interactions, threadID);
            }
        }
    }
    function schedulePendingInteractions(root4, lane) {
        scheduleInteractions(root4, lane, tracing.__interactionsRef.current);
    }
    function startWorkOnPendingInteractions(root4, lanes) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.
        var interactions = new Set();
        root4.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
            });
        }); // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.
        root4.memoizedInteractions = interactions;
        if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
                var threadID = computeThreadID(root4, lanes);
                try {
                    subscriber.onWorkStarted(interactions, threadID);
                } catch (error7) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function() {
                        throw error7;
                    });
                }
            }
        }
    }
    function finishPendingInteractions(root4, committedLanes) {
        var remainingLanesAfterCommit = root4.pendingLanes;
        var subscriber;
        try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root4.memoizedInteractions.size > 0) {
                // FIXME: More than one lane can finish in a single commit.
                var threadID = computeThreadID(root4, committedLanes);
                subscriber.onWorkStopped(root4.memoizedInteractions, threadID);
            }
        } catch (error7) {
            // If the subscriber throws, rethrow it in a separate task
            scheduleCallback(ImmediatePriority$1, function() {
                throw error7;
            });
        } finally{
            // Clear completed interactions from the pending Map.
            // Unless the render was suspended or cascading work was scheduled,
            // In which case– leave pending interactions until the subsequent render.
            var pendingInteractionMap = root4.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                // Only decrement the pending interaction count if we're done.
                // If there's still work at the current priority,
                // That indicates that we are waiting for suspense data.
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                    pendingInteractionMap.delete(lane);
                    scheduledInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) try {
                            subscriber.onInteractionScheduledWorkCompleted(interaction);
                        } catch (error7) {
                            // If the subscriber throws, rethrow it in a separate task
                            scheduleCallback(ImmediatePriority$1, function() {
                                throw error7;
                            });
                        }
                    });
                }
            });
        }
    } // `act` testing API
    function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return actingUpdatesScopeDepth > 0;
    }
    // so we can tell if any async act() calls try to run in parallel.
    var actingUpdatesScopeDepth = 0;
    function detachFiberAfterEffects(fiber) {
        fiber.sibling = null;
        fiber.stateNode = null;
    }
    var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
         // Use the latest known implementation.
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                // ForwardRef is special because its resolved .type is an object,
                // but it's possible that we only have its inner render function in the map.
                // If that inner render function is different, we'll build a new forwardRef type.
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        } // Use the latest known implementation.
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return false;
        var prevType = fiber.elementType;
        var nextType = element.type; // If we got here, we know types aren't === equal.
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        } // Check if both types have a family and it's the same one.
        if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root4, update) {
        if (resolveFamily === null) // Hot reloading is disabled.
        return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root4.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root4, element) {
        if (root4.context !== emptyContextObject) // Super edge case: root has a legacy _renderSubtree context
        // but we don't know the parentComponent so we can't pass it.
        // Just ignore. We'll delete this with _renderSubtree code path later.
        return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root4, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root4, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root4.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) // We have a match. This only drills down to the closest host components.
        // There's no need to search deeper because for the purpose of giving
        // visual feedback, "flashing" outermost parent rectangles is sufficient.
        findHostInstancesForFiberShallowly(fiber, hostInstances);
        else // If there's no match, maybe there will be one further down in the child tree.
        if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
         // If we didn't find any host children, fallback to closest host parent.
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                // We got a match.
                foundHostInstances = true;
                hostInstances.add(node.stateNode); // There may still be more, so keep searching.
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({
        });
        /* eslint-disable no-new */ new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    /* eslint-enable no-new */ } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
    }
    var debugCounter = 1;
    function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null; // Fiber
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode; // Effects
        this.flags = NoFlags;
        this.nextEffect = null;
        this.firstEffect = null;
        this.lastEffect = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        // This isn't directly used but is handy for debugging internals:
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.
    var createFiber = function(tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.
    function createWorkInProgress(current9, pendingProps) {
        var workInProgress1 = current9.alternate;
        if (workInProgress1 === null) {
            // We use a double buffering pooling technique because we know that we'll
            // only ever need at most two versions of a tree. We pool the "other" unused
            // node that we're free to reuse. This is lazily created to avoid allocating
            // extra objects for things that are never updated. It also allow us to
            // reclaim the extra memory if needed.
            workInProgress1 = createFiber(current9.tag, pendingProps, current9.key, current9.mode);
            workInProgress1.elementType = current9.elementType;
            workInProgress1.type = current9.type;
            workInProgress1.stateNode = current9.stateNode;
            // DEV-only fields
            workInProgress1._debugID = current9._debugID;
            workInProgress1._debugSource = current9._debugSource;
            workInProgress1._debugOwner = current9._debugOwner;
            workInProgress1._debugHookTypes = current9._debugHookTypes;
            workInProgress1.alternate = current9;
            current9.alternate = workInProgress1;
        } else {
            workInProgress1.pendingProps = pendingProps; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // We already have an alternate.
            // Reset the effect tag.
            workInProgress1.flags = NoFlags; // The effect list is no longer valid.
            workInProgress1.nextEffect = null;
            workInProgress1.firstEffect = null;
            workInProgress1.lastEffect = null;
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress1.actualDuration = 0;
            workInProgress1.actualStartTime = -1;
        }
        workInProgress1.childLanes = current9.childLanes;
        workInProgress1.lanes = current9.lanes;
        workInProgress1.child = current9.child;
        workInProgress1.memoizedProps = current9.memoizedProps;
        workInProgress1.memoizedState = current9.memoizedState;
        workInProgress1.updateQueue = current9.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.
        var currentDependencies = current9.dependencies;
        workInProgress1.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        }; // These will be overridden during the parent's reconciliation
        workInProgress1.sibling = current9.sibling;
        workInProgress1.index = current9.index;
        workInProgress1.ref = current9.ref;
        workInProgress1.selfBaseDuration = current9.selfBaseDuration;
        workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        workInProgress1._debugNeedsRemount = current9._debugNeedsRemount;
        switch(workInProgress1.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress1.type = resolveFunctionForHotReloading(current9.type);
                break;
            case ClassComponent:
                workInProgress1.type = resolveClassForHotReloading(current9.type);
                break;
            case ForwardRef:
                workInProgress1.type = resolveForwardRefForHotReloading(current9.type);
                break;
        }
        return workInProgress1;
    } // Used to reuse a Fiber for a second pass.
    function resetWorkInProgress(workInProgress1, renderLanes1) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress1.flags &= Placement; // The effect list is no longer valid.
        workInProgress1.nextEffect = null;
        workInProgress1.firstEffect = null;
        workInProgress1.lastEffect = null;
        var current9 = workInProgress1.alternate;
        if (current9 === null) {
            // Reset to createFiber's initial values.
            workInProgress1.childLanes = NoLanes;
            workInProgress1.lanes = renderLanes1;
            workInProgress1.child = null;
            workInProgress1.memoizedProps = null;
            workInProgress1.memoizedState = null;
            workInProgress1.updateQueue = null;
            workInProgress1.dependencies = null;
            workInProgress1.stateNode = null;
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = 0;
            workInProgress1.treeBaseDuration = 0;
        } else {
            // Reset to the cloned values that createWorkInProgress would've.
            workInProgress1.childLanes = current9.childLanes;
            workInProgress1.lanes = current9.lanes;
            workInProgress1.child = current9.child;
            workInProgress1.memoizedProps = current9.memoizedProps;
            workInProgress1.memoizedState = current9.memoizedState;
            workInProgress1.updateQueue = current9.updateQueue; // Needed because Blocks store data on type.
            workInProgress1.type = current9.type; // Clone the dependencies object. This is mutated during the render phase, so
            // it cannot be shared with the current fiber.
            var currentDependencies = current9.dependencies;
            workInProgress1.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress1.selfBaseDuration = current9.selfBaseDuration;
            workInProgress1.treeBaseDuration = current9.treeBaseDuration;
        }
        return workInProgress1;
    }
    function createHostRootFiber(tag) {
        var mode;
        if (tag === ConcurrentRoot) mode = ConcurrentMode | BlockingMode | StrictMode;
        else if (tag === BlockingRoot) mode = BlockingMode | StrictMode;
        else mode = NoMode;
        if (isDevToolsPresent) // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_DEBUG_TRACING_MODE_TYPE:
                fiberTag = Mode;
                mode |= DebugTracingMode;
                break;
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
                return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
            case REACT_SCOPE_TYPE:
            // eslint-disable-next-line no-fallthrough
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        // This is a consumer
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentName(owner.type) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error('Profiler must specify an "id" as a prop');
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.type = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_TYPE;
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.
        fiber.type = REACT_SUSPENSE_LIST_TYPE;
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_OFFSCREEN_TYPE;
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
        fiber.type = REACT_LEGACY_HIDDEN_TYPE;
        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.
        fiber.elementType = 'DELETED';
        fiber.type = 'DELETED';
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
        };
        return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoMode);
         // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.nextEffect = source.nextEffect;
        target.firstEffect = source.firstEffect;
        target.lastEffect = source.lastEffect;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugID = source._debugID;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.hydrate = hydrate;
        this.callbackNode = null;
        this.callbackPriority = NoLanePriority;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.mutableSourceEagerHydrationData = null;
        this.interactionThreadID = tracing.unstable_getThreadID();
        this.memoizedInteractions = new Set();
        this.pendingInteractionMap = new Map();
        switch(tag){
            case BlockingRoot:
                this._debugRootType = 'createBlockingRoot()';
                break;
            case ConcurrentRoot:
                this._debugRootType = 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = 'createLegacyRoot()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
        var root4 = new FiberRootNode(containerInfo, tag, hydrate);
        // stateNode is any.
        var uninitializedFiber = createHostRootFiber(tag);
        root4.current = uninitializedFiber;
        uninitializedFiber.stateNode = root4;
        initializeUpdateQueue(uninitializedFiber);
        return root4;
    }
    // This ensures that the version used for server rendering matches the one
    // that is eventually read during hydration.
    // If they don't match there's a potential tear and a full deopt render is required.
    function registerMutableSourceForHydration(root4, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.
        if (root4.mutableSourceEagerHydrationData == null) root4.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root4.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {
    };
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw Error("Unable to find node on an unmounted component.");
            else throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    // Ideally this should reset to previous but this shouldn't be called in
                    // render and there's another warning for that anyway.
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
        return createFiberRoot(containerInfo, tag, hydrate);
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
        if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1);
            warnIfNotScopedWithMatchingAct(current$1);
        }
        var lane = requestUpdateLane(current$1);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
        // being called "element".
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        enqueueUpdate(current$1, update);
        scheduleUpdateOnFiber(current$1, lane, eventTime);
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    } // Increases the priority of thennables when they resolve within this boundary.
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = InputDiscreteHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority and they should not suspend on I/O,
        // since you have to wrap anything that might suspend in
        // Suspense.
        return;
        var eventTime = requestEventTime();
        var lane = SelectiveHydrationLane;
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) // We ignore HostRoots here because we can't increase
        // their priority other than synchronously flush it.
        return;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(fiber);
        scheduleUpdateOnFiber(fiber, lane, eventTime);
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function runWithPriority$2(priority, fn) {
        setCurrentUpdateLanePriority(priority);
        return fn();
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.tag === FundamentalComponent) return hostFiber.stateNode.instance;
        return hostFiber.stateNode;
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index1) {
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === path.length) {
            if (Array.isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        } // $FlowFixMe number or string is fine here
        updated[key] = copyWithDeleteImpl(obj[key], path, index1 + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index1) {
        var oldKey = oldPath[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj);
        if (index1 + 1 === oldPath.length) {
            var newKey = newPath[index1]; // $FlowFixMe number or string is fine here
            updated[newKey] = updated[oldKey];
            if (Array.isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else // $FlowFixMe number or string is fine here
        updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index1 + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index1, value) {
        if (index1 >= path.length) return value;
        var key = path[index1];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({
        }, obj); // $FlowFixMe number or string is fine here
        updated[key] = copyWithSetImpl(obj[key], path, index1 + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        // For now, the "id" of stateful hooks is just the stateful hook index.
        // This may change in the future with e.g. nested hooks.
        var currentHook1 = fiber.memoizedState;
        while(currentHook1 !== null && id > 0){
            currentHook1 = currentHook1.next;
            id--;
        }
        return currentHook1;
    }; // Support DevTools editable values for useState and useReducer.
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState; // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.
            fiber.memoizedProps = _assign({
            }, fiber.memoizedProps);
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
        }
    }; // Support DevTools props for function components, forwardRef, memo, host components, etc.
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher1 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher1,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools
        });
    }
    function ReactDOMRoot(container, options1) {
        this._internalRoot = createRootImpl(container, ConcurrentRoot, options1);
    }
    function ReactDOMBlockingRoot(container, tag, options1) {
        this._internalRoot = createRootImpl(container, tag, options1);
    }
    ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
        var root4 = this._internalRoot;
        if (typeof arguments[1] === 'function') error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var container = root4.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root4.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root4, null, null);
    };
    ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root4 = this._internalRoot;
        var container = root4.containerInfo;
        updateContainer(null, root4, null, function() {
            unmarkContainerAsRoot(container);
        });
    };
    function createRootImpl(container, tag, options1) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options1 != null && options1.hydrate === true;
        var hydrationCallbacks = options1 != null && options1.hydrationOptions || null;
        var mutableSources = options1 != null && options1.hydrationOptions != null && options1.hydrationOptions.mutableSources || null;
        var root4 = createContainer(container, tag, hydrate);
        markContainerAsRoot(root4.current, container);
        var containerNodeType = container.nodeType;
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root4, mutableSource);
        }
        return root4;
    }
    function createLegacyRoot(container, options1) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options1);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    var warnedAboutHydrateAPI = false;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container);
        return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }
    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.
        if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while(rootSibling = container.lastChild){
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
                container.removeChild(rootSibling);
            }
        }
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true;
            warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
        }
        return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
        } : undefined);
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        // member of intersection type." Whyyyyyy.
        var root4 = container._reactRootContainer;
        var fiberRoot;
        if (!root4) {
            // Initial mount
            root4 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    originalCallback.call(instance);
                };
            } // Initial mount should not be batched.
            unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
            });
        } else {
            fiberRoot = root4._internalRoot;
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(fiberRoot);
                    _originalCallback.call(instance);
                };
            } // Update
            updateContainer(children, fiberRoot, parentComponent, callback);
        }
        return getPublicRootInstance(fiberRoot);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        if (!isValidContainer(containerNode)) throw Error("Target container is not a DOM element.");
        if (!(parentComponent != null && has(parentComponent))) throw Error("parentComponent must be a valid React Component");
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    // $FlowFixMe This should probably use `delete container._reactRootContainer`
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            }); // If you call unmountComponentAtNode twice in quick succession, you'll
            // get `true` twice. That's probably fine?
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setAttemptHydrationAtPriority(runWithPriority$2);
    var didWarnAboutUnstableCreatePortal = false;
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw Error("Target container is not a DOM element.");
         // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    function unstable_createPortal(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true;
            warn("The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.");
        }
        return createPortal$1(children, container, key);
    }
    var Internals = {
        // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
        // This is an array for better minification.
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
        ]
    };
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) // If we're in Chrome or Firefox, provide a download link if not installed.
    {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.
            if (/^(https?|file):$/.test(protocol)) // eslint-disable-next-line react-internal/no-production-logging
            console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync;
    exports.hydrate = hydrate;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_createPortal = unstable_createPortal;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
})();

},{"react":"6TuXu","object-assign":"jzTFF","scheduler":"lS3J3","scheduler/tracing":"aEthe"}],"lS3J3":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler.development.js');

},{"./cjs/scheduler.development.js":"9ljDM"}],"9ljDM":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var requestHostCallback;
    var requestHostTimeout;
    var cancelHostTimeout;
    var requestPaint;
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    if (// implementation using setTimeout.
    typeof window === 'undefined' || typeof MessageChannel !== 'function') {
        // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
        // fallback to a naive implementation.
        var _callback = null;
        var _timeoutID = null;
        var _flushCallback = function() {
            if (_callback !== null) try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
            } catch (e) {
                setTimeout(_flushCallback, 0);
                throw e;
            }
        };
        requestHostCallback = function(cb) {
            if (_callback !== null) // Protect against re-entrancy.
            setTimeout(requestHostCallback, 0, cb);
            else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
            }
        };
        requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
        };
        cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
        };
        exports.unstable_shouldYield = function() {
            return false;
        };
        requestPaint = exports.unstable_forceFrameRate = function() {
        };
    } else {
        // Capture local references to native APIs, in case a polyfill overrides them.
        var _setTimeout = window.setTimeout;
        var _clearTimeout = window.clearTimeout;
        if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            if (typeof cancelAnimationFrame !== 'function') // Using console['error'] to evade Babel and ESLint
            console['error']("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
        // thread, like user events. By default, it yields multiple times per frame.
        // It does not attempt to align with frame boundaries, since most tasks don't
        // need to be frame aligned; for those that do, use requestAnimationFrame.
        var yieldInterval = 5;
        var deadline = 0; // TODO: Make this configurable
        // `isInputPending` is not available. Since we have no way of knowing if
        // there's pending input, always yield at the end of the frame.
        exports.unstable_shouldYield = function() {
            return exports.unstable_now() >= deadline;
        }; // Since we yield every frame regardless, `requestPaint` has no effect.
        requestPaint = function() {
        };
        exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
                // Using console['error'] to evade Babel and ESLint
                console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
            }
            if (fps > 0) yieldInterval = Math.floor(1000 / fps);
            else // reset the framerate
            yieldInterval = 5;
        };
        var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
                // cycle. This means there's always time remaining at the beginning of
                // the message event.
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                    var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                    if (!hasMoreWork) {
                        isMessageLoopRunning = false;
                        scheduledHostCallback = null;
                    } else // If there's more work, schedule the next message event at the end
                    // of the preceding one.
                    port.postMessage(null);
                } catch (error) {
                    // If a scheduler task throws, exit the current browser task so the
                    // error can be observed.
                    port.postMessage(null);
                    throw error;
                }
            } else isMessageLoopRunning = false;
             // Yielding to the browser will give it a chance to paint, so we can
        };
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
            }
        };
        requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
            }, ms);
        };
        cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
        };
    }
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        var first = heap[0];
        return first === undefined ? null : first;
    }
    function pop(heap) {
        var first = heap[0];
        if (first !== undefined) {
            var last = heap.pop();
            if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
            }
            return first;
        } else return null;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(true){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== undefined && compare(parent, node) > 0) {
                // The parent is larger. Swap positions.
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else // The parent is smaller. Exit.
            return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        while(index < length){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.
            if (left !== undefined && compare(left, node) < 0) {
                if (right !== undefined && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (right !== undefined && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else // Neither child is smaller. Exit.
            return;
        }
    }
    function compare(a, b) {
        // Compare sort index first, then task id.
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    // TODO: Use symbols?
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {
    }
    /* eslint-disable no-var */ // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111
    var maxSigned31BitInt = 1073741823; // Times out immediately
    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap
    var taskQueue = [];
    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.
    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
    var currentTask = null;
    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    function advanceTimers(currentTime) {
        // Check for tasks that are no longer delayed and add them to the queue.
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) // Timer was cancelled.
            pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                // Timer fired. Transfer to the task queue.
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else // Remaining timers are pending.
            return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else // No catch in prod code path.
            return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        } // Return whether there's additional work
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                // Shift down to normal priority
                priorityLevel = NormalPriority;
                break;
            default:
                // Anything lower than normal priority should remain at the current level.
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                // All tasks are delayed, and this is the task with the earliest delay.
                if (isHostTimeoutScheduled) // Cancel an existing timeout.
                cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                 // Schedule a timeout.
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            // wait until the next time we yield.
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {
    }
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        // remove from the queue because you can't remove arbitrary nodes from an
        // array based heap, only the first one.)
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
})();

},{}],"aEthe":[function(require,module,exports) {
'use strict';
module.exports = require('./cjs/scheduler-tracing.development.js');

},{"./cjs/scheduler-tracing.development.js":"jlVvF"}],"jlVvF":[function(require,module,exports) {
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
(function() {
    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.
    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.
    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.
    exports.__subscriberRef = null;
    exports.__interactionsRef = {
        current: new Set()
    };
    exports.__subscriberRef = {
        current: null
    };
    function unstable_clear(callback) {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = new Set();
        try {
            return callback();
        } finally{
            exports.__interactionsRef.current = prevInteractions;
        }
    }
    function unstable_getCurrent() {
        return exports.__interactionsRef.current;
    }
    function unstable_getThreadID() {
        return ++threadIDCounter;
    }
    function unstable_trace(name, timestamp, callback) {
        var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;
        var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp
        };
        var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
        // To do that, clone the current interactions.
        // The previous set will be restored upon completion.
        var interactions = new Set(prevInteractions);
        interactions.add(interaction);
        exports.__interactionsRef.current = interactions;
        var subscriber = exports.__subscriberRef.current;
        var returnValue;
        try {
            if (subscriber !== null) subscriber.onInteractionTraced(interaction);
        } finally{
            try {
                if (subscriber !== null) subscriber.onWorkStarted(interactions, threadID);
            } finally{
                try {
                    returnValue = callback();
                } finally{
                    exports.__interactionsRef.current = prevInteractions;
                    try {
                        if (subscriber !== null) subscriber.onWorkStopped(interactions, threadID);
                    } finally{
                        interaction.__count--; // If no async work was scheduled for this interaction,
                        // Notify subscribers that it's completed.
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                }
            }
        }
        return returnValue;
    }
    function unstable_wrap(callback) {
        var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;
        var wrappedInteractions = exports.__interactionsRef.current;
        var subscriber = exports.__subscriberRef.current;
        if (subscriber !== null) subscriber.onWorkScheduled(wrappedInteractions, threadID);
         // Update the pending async work count for the current interactions.
        // Update after calling subscribers in case of error.
        wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
        });
        var hasRun = false;
        function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
                var returnValue;
                try {
                    if (subscriber !== null) subscriber.onWorkStarted(wrappedInteractions, threadID);
                } finally{
                    try {
                        returnValue = callback.apply(undefined, arguments);
                    } finally{
                        exports.__interactionsRef.current = prevInteractions;
                        if (subscriber !== null) subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                }
                return returnValue;
            } finally{
                if (!hasRun) {
                    // We only expect a wrapped function to be executed once,
                    // But in the event that it's executed more than once–
                    // Only decrement the outstanding interaction counts once.
                    hasRun = true; // Update pending async counts for all wrapped interactions.
                    // If this was the last scheduled async work for any of them,
                    // Mark them as completed.
                    wrappedInteractions.forEach(function(interaction) {
                        interaction.__count--;
                        if (subscriber !== null && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                    });
                }
            }
        }
        wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
                if (subscriber !== null) subscriber.onWorkCanceled(wrappedInteractions, threadID);
            } finally{
                // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.
                wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber && interaction.__count === 0) subscriber.onInteractionScheduledWorkCompleted(interaction);
                });
            }
        };
        return wrapped;
    }
    var subscribers = null;
    subscribers = new Set();
    function unstable_subscribe(subscriber) {
        subscribers.add(subscriber);
        if (subscribers.size === 1) exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
        };
    }
    function unstable_unsubscribe(subscriber) {
        subscribers.delete(subscriber);
        if (subscribers.size === 0) exports.__subscriberRef.current = null;
    }
    function onInteractionTraced(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionTraced(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onInteractionScheduledWorkCompleted(interaction) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkScheduled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStarted(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkStopped(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    function onWorkCanceled(interactions, threadID) {
        var didCatchError = false;
        var caughtError = null;
        subscribers.forEach(function(subscriber) {
            try {
                subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
                if (!didCatchError) {
                    didCatchError = true;
                    caughtError = error;
                }
            }
        });
        if (didCatchError) throw caughtError;
    }
    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_trace = unstable_trace;
    exports.unstable_unsubscribe = unstable_unsubscribe;
    exports.unstable_wrap = unstable_wrap;
})();

},{}]},["2rAXy","czkC5","iqQLF"], "iqQLF", "parcelRequire6398")

//# sourceMappingURL=index.b4af9c3f.js.map
